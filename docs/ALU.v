/**
 * This is an autogenerated netlist code from CircuitVerse. Verilog Code can be
 * tested on https://www.edaplayground.com/ using Icarus Verilog 0.9.7. This is an
 * experimental module and some manual changes make need to be done in order for
 * this to work.
 *
 * If you have any ideas/suggestions or bug fixes, raise an issue
 * on https://github.com/CircuitVerse/CircuitVerse/issues/new/choose
 */

/*
  Element Usage Report
    Input - 43 times
    AndGate - 19 times
    OrGate - 7 times
    Output - 30 times
    NotGate - 11 times
    XorGate - 16 times
    Splitter - 38 times
    SubCircuit - 126 times
    ConstantVal - 19 times
    Adder - 12 times
    Multiplexer - 1 times
    Demultiplexer - 2 times
*/

/*
  Usage Instructions and Tips
    Labels - Ensure unique label names and avoid using verilog keywords
    Warnings - Connect all optional inputs to remove warnings
*/

// Sample Testbench Code - Uncomment to use

/*
module TestBench();

  reg [1:0] Ctrl;
  reg [7:0] inp_0, Input_1, Input_2, inp_1;
  reg [8:0] inp_0;

  wire Carry_out_8;
  wire [7:0] out_0, \rezultat_0-7 , \Rezultat_8-15 ;
  wire [8:0] out_0;

  C2_Converter_In DUT0(out_0, inp_0);

  main DUT1(\rezultat_0-7 , \Rezultat_8-15 , Input_1, Input_2, Ctrl);

  \ML-CLA-8_Bit  DUT2(out_0, Carry_out_8, inp_0, inp_1);

  Shifter DUT3(out_0, inp_0);

  initial begin
    inp_0 = 0;
    Input_1 = 0;
    Input_2 = 0;
    Ctrl = 0;
    inp_1 = 0;

    #15
    $display("out_0 = %b", out_0);
    $display("\rezultat_0-7  = %b", \rezultat_0-7 );
    $display("\Rezultat_8-15  = %b", \Rezultat_8-15 );
    $display("Carry_out_8 = %b", Carry_out_8);

    #10
    $display("out_0 = %b", out_0);
    $display("\rezultat_0-7  = %b", \rezultat_0-7 );
    $display("\Rezultat_8-15  = %b", \Rezultat_8-15 );
    $display("Carry_out_8 = %b", Carry_out_8);

    $finish;

  end
endmodule

*/

module \+-M_Decider (Scadere, \2M , \1M , \Xi+1 , Xi, \Xi-1 );
  output Scadere,  \2M ,  \1M ;
  input \Xi+1 , Xi, \Xi-1 ;
  wire and_2_out, or_1_out, and_0_out, or_0_out, not_2_out, and_3_out, and_1_out, not_0_out, not_1_out;
  assign and_2_out = \Xi-1  & not_0_out;
  assign or_1_out = and_3_out | and_2_out;
  assign \1M  = or_1_out;
  assign and_0_out = \Xi-1  & Xi & not_1_out;
  assign or_0_out = and_0_out | and_1_out;
  assign \2M  = or_0_out;
  assign not_2_out = ~\Xi-1 ;
  assign and_3_out = not_2_out & Xi;
  assign and_1_out = not_2_out & not_0_out & \Xi+1 ;
  assign not_0_out = ~Xi;
  assign Scadere = \Xi+1 ;
  assign not_1_out = ~\Xi+1 ;
endmodule

module FAC(Solutia, Carry_out, In_1, In_2, Carry_In);
  output Solutia,  Carry_out;
  input In_1, In_2, Carry_In;
  wire and_0_out, or_0_out, xor_1_out, and_1_out, xor_0_out;
  assign and_0_out = Carry_In & xor_0_out;
  assign or_0_out = and_0_out | and_1_out;
  assign Carry_out = or_0_out;
  assign xor_1_out = xor_0_out ^ Carry_In;
  assign Solutia = xor_1_out;
  assign and_1_out = In_1 & In_2;
  assign xor_0_out = In_1 ^ In_2;
endmodule


module \RCA-8 (Carry_out, Output, Input_1, Input_2);
  output Carry_out;
  output [7:0] Output;
  input [7:0] Input_1, Input_2;
  wire FAC_6_out_0, FAC_6_out_1, FAC_7_out_0, FAC_7_out_1, FAC_5_out_0, FAC_5_out_1, FAC_4_out_0, FAC_4_out_1, FAC_2_out_0, FAC_2_out_1, FAC_3_out_0, FAC_3_out_1, FAC_1_out_0, FAC_1_out_1, FAC_0_out_0, FAC_0_out_1, Carry_in;
  wire [7:0] Splitter_2_cmb;
  
  FAC FAC_6(FAC_6_out_0, FAC_6_out_1, Input_1[7], Input_2[7], FAC_7_out_1);
  assign Carry_out = FAC_6_out_1;
  assign Splitter_2_cmb = {FAC_6_out_0,FAC_7_out_0,FAC_5_out_0,FAC_4_out_0,FAC_2_out_0,FAC_3_out_0,FAC_1_out_0,FAC_0_out_0};
  assign Output = Splitter_2_cmb;
  FAC FAC_7(FAC_7_out_0, FAC_7_out_1, Input_1[6], Input_2[6], FAC_5_out_1);
  FAC FAC_5(FAC_5_out_0, FAC_5_out_1, Input_1[5], Input_2[5], FAC_4_out_1);
  FAC FAC_4(FAC_4_out_0, FAC_4_out_1, Input_1[4], Input_2[4], FAC_2_out_1);
  FAC FAC_2(FAC_2_out_0, FAC_2_out_1, Input_1[3], Input_2[3], FAC_3_out_1);
  FAC FAC_3(FAC_3_out_0, FAC_3_out_1, Input_1[2], Input_2[2], FAC_1_out_1);
  FAC FAC_1(FAC_1_out_0, FAC_1_out_1, Input_1[1], Input_2[1], FAC_0_out_1);
  FAC FAC_0(FAC_0_out_0, FAC_0_out_1, Input_1[0], Input_2[0], Carry_in);
  
  assign Carry_in = 1'b0;
endmodule



module C2_Converter_In(out_0, inp_0);
  output [7:0] out_0;
  input [7:0] inp_0;
  wire not_7_out, \RCA-8_0_out_0 , not_6_out, not_5_out, not_4_out, not_3_out, not_2_out, not_1_out, not_0_out;
  wire [7:0] Splitter_0_cmb, \RCA-8_0_out_1 , const_0;
  
  assign not_7_out = ~inp_0[7];
  assign Splitter_0_cmb = {not_7_out,not_6_out,not_5_out,not_4_out,not_3_out,not_2_out,not_1_out,not_0_out};
  \RCA-8  \RCA-8_0 (\RCA-8_0_out_0 , \RCA-8_0_out_1 , const_0, Splitter_0_cmb);
  assign out_0 = \RCA-8_0_out_1 ;
  assign not_6_out = ~inp_0[6];
  assign not_5_out = ~inp_0[5];
  assign not_4_out = ~inp_0[4];
  assign not_3_out = ~inp_0[3];
  assign not_2_out = ~inp_0[2];
  assign not_1_out = ~inp_0[1];
  assign not_0_out = ~inp_0[0];
  assign const_0 = 8'b00000001;
endmodule


module \Scazator/Sumator (Solutia, K, Input_1, Input_2);
  output [7:0] Solutia;
  input K;
  input [7:0] Input_1, Input_2;
  wire xor_7_out, FAC_7_out_0, FAC_7_out_1, xor_6_out, FAC_6_out_0, FAC_6_out_1, xor_5_out, FAC_5_out_0, FAC_5_out_1, xor_4_out, FAC_4_out_0, FAC_4_out_1, xor_3_out, FAC_3_out_0, FAC_3_out_1, xor_2_out, FAC_2_out_0, FAC_2_out_1, xor_1_out, FAC_1_out_0, FAC_1_out_1, xor_0_out, FAC_0_out_0, FAC_0_out_1;
  wire [7:0] Splitter_2_cmb;
  
  assign xor_7_out = K ^ Input_2[7];
  FAC FAC_7(FAC_7_out_0, FAC_7_out_1, Input_1[7], xor_7_out, FAC_6_out_1);
  assign Splitter_2_cmb = {FAC_7_out_0,FAC_6_out_0,FAC_5_out_0,FAC_4_out_0,FAC_3_out_0,FAC_2_out_0,FAC_1_out_0,FAC_0_out_0};
  assign Solutia = Splitter_2_cmb;
  assign xor_6_out = K ^ Input_2[6];
  FAC FAC_6(FAC_6_out_0, FAC_6_out_1, Input_1[6], xor_6_out, FAC_5_out_1);
  assign xor_5_out = K ^ Input_2[5];
  FAC FAC_5(FAC_5_out_0, FAC_5_out_1, Input_1[5], xor_5_out, FAC_4_out_1);
  assign xor_4_out = K ^ Input_2[4];
  FAC FAC_4(FAC_4_out_0, FAC_4_out_1, Input_1[4], xor_4_out, FAC_3_out_1);
  assign xor_3_out = K ^ Input_2[3];
  FAC FAC_3(FAC_3_out_0, FAC_3_out_1, Input_1[3], xor_3_out, FAC_2_out_1);
  assign xor_2_out = K ^ Input_2[2];
  FAC FAC_2(FAC_2_out_0, FAC_2_out_1, Input_1[2], xor_2_out, FAC_1_out_1);
  assign xor_1_out = K ^ Input_2[1];
  FAC FAC_1(FAC_1_out_0, FAC_1_out_1, Input_1[1], xor_1_out, FAC_0_out_1);
  assign xor_0_out = K ^ Input_2[0];
  FAC FAC_0(FAC_0_out_0, FAC_0_out_1, Input_1[0], xor_0_out, K);
  
endmodule


module Devider_Cell(Sol, C_Out, Ctrl_out, b_out, a, b, C_in, Ctrl);
  output Sol,  C_Out,  Ctrl_out,  b_out;
  input a, b, C_in, Ctrl;
  wire xor_0_out, FAC_0_out_0, FAC_0_out_1;
  assign Ctrl_out = Ctrl;
  assign xor_0_out = b ^ Ctrl;
  FAC FAC_0(FAC_0_out_0, FAC_0_out_1, xor_0_out, a, C_in);
  assign C_Out = FAC_0_out_1;
  assign Sol = FAC_0_out_0;
  assign b_out = b;
endmodule



module Non_Restoring_Devider(Rezultat, Rest, Impartitul, Impartitorul);
  output [7:0] Rezultat, Rest;
  input [7:0] Impartitul, Impartitorul;
  wire Devider_Cell_1_out_0, Devider_Cell_1_out_1, Devider_Cell_1_out_2, Devider_Cell_1_out_3, Devider_Cell_10_out_0, Devider_Cell_10_out_1, Devider_Cell_10_out_2, Devider_Cell_10_out_3, Devider_Cell_19_out_0, Devider_Cell_19_out_1, Devider_Cell_19_out_2, Devider_Cell_19_out_3, Devider_Cell_28_out_0, Devider_Cell_28_out_1, Devider_Cell_28_out_2, Devider_Cell_28_out_3, Devider_Cell_37_out_0, Devider_Cell_37_out_1, Devider_Cell_37_out_2, Devider_Cell_37_out_3, Devider_Cell_46_out_0, Devider_Cell_46_out_1, Devider_Cell_46_out_2, Devider_Cell_46_out_3, Devider_Cell_55_out_0, Devider_Cell_55_out_1, Devider_Cell_55_out_2, Devider_Cell_55_out_3, Devider_Cell_64_out_0, Devider_Cell_64_out_1, Devider_Cell_64_out_2, Devider_Cell_64_out_3, and_0_out, Adder_0_Sum, Devider_Cell_65_out_0, Devider_Cell_65_out_1, Devider_Cell_65_out_2, Devider_Cell_65_out_3, and_1_out, Adder_1_Cout, Adder_1_Sum, Devider_Cell_66_out_0, Devider_Cell_66_out_1, Devider_Cell_66_out_2, Devider_Cell_66_out_3, and_2_out, Adder_2_Cout, Adder_2_Sum, Devider_Cell_67_out_0, Devider_Cell_67_out_1, Devider_Cell_67_out_2, Devider_Cell_67_out_3, and_3_out, Adder_3_Cout, Adder_3_Sum, Devider_Cell_68_out_0, Devider_Cell_68_out_1, Devider_Cell_68_out_2, Devider_Cell_68_out_3, and_4_out, Adder_4_Cout, Adder_4_Sum, Devider_Cell_69_out_0, Devider_Cell_69_out_1, Devider_Cell_69_out_2, Devider_Cell_69_out_3, and_5_out, Adder_5_Cout, Adder_5_Sum, Devider_Cell_70_out_0, Devider_Cell_70_out_1, Devider_Cell_70_out_2, Devider_Cell_70_out_3, and_6_out, Adder_6_Cout, Adder_6_Sum, Devider_Cell_71_out_0, Devider_Cell_71_out_1, Devider_Cell_71_out_2, Devider_Cell_71_out_3, and_7_out, Adder_7_Cout, Adder_7_Sum, Devider_Cell_63_out_0, Devider_Cell_63_out_1, Devider_Cell_63_out_2, Devider_Cell_63_out_3, Devider_Cell_56_out_0, Devider_Cell_56_out_1, Devider_Cell_56_out_2, Devider_Cell_56_out_3, Devider_Cell_57_out_0, Devider_Cell_57_out_1, Devider_Cell_57_out_2, Devider_Cell_57_out_3, Devider_Cell_58_out_0, Devider_Cell_58_out_1, Devider_Cell_58_out_2, Devider_Cell_58_out_3, Devider_Cell_59_out_0, Devider_Cell_59_out_1, Devider_Cell_59_out_2, Devider_Cell_59_out_3, Devider_Cell_60_out_0, Devider_Cell_60_out_1, Devider_Cell_60_out_2, Devider_Cell_60_out_3, Devider_Cell_61_out_0, Devider_Cell_61_out_1, Devider_Cell_61_out_2, Devider_Cell_61_out_3, Devider_Cell_62_out_0, Devider_Cell_62_out_1, Devider_Cell_62_out_2, Devider_Cell_62_out_3, Devider_Cell_54_out_0, Devider_Cell_54_out_1, Devider_Cell_54_out_2, Devider_Cell_54_out_3, Devider_Cell_47_out_0, Devider_Cell_47_out_1, Devider_Cell_47_out_2, Devider_Cell_47_out_3, Devider_Cell_48_out_0, Devider_Cell_48_out_1, Devider_Cell_48_out_2, Devider_Cell_48_out_3, Devider_Cell_49_out_0, Devider_Cell_49_out_1, Devider_Cell_49_out_2, Devider_Cell_49_out_3, Devider_Cell_50_out_0, Devider_Cell_50_out_1, Devider_Cell_50_out_2, Devider_Cell_50_out_3, Devider_Cell_51_out_0, Devider_Cell_51_out_1, Devider_Cell_51_out_2, Devider_Cell_51_out_3, Devider_Cell_52_out_0, Devider_Cell_52_out_1, Devider_Cell_52_out_2, Devider_Cell_52_out_3, Devider_Cell_53_out_0, Devider_Cell_53_out_1, Devider_Cell_53_out_2, Devider_Cell_53_out_3, Devider_Cell_45_out_0, Devider_Cell_45_out_1, Devider_Cell_45_out_2, Devider_Cell_45_out_3, Devider_Cell_38_out_0, Devider_Cell_38_out_1, Devider_Cell_38_out_2, Devider_Cell_38_out_3, Devider_Cell_39_out_0, Devider_Cell_39_out_1, Devider_Cell_39_out_2, Devider_Cell_39_out_3, Devider_Cell_40_out_0, Devider_Cell_40_out_1, Devider_Cell_40_out_2, Devider_Cell_40_out_3, Devider_Cell_41_out_0, Devider_Cell_41_out_1, Devider_Cell_41_out_2, Devider_Cell_41_out_3, Devider_Cell_42_out_0, Devider_Cell_42_out_1, Devider_Cell_42_out_2, Devider_Cell_42_out_3, Devider_Cell_43_out_0, Devider_Cell_43_out_1, Devider_Cell_43_out_2, Devider_Cell_43_out_3, Devider_Cell_44_out_0, Devider_Cell_44_out_1, Devider_Cell_44_out_2, Devider_Cell_44_out_3, Devider_Cell_36_out_0, Devider_Cell_36_out_1, Devider_Cell_36_out_2, Devider_Cell_36_out_3, Devider_Cell_29_out_0, Devider_Cell_29_out_1, Devider_Cell_29_out_2, Devider_Cell_29_out_3, Devider_Cell_30_out_0, Devider_Cell_30_out_1, Devider_Cell_30_out_2, Devider_Cell_30_out_3, Devider_Cell_31_out_0, Devider_Cell_31_out_1, Devider_Cell_31_out_2, Devider_Cell_31_out_3, Devider_Cell_32_out_0, Devider_Cell_32_out_1, Devider_Cell_32_out_2, Devider_Cell_32_out_3, Devider_Cell_33_out_0, Devider_Cell_33_out_1, Devider_Cell_33_out_2, Devider_Cell_33_out_3, Devider_Cell_34_out_0, Devider_Cell_34_out_1, Devider_Cell_34_out_2, Devider_Cell_34_out_3, Devider_Cell_35_out_0, Devider_Cell_35_out_1, Devider_Cell_35_out_2, Devider_Cell_35_out_3, Devider_Cell_27_out_0, Devider_Cell_27_out_1, Devider_Cell_27_out_2, Devider_Cell_27_out_3, Devider_Cell_20_out_0, Devider_Cell_20_out_1, Devider_Cell_20_out_2, Devider_Cell_20_out_3, Devider_Cell_21_out_0, Devider_Cell_21_out_1, Devider_Cell_21_out_2, Devider_Cell_21_out_3, Devider_Cell_22_out_0, Devider_Cell_22_out_1, Devider_Cell_22_out_2, Devider_Cell_22_out_3, Devider_Cell_23_out_0, Devider_Cell_23_out_1, Devider_Cell_23_out_2, Devider_Cell_23_out_3, Devider_Cell_24_out_0, Devider_Cell_24_out_1, Devider_Cell_24_out_2, Devider_Cell_24_out_3, Devider_Cell_25_out_0, Devider_Cell_25_out_1, Devider_Cell_25_out_2, Devider_Cell_25_out_3, Devider_Cell_26_out_0, Devider_Cell_26_out_1, Devider_Cell_26_out_2, Devider_Cell_26_out_3, Devider_Cell_18_out_0, Devider_Cell_18_out_1, Devider_Cell_18_out_2, Devider_Cell_18_out_3, Devider_Cell_11_out_0, Devider_Cell_11_out_1, Devider_Cell_11_out_2, Devider_Cell_11_out_3, Devider_Cell_12_out_0, Devider_Cell_12_out_1, Devider_Cell_12_out_2, Devider_Cell_12_out_3, Devider_Cell_13_out_0, Devider_Cell_13_out_1, Devider_Cell_13_out_2, Devider_Cell_13_out_3, Devider_Cell_14_out_0, Devider_Cell_14_out_1, Devider_Cell_14_out_2, Devider_Cell_14_out_3, Devider_Cell_15_out_0, Devider_Cell_15_out_1, Devider_Cell_15_out_2, Devider_Cell_15_out_3, Devider_Cell_16_out_0, Devider_Cell_16_out_1, Devider_Cell_16_out_2, Devider_Cell_16_out_3, Devider_Cell_17_out_0, Devider_Cell_17_out_1, Devider_Cell_17_out_2, Devider_Cell_17_out_3, Devider_Cell_9_out_0, Devider_Cell_9_out_1, Devider_Cell_9_out_2, Devider_Cell_9_out_3, Devider_Cell_2_out_0, Devider_Cell_2_out_1, Devider_Cell_2_out_2, Devider_Cell_2_out_3, Devider_Cell_3_out_0, Devider_Cell_3_out_1, Devider_Cell_3_out_2, Devider_Cell_3_out_3, Devider_Cell_4_out_0, Devider_Cell_4_out_1, Devider_Cell_4_out_2, Devider_Cell_4_out_3, Devider_Cell_5_out_0, Devider_Cell_5_out_1, Devider_Cell_5_out_2, Devider_Cell_5_out_3, Devider_Cell_6_out_0, Devider_Cell_6_out_1, Devider_Cell_6_out_2, Devider_Cell_6_out_3, Devider_Cell_7_out_0, Devider_Cell_7_out_1, Devider_Cell_7_out_2, Devider_Cell_7_out_3, Devider_Cell_8_out_0, Devider_Cell_8_out_1, Devider_Cell_8_out_2, Devider_Cell_8_out_3, Devider_Cell_0_out_0, Devider_Cell_0_out_1, Devider_Cell_0_out_2, Devider_Cell_0_out_3, const_9, const_8, const_7, const_6, const_5, const_4, const_3, const_2, const_1, const_0;
  wire [7:0] Splitter_3_cmb, Splitter_2_cmb;
  
  Devider_Cell Devider_Cell_1(Devider_Cell_1_out_0, Devider_Cell_1_out_1, Devider_Cell_1_out_2, Devider_Cell_1_out_3, const_3, Impartitorul[7], Devider_Cell_2_out_1, Devider_Cell_0_out_2);
  Devider_Cell Devider_Cell_10(Devider_Cell_10_out_0, Devider_Cell_10_out_1, Devider_Cell_10_out_2, Devider_Cell_10_out_3, Devider_Cell_2_out_0, Devider_Cell_1_out_3, Devider_Cell_11_out_1, Devider_Cell_9_out_2);
  Devider_Cell Devider_Cell_19(Devider_Cell_19_out_0, Devider_Cell_19_out_1, Devider_Cell_19_out_2, Devider_Cell_19_out_3, Devider_Cell_11_out_0, Devider_Cell_10_out_3, Devider_Cell_20_out_1, Devider_Cell_18_out_2);
  Devider_Cell Devider_Cell_28(Devider_Cell_28_out_0, Devider_Cell_28_out_1, Devider_Cell_28_out_2, Devider_Cell_28_out_3, Devider_Cell_20_out_0, Devider_Cell_19_out_3, Devider_Cell_29_out_1, Devider_Cell_27_out_2);
  Devider_Cell Devider_Cell_37(Devider_Cell_37_out_0, Devider_Cell_37_out_1, Devider_Cell_37_out_2, Devider_Cell_37_out_3, Devider_Cell_29_out_0, Devider_Cell_28_out_3, Devider_Cell_38_out_1, Devider_Cell_36_out_2);
  Devider_Cell Devider_Cell_46(Devider_Cell_46_out_0, Devider_Cell_46_out_1, Devider_Cell_46_out_2, Devider_Cell_46_out_3, Devider_Cell_38_out_0, Devider_Cell_37_out_3, Devider_Cell_47_out_1, Devider_Cell_45_out_2);
  Devider_Cell Devider_Cell_55(Devider_Cell_55_out_0, Devider_Cell_55_out_1, Devider_Cell_55_out_2, Devider_Cell_55_out_3, Devider_Cell_47_out_0, Devider_Cell_46_out_3, Devider_Cell_56_out_1, Devider_Cell_54_out_2);
  Devider_Cell Devider_Cell_64(Devider_Cell_64_out_0, Devider_Cell_64_out_1, Devider_Cell_64_out_2, Devider_Cell_64_out_3, Devider_Cell_56_out_0, Devider_Cell_55_out_3, Devider_Cell_65_out_1, Devider_Cell_63_out_2);
  assign and_0_out = Devider_Cell_64_out_3 & Devider_Cell_63_out_0;
  assign Adder_0_Sum = Devider_Cell_64_out_0 + and_0_out + Adder_1_Cout;
  assign Splitter_3_cmb = {Adder_0_Sum,Adder_1_Sum,Adder_2_Sum,Adder_3_Sum,Adder_4_Sum,Adder_5_Sum,Adder_6_Sum,Adder_7_Sum};
  assign Rest = Splitter_3_cmb;
  Devider_Cell Devider_Cell_65(Devider_Cell_65_out_0, Devider_Cell_65_out_1, Devider_Cell_65_out_2, Devider_Cell_65_out_3, Devider_Cell_57_out_0, Devider_Cell_56_out_3, Devider_Cell_66_out_1, Devider_Cell_64_out_2);
  assign and_1_out = Devider_Cell_65_out_3 & Devider_Cell_63_out_0;
  assign Adder_1_Sum = Devider_Cell_65_out_0 + and_1_out + Adder_2_Cout;
  Devider_Cell Devider_Cell_66(Devider_Cell_66_out_0, Devider_Cell_66_out_1, Devider_Cell_66_out_2, Devider_Cell_66_out_3, Devider_Cell_58_out_0, Devider_Cell_57_out_3, Devider_Cell_67_out_1, Devider_Cell_65_out_2);
  assign and_2_out = Devider_Cell_66_out_3 & Devider_Cell_63_out_0;
  assign Adder_2_Sum = Devider_Cell_66_out_0 + and_2_out + Adder_3_Cout;
  Devider_Cell Devider_Cell_67(Devider_Cell_67_out_0, Devider_Cell_67_out_1, Devider_Cell_67_out_2, Devider_Cell_67_out_3, Devider_Cell_59_out_0, Devider_Cell_58_out_3, Devider_Cell_68_out_1, Devider_Cell_66_out_2);
  assign and_3_out = Devider_Cell_67_out_3 & Devider_Cell_63_out_0;
  assign Adder_3_Sum = Devider_Cell_67_out_0 + and_3_out + Adder_4_Cout;
  Devider_Cell Devider_Cell_68(Devider_Cell_68_out_0, Devider_Cell_68_out_1, Devider_Cell_68_out_2, Devider_Cell_68_out_3, Devider_Cell_60_out_0, Devider_Cell_59_out_3, Devider_Cell_69_out_1, Devider_Cell_67_out_2);
  assign and_4_out = Devider_Cell_68_out_3 & Devider_Cell_63_out_0;
  assign Adder_4_Sum = Devider_Cell_68_out_0 + and_4_out + Adder_5_Cout;
  Devider_Cell Devider_Cell_69(Devider_Cell_69_out_0, Devider_Cell_69_out_1, Devider_Cell_69_out_2, Devider_Cell_69_out_3, Devider_Cell_61_out_0, Devider_Cell_60_out_3, Devider_Cell_70_out_1, Devider_Cell_68_out_2);
  assign and_5_out = Devider_Cell_69_out_3 & Devider_Cell_63_out_0;
  assign Adder_5_Sum = Devider_Cell_69_out_0 + and_5_out + Adder_6_Cout;
  Devider_Cell Devider_Cell_70(Devider_Cell_70_out_0, Devider_Cell_70_out_1, Devider_Cell_70_out_2, Devider_Cell_70_out_3, Devider_Cell_62_out_0, Devider_Cell_61_out_3, Devider_Cell_71_out_1, Devider_Cell_69_out_2);
  assign and_6_out = Devider_Cell_70_out_3 & Devider_Cell_63_out_0;
  assign Adder_6_Sum = Devider_Cell_70_out_0 + and_6_out + Adder_7_Cout;
  Devider_Cell Devider_Cell_71(Devider_Cell_71_out_0, Devider_Cell_71_out_1, Devider_Cell_71_out_2, Devider_Cell_71_out_3, Impartitul[0], Devider_Cell_62_out_3, Devider_Cell_71_out_2, Devider_Cell_70_out_2);
  assign and_7_out = Devider_Cell_71_out_3 & Devider_Cell_63_out_0;
  assign Adder_7_Sum = Devider_Cell_71_out_0 + and_7_out;
  Devider_Cell Devider_Cell_63(Devider_Cell_63_out_0, Devider_Cell_63_out_1, Devider_Cell_63_out_2, Devider_Cell_63_out_3, Devider_Cell_55_out_0, Devider_Cell_54_out_3, Devider_Cell_64_out_1, Devider_Cell_54_out_1);
  assign Splitter_2_cmb = {Devider_Cell_0_out_1,Devider_Cell_9_out_1,Devider_Cell_18_out_1,Devider_Cell_27_out_1,Devider_Cell_36_out_1,Devider_Cell_45_out_1,Devider_Cell_54_out_1,Devider_Cell_63_out_1};
  assign Rezultat = Splitter_2_cmb;
  Devider_Cell Devider_Cell_56(Devider_Cell_56_out_0, Devider_Cell_56_out_1, Devider_Cell_56_out_2, Devider_Cell_56_out_3, Devider_Cell_48_out_0, Devider_Cell_47_out_3, Devider_Cell_57_out_1, Devider_Cell_55_out_2);
  Devider_Cell Devider_Cell_57(Devider_Cell_57_out_0, Devider_Cell_57_out_1, Devider_Cell_57_out_2, Devider_Cell_57_out_3, Devider_Cell_49_out_0, Devider_Cell_48_out_3, Devider_Cell_58_out_1, Devider_Cell_56_out_2);
  Devider_Cell Devider_Cell_58(Devider_Cell_58_out_0, Devider_Cell_58_out_1, Devider_Cell_58_out_2, Devider_Cell_58_out_3, Devider_Cell_50_out_0, Devider_Cell_49_out_3, Devider_Cell_59_out_1, Devider_Cell_57_out_2);
  Devider_Cell Devider_Cell_59(Devider_Cell_59_out_0, Devider_Cell_59_out_1, Devider_Cell_59_out_2, Devider_Cell_59_out_3, Devider_Cell_51_out_0, Devider_Cell_50_out_3, Devider_Cell_60_out_1, Devider_Cell_58_out_2);
  Devider_Cell Devider_Cell_60(Devider_Cell_60_out_0, Devider_Cell_60_out_1, Devider_Cell_60_out_2, Devider_Cell_60_out_3, Devider_Cell_52_out_0, Devider_Cell_51_out_3, Devider_Cell_61_out_1, Devider_Cell_59_out_2);
  Devider_Cell Devider_Cell_61(Devider_Cell_61_out_0, Devider_Cell_61_out_1, Devider_Cell_61_out_2, Devider_Cell_61_out_3, Devider_Cell_53_out_0, Devider_Cell_52_out_3, Devider_Cell_62_out_1, Devider_Cell_60_out_2);
  Devider_Cell Devider_Cell_62(Devider_Cell_62_out_0, Devider_Cell_62_out_1, Devider_Cell_62_out_2, Devider_Cell_62_out_3, Impartitul[1], Devider_Cell_53_out_3, Devider_Cell_62_out_2, Devider_Cell_61_out_2);
  Devider_Cell Devider_Cell_54(Devider_Cell_54_out_0, Devider_Cell_54_out_1, Devider_Cell_54_out_2, Devider_Cell_54_out_3, Devider_Cell_46_out_0, Devider_Cell_45_out_3, Devider_Cell_55_out_1, Devider_Cell_45_out_1);
  Devider_Cell Devider_Cell_47(Devider_Cell_47_out_0, Devider_Cell_47_out_1, Devider_Cell_47_out_2, Devider_Cell_47_out_3, Devider_Cell_39_out_0, Devider_Cell_38_out_3, Devider_Cell_48_out_1, Devider_Cell_46_out_2);
  Devider_Cell Devider_Cell_48(Devider_Cell_48_out_0, Devider_Cell_48_out_1, Devider_Cell_48_out_2, Devider_Cell_48_out_3, Devider_Cell_40_out_0, Devider_Cell_39_out_3, Devider_Cell_49_out_1, Devider_Cell_47_out_2);
  Devider_Cell Devider_Cell_49(Devider_Cell_49_out_0, Devider_Cell_49_out_1, Devider_Cell_49_out_2, Devider_Cell_49_out_3, Devider_Cell_41_out_0, Devider_Cell_40_out_3, Devider_Cell_50_out_1, Devider_Cell_48_out_2);
  Devider_Cell Devider_Cell_50(Devider_Cell_50_out_0, Devider_Cell_50_out_1, Devider_Cell_50_out_2, Devider_Cell_50_out_3, Devider_Cell_42_out_0, Devider_Cell_41_out_3, Devider_Cell_51_out_1, Devider_Cell_49_out_2);
  Devider_Cell Devider_Cell_51(Devider_Cell_51_out_0, Devider_Cell_51_out_1, Devider_Cell_51_out_2, Devider_Cell_51_out_3, Devider_Cell_43_out_0, Devider_Cell_42_out_3, Devider_Cell_52_out_1, Devider_Cell_50_out_2);
  Devider_Cell Devider_Cell_52(Devider_Cell_52_out_0, Devider_Cell_52_out_1, Devider_Cell_52_out_2, Devider_Cell_52_out_3, Devider_Cell_44_out_0, Devider_Cell_43_out_3, Devider_Cell_53_out_1, Devider_Cell_51_out_2);
  Devider_Cell Devider_Cell_53(Devider_Cell_53_out_0, Devider_Cell_53_out_1, Devider_Cell_53_out_2, Devider_Cell_53_out_3, Impartitul[2], Devider_Cell_44_out_3, Devider_Cell_53_out_2, Devider_Cell_52_out_2);
  Devider_Cell Devider_Cell_45(Devider_Cell_45_out_0, Devider_Cell_45_out_1, Devider_Cell_45_out_2, Devider_Cell_45_out_3, Devider_Cell_37_out_0, Devider_Cell_36_out_3, Devider_Cell_46_out_1, Devider_Cell_36_out_1);
  Devider_Cell Devider_Cell_38(Devider_Cell_38_out_0, Devider_Cell_38_out_1, Devider_Cell_38_out_2, Devider_Cell_38_out_3, Devider_Cell_30_out_0, Devider_Cell_29_out_3, Devider_Cell_39_out_1, Devider_Cell_37_out_2);
  Devider_Cell Devider_Cell_39(Devider_Cell_39_out_0, Devider_Cell_39_out_1, Devider_Cell_39_out_2, Devider_Cell_39_out_3, Devider_Cell_31_out_0, Devider_Cell_30_out_3, Devider_Cell_40_out_1, Devider_Cell_38_out_2);
  Devider_Cell Devider_Cell_40(Devider_Cell_40_out_0, Devider_Cell_40_out_1, Devider_Cell_40_out_2, Devider_Cell_40_out_3, Devider_Cell_32_out_0, Devider_Cell_31_out_3, Devider_Cell_41_out_1, Devider_Cell_39_out_2);
  Devider_Cell Devider_Cell_41(Devider_Cell_41_out_0, Devider_Cell_41_out_1, Devider_Cell_41_out_2, Devider_Cell_41_out_3, Devider_Cell_33_out_0, Devider_Cell_32_out_3, Devider_Cell_42_out_1, Devider_Cell_40_out_2);
  Devider_Cell Devider_Cell_42(Devider_Cell_42_out_0, Devider_Cell_42_out_1, Devider_Cell_42_out_2, Devider_Cell_42_out_3, Devider_Cell_34_out_0, Devider_Cell_33_out_3, Devider_Cell_43_out_1, Devider_Cell_41_out_2);
  Devider_Cell Devider_Cell_43(Devider_Cell_43_out_0, Devider_Cell_43_out_1, Devider_Cell_43_out_2, Devider_Cell_43_out_3, Devider_Cell_35_out_0, Devider_Cell_34_out_3, Devider_Cell_44_out_1, Devider_Cell_42_out_2);
  Devider_Cell Devider_Cell_44(Devider_Cell_44_out_0, Devider_Cell_44_out_1, Devider_Cell_44_out_2, Devider_Cell_44_out_3, Impartitul[3], Devider_Cell_35_out_3, Devider_Cell_44_out_2, Devider_Cell_43_out_2);
  Devider_Cell Devider_Cell_36(Devider_Cell_36_out_0, Devider_Cell_36_out_1, Devider_Cell_36_out_2, Devider_Cell_36_out_3, Devider_Cell_28_out_0, Devider_Cell_27_out_3, Devider_Cell_37_out_1, Devider_Cell_27_out_1);
  Devider_Cell Devider_Cell_29(Devider_Cell_29_out_0, Devider_Cell_29_out_1, Devider_Cell_29_out_2, Devider_Cell_29_out_3, Devider_Cell_21_out_0, Devider_Cell_20_out_3, Devider_Cell_30_out_1, Devider_Cell_28_out_2);
  Devider_Cell Devider_Cell_30(Devider_Cell_30_out_0, Devider_Cell_30_out_1, Devider_Cell_30_out_2, Devider_Cell_30_out_3, Devider_Cell_22_out_0, Devider_Cell_21_out_3, Devider_Cell_31_out_1, Devider_Cell_29_out_2);
  Devider_Cell Devider_Cell_31(Devider_Cell_31_out_0, Devider_Cell_31_out_1, Devider_Cell_31_out_2, Devider_Cell_31_out_3, Devider_Cell_23_out_0, Devider_Cell_22_out_3, Devider_Cell_32_out_1, Devider_Cell_30_out_2);
  Devider_Cell Devider_Cell_32(Devider_Cell_32_out_0, Devider_Cell_32_out_1, Devider_Cell_32_out_2, Devider_Cell_32_out_3, Devider_Cell_24_out_0, Devider_Cell_23_out_3, Devider_Cell_33_out_1, Devider_Cell_31_out_2);
  Devider_Cell Devider_Cell_33(Devider_Cell_33_out_0, Devider_Cell_33_out_1, Devider_Cell_33_out_2, Devider_Cell_33_out_3, Devider_Cell_25_out_0, Devider_Cell_24_out_3, Devider_Cell_34_out_1, Devider_Cell_32_out_2);
  Devider_Cell Devider_Cell_34(Devider_Cell_34_out_0, Devider_Cell_34_out_1, Devider_Cell_34_out_2, Devider_Cell_34_out_3, Devider_Cell_26_out_0, Devider_Cell_25_out_3, Devider_Cell_35_out_1, Devider_Cell_33_out_2);
  Devider_Cell Devider_Cell_35(Devider_Cell_35_out_0, Devider_Cell_35_out_1, Devider_Cell_35_out_2, Devider_Cell_35_out_3, Impartitul[4], Devider_Cell_26_out_3, Devider_Cell_35_out_2, Devider_Cell_34_out_2);
  Devider_Cell Devider_Cell_27(Devider_Cell_27_out_0, Devider_Cell_27_out_1, Devider_Cell_27_out_2, Devider_Cell_27_out_3, Devider_Cell_19_out_0, Devider_Cell_18_out_3, Devider_Cell_28_out_1, Devider_Cell_18_out_1);
  Devider_Cell Devider_Cell_20(Devider_Cell_20_out_0, Devider_Cell_20_out_1, Devider_Cell_20_out_2, Devider_Cell_20_out_3, Devider_Cell_12_out_0, Devider_Cell_11_out_3, Devider_Cell_21_out_1, Devider_Cell_19_out_2);
  Devider_Cell Devider_Cell_21(Devider_Cell_21_out_0, Devider_Cell_21_out_1, Devider_Cell_21_out_2, Devider_Cell_21_out_3, Devider_Cell_13_out_0, Devider_Cell_12_out_3, Devider_Cell_22_out_1, Devider_Cell_20_out_2);
  Devider_Cell Devider_Cell_22(Devider_Cell_22_out_0, Devider_Cell_22_out_1, Devider_Cell_22_out_2, Devider_Cell_22_out_3, Devider_Cell_14_out_0, Devider_Cell_13_out_3, Devider_Cell_23_out_1, Devider_Cell_21_out_2);
  Devider_Cell Devider_Cell_23(Devider_Cell_23_out_0, Devider_Cell_23_out_1, Devider_Cell_23_out_2, Devider_Cell_23_out_3, Devider_Cell_15_out_0, Devider_Cell_14_out_3, Devider_Cell_24_out_1, Devider_Cell_22_out_2);
  Devider_Cell Devider_Cell_24(Devider_Cell_24_out_0, Devider_Cell_24_out_1, Devider_Cell_24_out_2, Devider_Cell_24_out_3, Devider_Cell_16_out_0, Devider_Cell_15_out_3, Devider_Cell_25_out_1, Devider_Cell_23_out_2);
  Devider_Cell Devider_Cell_25(Devider_Cell_25_out_0, Devider_Cell_25_out_1, Devider_Cell_25_out_2, Devider_Cell_25_out_3, Devider_Cell_17_out_0, Devider_Cell_16_out_3, Devider_Cell_26_out_1, Devider_Cell_24_out_2);
  Devider_Cell Devider_Cell_26(Devider_Cell_26_out_0, Devider_Cell_26_out_1, Devider_Cell_26_out_2, Devider_Cell_26_out_3, Impartitul[5], Devider_Cell_17_out_3, Devider_Cell_26_out_2, Devider_Cell_25_out_2);
  Devider_Cell Devider_Cell_18(Devider_Cell_18_out_0, Devider_Cell_18_out_1, Devider_Cell_18_out_2, Devider_Cell_18_out_3, Devider_Cell_10_out_0, Devider_Cell_9_out_3, Devider_Cell_19_out_1, Devider_Cell_9_out_1);
  Devider_Cell Devider_Cell_11(Devider_Cell_11_out_0, Devider_Cell_11_out_1, Devider_Cell_11_out_2, Devider_Cell_11_out_3, Devider_Cell_3_out_0, Devider_Cell_2_out_3, Devider_Cell_12_out_1, Devider_Cell_10_out_2);
  Devider_Cell Devider_Cell_12(Devider_Cell_12_out_0, Devider_Cell_12_out_1, Devider_Cell_12_out_2, Devider_Cell_12_out_3, Devider_Cell_4_out_0, Devider_Cell_3_out_3, Devider_Cell_13_out_1, Devider_Cell_11_out_2);
  Devider_Cell Devider_Cell_13(Devider_Cell_13_out_0, Devider_Cell_13_out_1, Devider_Cell_13_out_2, Devider_Cell_13_out_3, Devider_Cell_5_out_0, Devider_Cell_4_out_3, Devider_Cell_14_out_1, Devider_Cell_12_out_2);
  Devider_Cell Devider_Cell_14(Devider_Cell_14_out_0, Devider_Cell_14_out_1, Devider_Cell_14_out_2, Devider_Cell_14_out_3, Devider_Cell_6_out_0, Devider_Cell_5_out_3, Devider_Cell_15_out_1, Devider_Cell_13_out_2);
  Devider_Cell Devider_Cell_15(Devider_Cell_15_out_0, Devider_Cell_15_out_1, Devider_Cell_15_out_2, Devider_Cell_15_out_3, Devider_Cell_7_out_0, Devider_Cell_6_out_3, Devider_Cell_16_out_1, Devider_Cell_14_out_2);
  Devider_Cell Devider_Cell_16(Devider_Cell_16_out_0, Devider_Cell_16_out_1, Devider_Cell_16_out_2, Devider_Cell_16_out_3, Devider_Cell_8_out_0, Devider_Cell_7_out_3, Devider_Cell_17_out_1, Devider_Cell_15_out_2);
  Devider_Cell Devider_Cell_17(Devider_Cell_17_out_0, Devider_Cell_17_out_1, Devider_Cell_17_out_2, Devider_Cell_17_out_3, Impartitul[6], Devider_Cell_8_out_3, Devider_Cell_17_out_2, Devider_Cell_16_out_2);
  Devider_Cell Devider_Cell_9(Devider_Cell_9_out_0, Devider_Cell_9_out_1, Devider_Cell_9_out_2, Devider_Cell_9_out_3, Devider_Cell_1_out_0, Devider_Cell_0_out_3, Devider_Cell_10_out_1, Devider_Cell_0_out_1);
  Devider_Cell Devider_Cell_2(Devider_Cell_2_out_0, Devider_Cell_2_out_1, Devider_Cell_2_out_2, Devider_Cell_2_out_3, const_4, Impartitorul[6], Devider_Cell_3_out_1, Devider_Cell_1_out_2);
  Devider_Cell Devider_Cell_3(Devider_Cell_3_out_0, Devider_Cell_3_out_1, Devider_Cell_3_out_2, Devider_Cell_3_out_3, const_5, Impartitorul[5], Devider_Cell_4_out_1, Devider_Cell_2_out_2);
  Devider_Cell Devider_Cell_4(Devider_Cell_4_out_0, Devider_Cell_4_out_1, Devider_Cell_4_out_2, Devider_Cell_4_out_3, const_6, Impartitorul[4], Devider_Cell_5_out_1, Devider_Cell_3_out_2);
  Devider_Cell Devider_Cell_5(Devider_Cell_5_out_0, Devider_Cell_5_out_1, Devider_Cell_5_out_2, Devider_Cell_5_out_3, const_7, Impartitorul[3], Devider_Cell_6_out_1, Devider_Cell_4_out_2);
  Devider_Cell Devider_Cell_6(Devider_Cell_6_out_0, Devider_Cell_6_out_1, Devider_Cell_6_out_2, Devider_Cell_6_out_3, const_8, Impartitorul[2], Devider_Cell_7_out_1, Devider_Cell_5_out_2);
  Devider_Cell Devider_Cell_7(Devider_Cell_7_out_0, Devider_Cell_7_out_1, Devider_Cell_7_out_2, Devider_Cell_7_out_3, const_9, Impartitorul[1], Devider_Cell_8_out_1, Devider_Cell_6_out_2);
  Devider_Cell Devider_Cell_8(Devider_Cell_8_out_0, Devider_Cell_8_out_1, Devider_Cell_8_out_2, Devider_Cell_8_out_3, Impartitul[7], Impartitorul[0], Devider_Cell_8_out_2, Devider_Cell_7_out_2);
  Devider_Cell Devider_Cell_0(Devider_Cell_0_out_0, Devider_Cell_0_out_1, Devider_Cell_0_out_2, Devider_Cell_0_out_3, const_2, const_1, Devider_Cell_1_out_1, const_0);
  
  assign const_9 = 1'b0;
  assign const_8 = 1'b0;
  assign const_7 = 1'b0;
  assign const_6 = 1'b0;
  assign const_5 = 1'b0;
  assign const_4 = 1'b0;
  assign const_3 = 1'b0;
  assign const_2 = 1'b0;
  assign const_1 = 1'b0;
  assign const_0 = 1'b1;
endmodule

module Decoder(Out, \S-bit , Xi, \Xi-1 , \2M , \1M );
  output Out;
  input \S-bit , Xi, \Xi-1 , \2M , \1M ;
  wire Multiplexer_0_out, xor_0_out, const_0;
  wire [1:0] Splitter_0_cmb;
  assign Splitter_0_cmb = {\2M ,\1M };
  Multiplexer4 Multiplexer_0(Multiplexer_0_out, const_0, Xi, \Xi-1 , , Splitter_0_cmb);
  assign xor_0_out = \S-bit  ^ Multiplexer_0_out;
  assign Out = xor_0_out;
  assign const_0 = 1'b0;
endmodule


module Full_Decoder(out, \8_Bin_nr , \1M , \2M , Semn);
  output [8:0] out;
  input \1M , \2M , Semn;
  input [7:0] \8_Bin_nr ;
  wire Decoder_8_out, Decoder_7_out, Decoder_6_out, Decoder_5_out, Decoder_4_out, Decoder_3_out, Decoder_2_out, Decoder_1_out, Decoder_0_out, const_1, const_0;
  wire [8:0] Splitter_2_cmb, \2C_corectie_Sum , Splitter_1_cmb;
  assign Splitter_2_cmb = {const_1,const_1,const_1,const_1,const_1,const_1,const_1,const_1,Semn};
  assign \2C_corectie_Sum  = Splitter_1_cmb + Splitter_2_cmb;
  assign out = \2C_corectie_Sum ;
  Decoder Decoder_8(Decoder_8_out, Semn, \8_Bin_nr [0], const_0, \2M , \1M );
  assign Splitter_1_cmb = {Decoder_0_out,Decoder_1_out,Decoder_2_out,Decoder_3_out,Decoder_4_out,Decoder_5_out,Decoder_6_out,Decoder_7_out,Decoder_8_out};
  Decoder Decoder_7(Decoder_7_out, Semn, \8_Bin_nr [1], \8_Bin_nr [0], \2M , \1M );
  Decoder Decoder_6(Decoder_6_out, Semn, \8_Bin_nr [2], \8_Bin_nr [1], \2M , \1M );
  Decoder Decoder_5(Decoder_5_out, Semn, \8_Bin_nr [3], \8_Bin_nr [2], \2M , \1M );
  Decoder Decoder_4(Decoder_4_out, Semn, \8_Bin_nr [4], \8_Bin_nr [3], \2M , \1M );
  Decoder Decoder_3(Decoder_3_out, Semn, \8_Bin_nr [5], \8_Bin_nr [4], \2M , \1M );
  Decoder Decoder_2(Decoder_2_out, Semn, \8_Bin_nr [6], \8_Bin_nr [5], \2M , \1M );
  Decoder Decoder_1(Decoder_1_out, Semn, \8_Bin_nr [7], \8_Bin_nr [6], \2M , \1M );
  Decoder Decoder_0(Decoder_0_out, Semn, \8_Bin_nr [7], \8_Bin_nr [7], \2M , \1M );
  
  assign const_1 = 1'b0;
  assign const_0 = 1'b0;
endmodule




module \Booth_Radix-4 (\rezultat_0-7 , \rezultat_7-15 , Q, M);
  output [7:0] \rezultat_0-7 , \rezultat_7-15 ;
  input [7:0] Q, M;
  wire \+-M_Decider_3_out_0 , \+-M_Decider_3_out_1 , \+-M_Decider_3_out_2 , \+-M_Decider_0_out_0 , \+-M_Decider_0_out_1 , \+-M_Decider_0_out_2 , \+-M_Decider_1_out_0 , \+-M_Decider_1_out_1 , \+-M_Decider_1_out_2 , \+-M_Decider_2_out_0 , \+-M_Decider_2_out_1 , \+-M_Decider_2_out_2 , const_0;
  wire [8:0] Full_Decoder_7_out, Splitter_8_cmb, Adder_2_Sum, Full_Decoder_6_out, Splitter_9_cmb, Adder_1_Sum, Splitter_14_cmb, Full_Decoder_5_out, Splitter_10_cmb, Adder_0_Sum, Splitter_13_cmb, Full_Decoder_4_out, Splitter_2_cmb, Splitter_4_cmb;
  wire [15:0] Splitter_15_cmb;
  Full_Decoder Full_Decoder_7(Full_Decoder_7_out, M, \+-M_Decider_3_out_2 , \+-M_Decider_3_out_1 , \+-M_Decider_3_out_0 );
  
  assign Splitter_8_cmb = {Full_Decoder_7_out[8],Full_Decoder_7_out[8],Full_Decoder_7_out[7:0]};
  assign Adder_2_Sum = Splitter_14_cmb + Splitter_8_cmb;
  assign Splitter_15_cmb = {Adder_2_Sum,Adder_1_Sum[1:0],Adder_0_Sum[1:0],Splitter_2_cmb[1:0]};
  
  assign \rezultat_7-15  = Splitter_15_cmb[15:8];
  assign \rezultat_0-7  = Splitter_15_cmb[7:0];
  Full_Decoder Full_Decoder_6(Full_Decoder_6_out, M, \+-M_Decider_0_out_2 , \+-M_Decider_0_out_1 , \+-M_Decider_0_out_0 );
  
  assign Splitter_9_cmb = {Full_Decoder_6_out[8],Full_Decoder_6_out[8],Full_Decoder_6_out[7:0]};
  assign Adder_1_Sum = Splitter_13_cmb + Splitter_9_cmb;
  
  assign Splitter_14_cmb = {Adder_1_Sum[9],Adder_1_Sum[9],Adder_1_Sum[9],Adder_1_Sum[8:2]};
  Full_Decoder Full_Decoder_5(Full_Decoder_5_out, M, \+-M_Decider_1_out_2 , \+-M_Decider_1_out_1 , \+-M_Decider_1_out_0 );
  
  assign Splitter_10_cmb = {Full_Decoder_5_out[8],Full_Decoder_5_out[8],Full_Decoder_5_out[7:0]};
  assign Adder_0_Sum = Splitter_4_cmb + Splitter_10_cmb;
  
  assign Splitter_13_cmb = {Adder_0_Sum[9],Adder_0_Sum[9],Adder_0_Sum[9],Adder_0_Sum[8:2]};
  Full_Decoder Full_Decoder_4(Full_Decoder_4_out, M, \+-M_Decider_2_out_2 , \+-M_Decider_2_out_1 , \+-M_Decider_2_out_0 );
  
  assign Splitter_2_cmb = {Full_Decoder_4_out[8],Full_Decoder_4_out[8],Full_Decoder_4_out[7:0]};
  
  assign Splitter_4_cmb = {Splitter_2_cmb[9],Splitter_2_cmb[9],Splitter_2_cmb[9],Splitter_2_cmb[8:2]};
  
  \+-M_Decider  \+-M_Decider_3 (\+-M_Decider_3_out_0 , \+-M_Decider_3_out_1 , \+-M_Decider_3_out_2 , Q[7], Q[6], Q[5]);
  \+-M_Decider  \+-M_Decider_0 (\+-M_Decider_0_out_0 , \+-M_Decider_0_out_1 , \+-M_Decider_0_out_2 , Q[5], Q[4], Q[3]);
  \+-M_Decider  \+-M_Decider_1 (\+-M_Decider_1_out_0 , \+-M_Decider_1_out_1 , \+-M_Decider_1_out_2 , Q[3], Q[2], Q[1]);
  \+-M_Decider  \+-M_Decider_2 (\+-M_Decider_2_out_0 , \+-M_Decider_2_out_1 , \+-M_Decider_2_out_2 , Q[1], Q[0], const_0);
  assign const_0 = 1'b0;
endmodule









module main(\rezultat_0-7 , \Rezultat_8-15 , Input_1, Input_2, Ctrl);
  output [7:0] \rezultat_0-7 , \Rezultat_8-15 ;
  input [1:0] Ctrl;
  input [7:0] Input_1, Input_2;
  wire const_1, const_0;
  wire [7:0] Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Non_Restoring_Devider_1_out_0, Non_Restoring_Devider_1_out_1, xor_0_out, xor_1_out, \Booth_Radix-4_2_out_0 , \Booth_Radix-4_2_out_1 , \Scazator/Sumator_0_out , \Scazator/Sumator_3_out , Demultiplexer_1_out_0, Demultiplexer_1_out_1, Demultiplexer_1_out_2;
  Demultiplexer4 #(8) Demultiplexer_0(Demultiplexer_0_out_0, Demultiplexer_0_out_1, Demultiplexer_0_out_2, Demultiplexer_0_out_3, Input_1, Ctrl);
  Non_Restoring_Devider Non_Restoring_Devider_1(Non_Restoring_Devider_1_out_0, Non_Restoring_Devider_1_out_1, Demultiplexer_0_out_3, Input_2);
  assign xor_0_out = \Booth_Radix-4_2_out_1  ^ Non_Restoring_Devider_1_out_1;
  assign \Rezultat_8-15  = xor_0_out;
  assign xor_1_out = \Scazator/Sumator_0_out  ^ \Scazator/Sumator_3_out  ^ Non_Restoring_Devider_1_out_0 ^ \Booth_Radix-4_2_out_0 ;
  assign \rezultat_0-7  = xor_1_out;
  \Booth_Radix-4  \Booth_Radix-4_2 (\Booth_Radix-4_2_out_0 , \Booth_Radix-4_2_out_1 , Demultiplexer_0_out_2, Demultiplexer_1_out_2);
  \Scazator/Sumator  \Scazator/Sumator_0 (\Scazator/Sumator_0_out , const_0, Demultiplexer_0_out_1, Demultiplexer_1_out_1);
  \Scazator/Sumator  \Scazator/Sumator_3 (\Scazator/Sumator_3_out , const_1, Demultiplexer_0_out_0, Demultiplexer_1_out_0);
  Demultiplexer4 #(8) Demultiplexer_1(Demultiplexer_1_out_0, Demultiplexer_1_out_1, Demultiplexer_1_out_2, , Input_2, Ctrl);
  assign const_1 = 1'b0;
  assign const_0 = 1'b1;
endmodule

module \B_+_C (\Cj+1 , \Gi,k , \Pi,k , \Gj+1,k , \Pj+1,k , \Gi,j , \Pi,j , Ci);
  output \Cj+1 ,  \Gi,k ,  \Pi,k ;
  input \Gj+1,k , \Pj+1,k , \Gi,j , \Pi,j , Ci;
  wire and_2_out, or_1_out, and_0_out, and_1_out, or_0_out;
  assign and_2_out = \Pi,j  & Ci;
  assign or_1_out = and_2_out | \Gi,j ;
  assign \Cj+1  = or_1_out;
  assign and_0_out = \Pj+1,k  & \Pi,j ;
  assign \Pi,k  = and_0_out;
  assign and_1_out = \Gi,j  & \Pj+1,k ;
  assign or_0_out = \Gj+1,k  | and_1_out;
  assign \Gi,k  = or_0_out;
endmodule

module AC(\Pi,i , \Gi,i , Zi, Ci, Yi, Xi);
  output \Pi,i ,  \Gi,i ,  Zi;
  input Ci, Yi, Xi;
  wire xor_0_out, xor_1_out, or_0_out, and_0_out;
  assign xor_0_out = Xi ^ Yi;
  assign xor_1_out = xor_0_out ^ Ci;
  assign Zi = xor_1_out;
  assign or_0_out = Xi | Yi;
  assign \Pi,i  = or_0_out;
  assign and_0_out = Xi & Yi;
  assign \Gi,i  = and_0_out;
endmodule



module \ML-CLA-8_Bit (out_0, Carry_out_8, inp_0, inp_1);
  output Carry_out_8;
  output [7:0] out_0;
  input [7:0] inp_0, inp_1;
  wire AC_7_out_0, AC_7_out_1, AC_7_out_2, \B_+_C_12_out_0 , \B_+_C_12_out_1 , \B_+_C_12_out_2 , \B_+_C_13_out_0 , \B_+_C_13_out_1 , \B_+_C_13_out_2 , \B_+_C_14_out_0 , \B_+_C_14_out_1 , \B_+_C_14_out_2 , and_0_out, or_0_out, AC_4_out_0, AC_4_out_1, AC_4_out_2, \B_+_C_11_out_0 , \B_+_C_11_out_1 , \B_+_C_11_out_2 , AC_5_out_0, AC_5_out_1, AC_5_out_2, AC_6_out_0, AC_6_out_1, AC_6_out_2, AC_3_out_0, AC_3_out_1, AC_3_out_2, \B_+_C_9_out_0 , \B_+_C_9_out_1 , \B_+_C_9_out_2 , \B_+_C_10_out_0 , \B_+_C_10_out_1 , \B_+_C_10_out_2 , AC_2_out_0, AC_2_out_1, AC_2_out_2, AC_0_out_0, AC_0_out_1, AC_0_out_2, \B_+_C_8_out_0 , \B_+_C_8_out_1 , \B_+_C_8_out_2 , AC_1_out_0, AC_1_out_1, AC_1_out_2, const_0;
  wire [7:0] Splitter_0_cmb;
  
  AC AC_7(AC_7_out_0, AC_7_out_1, AC_7_out_2, \B_+_C_12_out_0 , inp_1[7], inp_0[7]);
  assign Splitter_0_cmb = {AC_7_out_2,AC_6_out_2,AC_5_out_2,AC_4_out_2,AC_3_out_2,AC_2_out_2,AC_0_out_2,AC_1_out_2};
  assign out_0 = Splitter_0_cmb;
  \B_+_C  \B_+_C_12 (\B_+_C_12_out_0 , \B_+_C_12_out_1 , \B_+_C_12_out_2 , AC_7_out_1, AC_7_out_0, AC_6_out_1, AC_6_out_0, \B_+_C_13_out_0 );
  \B_+_C  \B_+_C_13 (\B_+_C_13_out_0 , \B_+_C_13_out_1 , \B_+_C_13_out_2 , \B_+_C_12_out_1 , \B_+_C_12_out_2 , \B_+_C_11_out_1 , \B_+_C_11_out_2 , \B_+_C_14_out_0 );
  \B_+_C  \B_+_C_14 (\B_+_C_14_out_0 , \B_+_C_14_out_1 , \B_+_C_14_out_2 , \B_+_C_13_out_1 , \B_+_C_13_out_2 , \B_+_C_10_out_1 , \B_+_C_10_out_2 , const_0);
  assign and_0_out = \B_+_C_14_out_2  & const_0;
  assign or_0_out = \B_+_C_14_out_1  | and_0_out;
  assign Carry_out_8 = or_0_out;
  AC AC_4(AC_4_out_0, AC_4_out_1, AC_4_out_2, \B_+_C_14_out_0 , inp_1[4], inp_0[4]);
  \B_+_C  \B_+_C_11 (\B_+_C_11_out_0 , \B_+_C_11_out_1 , \B_+_C_11_out_2 , AC_5_out_1, AC_5_out_0, AC_4_out_1, AC_4_out_0, \B_+_C_14_out_0 );
  AC AC_5(AC_5_out_0, AC_5_out_1, AC_5_out_2, \B_+_C_11_out_0 , inp_1[5], inp_0[5]);
  AC AC_6(AC_6_out_0, AC_6_out_1, AC_6_out_2, \B_+_C_13_out_0 , inp_1[6], inp_0[6]);
  AC AC_3(AC_3_out_0, AC_3_out_1, AC_3_out_2, \B_+_C_9_out_0 , inp_1[3], inp_0[3]);
  \B_+_C  \B_+_C_9 (\B_+_C_9_out_0 , \B_+_C_9_out_1 , \B_+_C_9_out_2 , AC_3_out_1, AC_3_out_0, AC_2_out_1, AC_2_out_0, \B_+_C_10_out_0 );
  \B_+_C  \B_+_C_10 (\B_+_C_10_out_0 , \B_+_C_10_out_1 , \B_+_C_10_out_2 , \B_+_C_9_out_1 , \B_+_C_9_out_2 , \B_+_C_8_out_1 , \B_+_C_8_out_2 , const_0);
  AC AC_2(AC_2_out_0, AC_2_out_1, AC_2_out_2, \B_+_C_10_out_0 , inp_1[2], inp_0[2]);
  AC AC_0(AC_0_out_0, AC_0_out_1, AC_0_out_2, \B_+_C_8_out_0 , inp_1[1], inp_0[1]);
  \B_+_C  \B_+_C_8 (\B_+_C_8_out_0 , \B_+_C_8_out_1 , \B_+_C_8_out_2 , AC_0_out_1, AC_0_out_0, AC_1_out_1, AC_1_out_0, const_0);
  AC AC_1(AC_1_out_0, AC_1_out_1, AC_1_out_2, const_0, inp_1[0], inp_0[0]);
  
  assign const_0 = 1'b0;
endmodule

module Shifter(out_0, inp_0);
  output [8:0] out_0;
  input [8:0] inp_0;
  wire [8:0] Splitter_1_cmb;
  
  assign Splitter_1_cmb = {inp_0[8],inp_0[8],inp_0[7],inp_0[6],inp_0[5],inp_0[4],inp_0[3],inp_0[2],inp_0[1]};
  assign out_0 = Splitter_1_cmb;
endmodule

module Multiplexer4(out, in0, in1, in2, in3, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out;
  input [WIDTH-1:0] in0, in1, in2, in3;
  input [1:0] sel;
  
  always @ (*)
    case (sel)
      0 : out = in0;
      1 : out = in1;
      2 : out = in2;
      3 : out = in3;
    endcase
endmodule


module Demultiplexer4(out0, out1, out2, out3, in, sel);
  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out0, out1, out2, out3;
  input [WIDTH-1:0] in;
  input [1:0] sel;
  
  always @ (*) begin
    out0 = 0;
    out1 = 0;
    out2 = 0;
    out3 = 0;
    case (sel)
      0 : out0 = in;
      1 : out1 = in;
      2 : out2 = in;
      3 : out3 = in;
    endcase
  end
endmodule
