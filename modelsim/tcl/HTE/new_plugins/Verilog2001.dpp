[General]
languageName=Verilog2005
extensions=v|vlog
scripts=$HTE_HOME/new_plugins/Verilog2001.tcl
iconsPath=$HTE_HOME/images
version=1.1

[Syntax]
ignoreCase=No
stringStart="
stringEnd="
charStart='
charEnd='
operatorChars=-+*><=!&|~@
highlightGroups=keyWord compilerDirectives

[Style]
tabWidth=2
softTabs=Yes
autoIndent=Yes

[Comment]
singleLine=//
multiLineStart=/*
multiLineEnd=*/
psl=yes

[HLCallbacks]
and=gateInstantiation
buf=gateInstantiation
bufif0=gateInstantiation
bufif1=gateInstantiation
cmos=gateInstantiation
defparam=parameterDeclaration
function=functionCmd
inout=portDeclaration
input=portDeclaration
integer=registerDataTypeDeclaration
localparam=parameterDeclaration
macromodule=moduleCmd
module=moduleCmd
nand=gateInstantiation
nmos=gateInstantiation
nor=gateInstantiation
not=gateInstantiation
notif0=gateInstantiation
notif1=gateInstantiation
pulldown=gateInstantiation
pullup=gateInstantiation
or=gateInstantiation
output=portDeclaration
parameter=parameterDeclaration
pmos=gateInstantiation
rcmos=gateInstantiation
real=registerDataTypeDeclaration
realtime=registerDataTypeDeclaration
reg=registerDataTypeDeclaration
repeat=repeatWhile
rnmos=gateInstantiation
rpmos=gateInstantiation
rtran=gateInstantiation
rtranif0=gateInstantiation
rtranif1=gateInstantiation
supply0=netDeclaration
supply1=netDeclaration
task=taskCmd
time=registerDataTypeDeclaration
tran=gateInstantiation
tranif0=gateInstantiation
tranif1=gateInstantiation
tri=netDeclaration
triand=netDeclaration
trior=netDeclaration
trireg=netTriregDeclaration
tri0=netDeclaration
tri1=netDeclaration
wand=netDeclaration
while=repeatWhile
wire=netDeclaration
wor=netDeclaration
xnor=gateInstantiation
xor=gateInstantiation
`define=`defineDirective

[HLTags]
macroName=#000080
net=#800080
reg=#800080
parameter=#800080
port=#800080
gate=#ff0000
moduleInstanceName=#000080
moduleName=#0080c0
functionName=#0080c0
taskName=#0080c0

[TagNames]
compilerDirective="Compiler Directive"
sysTask="System Task"
macroName="Macro Name"
net="Net"
reg="Reg"
parameter="Parameter"
port="Port"
gate="Gate"
moduleInstanceName="Module Instance Name"
moduleName="Module Name"
functionName="Function Name"
taskName="Task Name"
keyWord="Keyword"
compilerDirectives="Compiler Directives"
char="Character"
comment="Comment"
operator="Operator"
string="String"

[TagHelpTips]
compilerDirective=Compiler directive (eg 'define).
sysTask=A system task.
macroName=Name of a Macro.
net=Name of a Net.
reg=Name of a Variable.
parameter=Identifier in a "trireg" statement.
port=Name of a Port.
gate=Name of a Gate.
moduleInstanceName=Name of an Instance of a Module.
moduleName=Name of a Module.
functionName=Name of a Function.
taskName=Name of a Task.
keyWord=Verilog pre-defined keywords. See also "Keywords...".
compilerDirectives=Compiler directive (eg 'define).
char=Character within single quotes.
comment=Commented line (preceded by //) or a commented paragraph (enclosed between "/*" and "*/").
operator=Any operator (colon, assignment, comparison, slash,...etc).
string=String within double quotes.
enclosedBlock=Block within parenthesis, concatenation or range. 

[ParseCallbacks]
and=gateInstantiation
buf=gateInstantiation
bufif0=gateInstantiation
bufif1=gateInstantiation
cmos=gateInstantiation
defparam=parameterDeclaration
endfunction=endBlockCmd
endmodule=endBlockCmd
endtask=endBlockCmd
function=functionCmd
inout=portDeclaration
input=portDeclaration
integer=registerDataTypeDeclaration
localparam=parameterDeclaration
macromodule=moduleCmd
module=moduleCmd
nand=gateInstantiation
nmos=gateInstantiation
nor=gateInstantiation
not=gateInstantiation
notif0=gateInstantiation
notif1=gateInstantiation
pulldown=gateInstantiation
pullup=gateInstantiation
or=gateInstantiation
output=portDeclaration
parameter=parameterDeclaration
pmos=gateInstantiation
rcmos=gateInstantiation
real=registerDataTypeDeclaration
realtime=registerDataTypeDeclaration
reg=registerDataTypeDeclaration
repeat=repeatWhile
rnmos=gateInstantiation
rpmos=gateInstantiation
rtran=gateInstantiation
rtranif0=gateInstantiation
rtranif1=gateInstantiation
specparam=specparamCmd
supply0=netDeclaration
supply1=netDeclaration
task=taskCmd
time=registerDataTypeDeclaration
tran=gateInstantiation
tranif0=gateInstantiation
tranif1=gateInstantiation
tri=netDeclaration
triand=netDeclaration
trior=netDeclaration
trireg=netTriregDeclaration
tri0=netDeclaration
tri1=netDeclaration
wand=netDeclaration
while=repeatWhile
wire=netDeclaration
wor=netDeclaration
xnor=gateInstantiation
xor=gateInstantiation
`define=`defineDirective


[keyWord]
always
and
assign
begin
buf
bufif0
bufif1
case
casex
casez
cmos
deassign
default
defparam
disable
else
end
endcase
endfunction
endmodule
endprimitive
endspecify
endtable
endtask
event
for
force
forever
fork
function
highz0
highz1
if
initial
inout
input
integer
join
large
medium
macromodule
module
nand
negedge
nmos
nor
not
notif0
notif1
pulldown
pullup
or
output
parameter
pmos
posedge
primitive
pull0
pull1
rcmos
real
realtime
reg
release
repeat
rnmos
rpmos
rtran
rtranif0
rtranif1
scalared
small
specify
specparam
strong0
strong1
supply0
supply1
table
task
time
tran
tranif0
tranif1
tri
triand
trior
trireg
tri0
tri1
vectored
wait
wand
weak0
weak1
while
wire
wor
xnor
xor
automatic
cell
config
design
edge
endconfig
endgenerate
generate
genvar
ifnone
incdir
include
instance
liblist
library
localparam
noshowcancelled
pulsestyle_onevent
pulsestyle_ondetect
showcancelled
signed
unsigned
use
uwire

[compilerDirectives]
`accelerate
`autoexpand_vectornets
`celldefine
`default_nettype
`define
`else
`elsif
`endcelldefine
`endif
`endprotect
`endprotected
`expand_vectornets
`noaccelerate
`ifdef
`ifndef
`include
`noaccelerate
`noexpand_vectornets
`noremove_netnames
`nounconnected_drive
`protect
`protected
`remove_gatenames
`remove_netnames
`resetall
`timescale
`unconnected_drive

