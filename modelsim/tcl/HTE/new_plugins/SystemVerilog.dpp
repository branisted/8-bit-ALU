[General]
languageName=SystemVerilog
extensions=v|vlog
scripts=$HTE_HOME/new_plugins/SystemVerilog.tcl
iconsPath=$HTE_HOME/images
version=1.0

[Syntax]
ignoreCase=No
stringStart="
stringEnd="
charStart='
charEnd='
operatorChars=-+*><=!&|~@
highlightGroups=keyWord moreKeyword compilerDirectives

[Style]
tabWidth=2
softTabs=Yes
autoIndent=Yes

[Comment]
singleLine=//
multiLineStart=/*
multiLineEnd=*/
psl=yes

[HLCallbacks]
`define=`defineDirective
and=gateInstantiation
bit=variableDeclaration
buf=gateInstantiation
bufif0=gateInstantiation
bufif1=gateInstantiation
byte=variableDeclaration
char=variableDeclaration
chandle=variableDeclaration
clocking=clockingCmd
cmos=gateInstantiation
defparam=parameterDeclaration
enum=enumCmd
event=variableDeclaration
function=functionCmd
inout=portDeclaration
input=portDeclaration
int=variableDeclaration
integer=variableDeclaration
interface=interfaceCmd
localparam=parameterDeclaration
logic=variableDeclaration
longint=variableDeclaration
longreal=variableDeclaration
macromodule=moduleCmd
module=moduleCmd
nand=gateInstantiation
nmos=gateInstantiation
nor=gateInstantiation
not=gateInstantiation
notif0=gateInstantiation
notif1=gateInstantiation
or=gateInstantiation
output=portDeclaration
package=packageCmd
parameter=parameterDeclaration
pmos=gateInstantiation
program=programCmd
property=propSeqCmd
pulldown=gateInstantiation
pullup=gateInstantiation
rcmos=gateInstantiation
real=variableDeclaration
realtime=variableDeclaration
reg=variableDeclaration
repeat=repeatWhile
rnmos=gateInstantiation
rpmos=gateInstantiation
rtran=gateInstantiation
rtranif0=gateInstantiation
rtranif1=gateInstantiation
sequence=propSeqCmd
shortint=variableDeclaration
shortreal=variableDeclaration
string=variableDeclaration
struct=structUnionCmd
supply0=netDeclaration
supply1=netDeclaration
task=taskCmd
time=variableDeclaration
tran=gateInstantiation
tranif0=gateInstantiation
tranif1=gateInstantiation
tri0=netDeclaration
tri1=netDeclaration
tri=netDeclaration
triand=netDeclaration
trior=netDeclaration
trireg=netTriregDeclaration
udt=variableDeclaration
union=structUnionCmd
void=variableDeclaration
wand=netDeclaration
while=repeatWhile
wire=netDeclaration
wor=netDeclaration
xnor=gateInstantiation
xor=gateInstantiation

[HLTags]
argument=#0080c0
clockingName=#aa3da0a28135
compilerDirectives=#0000c3
digit=#c000c0
enum=#c6660000c666
functionName=#759cff
gate=#ff0000
interfaceName=#ffffa5110a3d
macroName=#000080
moduleInstanceName=#000080
moduleName=#af8116e9e51e
moreKeyword=#c00000
net=#800080
operator=#0000ff
packageName=#762891
parameter=#800080
port=#800080
programName=#008080
propertyName=#759cff
sequenceName=#800080
string=#808080
structUnion=#759cff
taskName=#800080
variable=#800080

[TagNames]
argument="Argument"
char="Character"
clockingName="Clocking Identifier"
comment="Comment"
compilerDirective="Compiler Directive"
compilerDirectives="Compiler Directives"
digit="Integer"
enum="Enumerated Type Declaration"
functionName="Function Name"
gate="Gate"
interfaceName="Interface Name"
keyWord="Keyword"
macroName="Macro Name"
moduleInstanceName="Module Instance Name"
moduleName="Module Name"
moreKeyword="SystemVerilog Keyword"
net="Net"
operator="Operator"
packageName="Package Name"
parameter="Parameter"
port="Port"
programName="Program Identifier"
propertyName="Property Name"
sequenceName="Sequence Name"
string="String"
structUnion="Struct or Union"
sysTask="System Task"
taskName="Task Name"
variable="Variable Declaration"

[TagHelpTips]
argument=Argument.
char=Character within single quotes.
clockingName=Identifier of a clocking statement.
comment=Commented line (preceded by //) or a commented paragraph (enclosed between "/*" and "*/").
compilerDirective=Compiler directive (eg 'define).
compilerDirectives=Compiler directive (eg 'define).
digit=Integer not inside a string.
enclosedBlock=Block within parenthesis, concatenation or range.
enum=Enumerated type declaration
functionName=Name of a Function.
gate=Name of a Gate.
interfaceName=Name of an interface.
keyWord=Verilog 2001 pre-defined keywords. See also "Keywords...".
macroName=Name of a Macro.
moduleInstanceName=Name of an Instance of a Module.
moduleName=Name of a Module.
moreKeyword=SystemVerilog additional keywords.
net=Name of a Net.
operator=Any operator (colon, assignment, comparison, slash,...etc).
overlapMessages=Two or more reported overlapping error/note/warning messages.
packageName=Name of a package.
parameter=Identifier in a "trireg" statement.
port=Name of a Port.
programName=Name of a program.
propertyName=Name of a property.
sequenceName=Name of a sequence.
string=String within double quotes.
structUnion=Name of a struct or union.
sysTask=A system task.
taskName=Name of a Task.
variable=Name of a Variable.

[ParseCallbacks]
`define=`defineDirective
and=gateInstantiation
bit=variableDeclaration
buf=gateInstantiation
bufif0=gateInstantiation
bufif1=gateInstantiation
byte=variableDeclaration
char=variableDeclaration
chandle=variableDeclaration
cmos=gateInstantiation
defparam=parameterDeclaration
endfunction=endBlockCmd
endinterface=endBlockCmd
endmodule=endBlockCmd
endtask=endBlockCmd
enum=enumCmd
event=variableDeclaration
function=functionCmd
inout=portDeclaration
input=portDeclaration
int=variableDeclaration
integer=variableDeclaration
interface=interfaceCmd
localparam=parameterDeclaration
logic=variableDeclaration
longint=variableDeclaration
longreal=variableDeclaration
macromodule=moduleCmd
module=moduleCmd
nand=gateInstantiation
nmos=gateInstantiation
nor=gateInstantiation
not=gateInstantiation
notif0=gateInstantiation
notif1=gateInstantiation
or=gateInstantiation
output=portDeclaration
parameter=parameterDeclaration
pmos=gateInstantiation
pulldown=gateInstantiation
pullup=gateInstantiation
rcmos=gateInstantiation
real=variableDeclaration
realtime=variableDeclaration
reg=variableDeclaration
repeat=repeatWhile
rnmos=gateInstantiation
rpmos=gateInstantiation
rtran=gateInstantiation
rtranif0=gateInstantiation
rtranif1=gateInstantiation
shortint=variableDeclaration
shortreal=variableDeclaration
specparam=specparamCmd
string=variableDeclaration
struct=structUnionCmd
supply0=netDeclaration
supply1=netDeclaration
task=taskCmd
time=variableDeclaration
tran=gateInstantiation
tranif0=gateInstantiation
tranif1=gateInstantiation
tri0=netDeclaration
tri1=netDeclaration
tri=netDeclaration
triand=netDeclaration
trior=netDeclaration
trireg=netTriregDeclaration
udt=variableDeclaration
union=structUnionCmd
void=variableDeclaration
wand=netDeclaration
while=repeatWhile
wire=netDeclaration
wor=netDeclaration
xnor=gateInstantiation
xor=gateInstantiation

[moreKeyword]
alias
always_comb
always_ff
always_latch
assert
assume
before
bind
bins
binsof
bit
break
byte
chandle
class
clocking
const
constraint
context
continue
cover
covergroup
coverpoint
cross
dist
do
endclass
endclocking
endgroup
endinterface
endpackage
endprogram
endproperty
endsequence
enum
expect
export
extends
extern
final
first_match
foreach
forkjoin
iff
ignore_bins
illegal_bins
import
inside
int
interface
intersect
join_any
join_none
local
logic
longint
matches
modport
new
null
package
packed
priority
program
property
protected
pure
rand
randc
randcase
randsequence
ref
return
sequence
shortint
shortreal
solve
static
string
struct
super
tagged
this
throughout
timeprecision
timeunit
type
typedef
udt
union
unique
var
virtual
void
wait_order
wildcard
with
within

[keyWord]
always
and
assign
automatic
begin
buf
bufif0
bufif1
case
casex
casez
cell
cmos
config
deassign
default
defparam
design
disable
edge
else
end
endcase
endconfig
endfunction
endgenerate
endmodule
endprimitive
endspecify
endtable
endtask
event
for
force
forever
fork
function
generate
genvar
highz0
highz1
if
ifnone
incdir
include
initial
inout
input
instance
integer
join
large
liblist
library
localparam
macromodule
medium
module
nand
negedge
nmos
nor
noshowcancelled
not
notif0
notif1
or
output
parameter
pmos
posedge
primitive
pull0
pull1
pulldown
pullup
pulsestyle_ondetect
pulsestyle_onevent
rcmos
real
realtime
reg
release
repeat
rnmos
rpmos
rtran
rtranif0
rtranif1
scalared
showcancelled
signed
small
specify
specparam
strong0
strong1
supply0
supply1
table
task
time
tran
tranif0
tranif1
tri
tri0
tri1
triand
trior
trireg
unsigned
use
vectored
wait
wand
weak0
weak1
while
wire
wor
xnor
xor

[compilerDirectives]
`accelerate
`autoexpand_vectornets
`celldefine
`default_nettype
`define
`else
`elsif
`endcelldefine
`endif
`endprotect
`endprotected
`expand_vectornets
`noaccelerate
`ifdef
`ifndef
`include
`noaccelerate
`noexpand_vectornets
`noremove_netnames
`nounconnected_drive
`protect
`protected
`remove_gatenames
`remove_netnames
`resetall
`timescale
`unconnected_drive
