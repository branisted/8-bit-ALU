[General]
languageName=VHDL'87
extensions=vhdl|vhd
scripts=$HTE_HOME/new_plugins/VHDL87.tcl
iconsPath=$HTE_HOME/images
version=1.1

[Syntax]
ignoreCase=Yes
stringStart="
stringEnd="
charStart='
charEnd='
operatorChars=:=<>+&*/
highlightGroups=keyWord

[Style]
tabWidth=2
softTabs=Yes
autoIndent=Yes

[Comment]
singleLine=--
psl=yes

[HLCallbacks]
constant=constantCmd
generic=genericCmd
port=portCmd
signal=signalCmd
subtype=subtypeCmd
type=typeCmd
variable=variableCmd
function=functionCmd

[HLTags]
generic=#0000c3
typeName=#008080
port=#800080
mode=#0000c3
aIdentifier=#800000
rfIdentifier=#c000c0
eLiteral=#800080
constant=#800080
variable=#800080
signal=#800080
comment=#008000
integer=#008080
label=#0000c3
parentheses_fore=#0000ff

[TagNames]
generic="Generic"
typeName="Type Name"
port="Port"
mode="Mode"
aIdentifier="Identifier-Assn List"
rfIdentifier="Identifier-Record"
eLiteral="Enum Literal"
constant="Constant"
variable="Variable"
signal="Signal"
range="Range"
parentheses="Old Parentheses"
statement="Statement"
comment="Comment"
integer="Integer"
label="Label"
parentheses_fore="Parentheses"
keyWord="Keyword"
char="Character"
comment="Comment"
operator="Operator"
string="String"

[TagHelpTips]
generic=Name of a Generic.
typeName=Name of a Type.
port=Name of a Port.
mode=Mode of a Port.
aIdentifier=Identifier in an association list.
rfIdentifier=Identifier inside a record.
eLiteral=Identifiers/literals of an enumeration type.
constant=Name of a Constant.
variable=Name of a Variable.
signal=Name of a Signal.
range=A range.
parentheses=Old Parentheses.
statement=A statement.
comment=Commented line (preceded by --).
integer=Integer not inside a string.
label=Name of a Label.
parentheses_fore=Parentheses ().
keyWord=VHDL pre-defined keywords. See also "Keywords...".
char=Character within single quotes.
operator=Any operator (colon, assignment, comparison, slash,...etc).
string=String within double quotes.
enclosedBlock=Block within parenthesis, signature or range. 

[ParseCallbacks]
architecture=architectureBodyCmd
begin=beginCmd
component=componentDeclarationCmd
configuration=configurationDeclarationCmd
constant=constantCmd
end=endCmd
entity=entityDeclarationCmd
function=functionCmd
generic=genericCmd
package=packageDeclarationBodyCmd
port=portCmd
procedure=procedureCmd
process=processStatementCmd
signal=signalCmd
subtype=subtypeCmd
type=typeCmd
variable=variableCmd

[keyWord]
abs
access
after
alias
all
and
architecture
array
assert
attribute
begin
block
body
buffer
bus
case
component
configuration
constant
disconnect
downto
else
elsif
end
entity
exit
file
for
function
generate
generic
guarded
if
in
inout
is
label
library
linkage
loop
map
mod
nand
new
next
nor
not
null
of
on
open
or
others
out
package
port
procedure
process
range
record
register
rem
report
return
select
severity
signal
subtype
then
to
transport
type
units
until
use
variable
wait
when
while
with
xor
