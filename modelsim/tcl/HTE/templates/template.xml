<?xml version="1.0"?>
<!--
	Definitions of Template Objects and associated key fields:

	<Container>...</Container>
		a hierarchical element containing subelements, which can be one or more of:
                      <Container>, <Template>, <Tcl>, or <TclRef>
	<Template>text</Template>
		inserts text at current insert point in text widget.
	<Tcl>func</Tcl>
		calls a tcl function specified by func.
	<TclRef></TclRef>
		points to another template (so its not necessary to duplicate templates so they appear
		in different containers).
		usage: <TclRef name="name" ref="path/to/referenced/template">

	&lt;%field%&gt;
		defines an editable field to be inserted in text widget.
		If user clicks on this field, an in-place entry box appears in the text widget
		and the user enters a value. When complete, all fields in the text widget with
		the same name get replaced by the inputted value.
	[@template@]
		defines a field placed in the text widget that, when clicked on, either expands
		a <Template> text value in place, or pops up a list of items if template refers to
		a <Container>.  If template refers to a <tcl> object, that tcl function is called.
	[%template%]
		same as [@template@], except that it keeps a copy of itself in the text widget after
		it gets expanded, so multiple instances of template can be created at its place
		in the text widget.

	Optional fields for template objects:
		hide
			if this attribute exists, the template is hidden from the list of displayed
			templates in the template list of the source window.
		icon
			specifies the icon name to draw next to the template name in the list of
			templates in the source window.

	CAUTION: Implementation constraint:
		In order for the templates to work properly with DesignPad (where we want the top level 
		"Language Constructs" tree widget to be automatically opened but hidden, so that only 
		the next level constructs are visible) I (Mick Gilford) have had to reorganize things 
		in the "Verilog" and "Verilog 2001" sections. 

		Essentially, all of the definitions in "Language Constructs" have been moved to 
		"Subtemplates" and replaced by TclRefs. In order for the templates to be visible in the 
		DesignPad tree widget, the Containers in "Subtemplates" must only contain other 
		Containers or TclRefs, they must NOT contain Templates directly. (If they contain 
		Templates directly, the templates are hidden, because "Subtemplates" has the "hide" 
		attribute.)

-->
<Container>


	<!-- ### Verilog '95 ### -->

	<Container name="Verilog 95">
		<Tcl name="New Design Wizard" icon="newdsn_image">::HTE::Editor::srcWizard::OpenNewDesignWizard</Tcl>
		<Tcl name="Create Testbench" icon="newdsn_image">::HTE::Editor::srcWizard::CreateTestbenchWizard</Tcl>
		<Container name="Language Constructs" icon="template_image">
			<TclRef name="Module" icon="module_image" ref="Verilog 95/Subtemplates/Module"/>
			<TclRef name="Primitive" icon="udp_image" ref="Verilog 95/Subtemplates/Primitive"/>
			<TclRef name="Declarations" icon="declaration_image" ref="Verilog 95/Subtemplates/Declarations"/>
			<TclRef name="Statements" icon="statement_image" ref="Verilog 95/Subtemplates/Statements"/>
			<TclRef name="Instantiations" icon="Instance" ref="Verilog 95/Subtemplates/Instantiations"/>
			<TclRef name="Compiler Directives" ref="Verilog 95/Subtemplates/Compiler Directives"/>
			<TclRef name="Blocks" icon="blocks_image" ref="Verilog 95/Subtemplates/Blocks"/>
			<TclRef name="System Tasks and Functions" icon="statement_image" ref="Verilog 95/Subtemplates/System Tasks and Functions"/>
		</Container>
<!--  ##### Temporarily comment out logic blocks until we have some :).
		<Container name="Logic Blocks" icon="blocks_image">
			<Tcl name="Add Counter">::HTE::Editor::srcWizard::OpenCountWizard</Tcl>
		</Container>
-->
		<Container name="Stimulus Generators" icon="stimulus_image">
			<!--  ##### Temporarily comment out bus cycle wizard
			<Tcl name="Bus Cycle" icon="bus_cycle_image">add_bus_cycle</Tcl>
-->
			<Tcl name="Clock" icon="clock_image">::HTE::Editor::srcWizard::OpenClockWizard</Tcl>
			<Tcl name="Counter" icon="count_image">::HTE::Editor::srcWizard::OpenCountWizard</Tcl>
			<!--  ##### Temporarily comment out pseudo random wizard
			<Tcl name="Pseudo Random" icon="random_image">::HTE::Editor::srcWizard::OpenRandomWizard</Tcl>
-->
			<Tcl name="Stop Simulation" icon="stop_image">::HTE::Editor::srcWizard::OpenStopWizard</Tcl>
		</Container>

		<Container name="Subtemplates" hide="1">
			<Template name="Module" icon="module_image" hide="0"> module
				&lt;%module_name%&gt; [@list_of_ports@]; [%module_item%] endmodule </Template>
			<Template name="Primitive" icon="udp_image" hide="0"> primitive
				&lt;%primitive_name%&gt; [@list_of_ports@]; [%Port_Declaration%]
				[@udp_body@] endprimitive </Template>

			<Container name="Declarations">
				<TclRef name="Parameter" icon="VerilogParameterDecl" ref="Verilog 95/Subtemplates/Parameter"/>
				<Container name="Port Declaration" icon="declaration_image">
					<TclRef name="Input Declaration" icon="PortIn" ref="Verilog 95/Subtemplates/Input Declaration"/>
					<TclRef name="Output Declaration" icon="PortOut" ref="Verilog 95/Subtemplates/Output Declaration"/>
					<TclRef name="Inout Declaration" icon="PortIO" ref="Verilog 95/Subtemplates/Inout Declaration"/>
				</Container>
				<TclRef name="Net Declaration" icon="declaration_image" ref="Verilog 95/Subtemplates/Net Declaration"/>
				<TclRef name="Reg Declaration" icon="declaration_image" ref="Verilog 95/Subtemplates/Reg Declaration"/>
				<TclRef name="Integer Declaration" icon="declaration_image" ref="Verilog 95/Subtemplates/Integer Declaration"/>
				<TclRef name="Real Declaration" icon="declaration_image" ref="Verilog 95/Subtemplates/Real Declaration"/>
				<TclRef name="Time Declaration" icon="declaration_image" ref="Verilog 95/Subtemplates/Time Declaration"/>
				<TclRef name="Realtime Declaration" icon="declaration_image" ref="Verilog 95/Subtemplates/Realtime Declaration"/>
				<TclRef name="Event Declaration" icon="declaration_image" ref="Verilog 95/Subtemplates/Event Declaration"/>
				<TclRef name="Task Declaration" icon="declaration_image" ref="Verilog 95/Subtemplates/Task Declaration"/>
				<TclRef name="Function Declaration" icon="declaration_image" ref="Verilog 95/Subtemplates/Function Declaration"/>
			</Container>
			<Template name="Parameter" hide="0">parameter &lt;%param_name%&gt; = &lt;%value%&gt; [@another_param@];
</Template>
			<Template name="Input Declaration" hide="0">input [@range@] &lt;%input_name%&gt;;
</Template>
			<Template name="Output Declaration" hide="0">output [@range@] &lt;%output_name%&gt;;
</Template>
			<Template name="Inout Declaration" hide="0">inout [@range@] &lt;%inout_name%&gt;;
</Template>
			<Template name="Net Declaration">[@net_type@] [@range@] &lt;%net_name%&gt; [@another_net@];
</Template>
			<Template name="Reg Declaration" hide="0">reg [@range@] &lt;%reg_name%&gt; [@another_reg@];
</Template>
			<Template name="Integer Declaration" hide="0">integer &lt;%integer_name%&gt; [@another_integer@];
</Template>
			<Template name="Real Declaration" hide="0">real &lt;%real_name%&gt; [@another_real@];
</Template>
			<Template name="Time Declaration" hide="0">time  &lt;%time_name%&gt; [@another_time@];
</Template>
			<Template name="Realtime Declaration" hide="0">realtime &lt;%realtime_name%&gt; [@another_realtime@];
</Template>
			<Template name="Event Declaration" hide="0">event &lt;%event_name%&gt; [@another_event@];
</Template>
			<Template name="Task Declaration" hide="0">
task &lt;%task_name%&gt;;
	[%task_item_declaration%]
	[%statement%]
endtask
</Template>
			<Template name="Function Declaration" hide="0">
function [@range_or_type@] &lt;%function_name%&gt;;
	[%function_item_declaration%]
	[%statement%]
	&lt;%function_name%&gt; = &lt;%expression%&gt;;
endfunction
</Template>
				
			<Container name="Statements">
				<TclRef name="Begin-End Block" icon="statement_image" ref="Verilog 95/Subtemplates/Begin-End Block"/>
				<Container name="Assignment Statement" icon="statement_image">
					<TclRef name="Blocking Assignment" icon="statement_image" ref="Verilog 95/Subtemplates/Blocking Assignment"/>
					<TclRef name="Non-Blocking Assignment" icon="statement_image" ref="Verilog 95/Subtemplates/Non-Blocking Assignment"/>
					<Container name="Procedural Continuous Statement" icon="statement_image">
						<TclRef name="assign" icon="statement_image" ref="Verilog 95/Subtemplates/assign"/>
						<TclRef name="deassign" icon="statement_image" ref="Verilog 95/Subtemplates/deassign"/>
						<TclRef name="force" icon="statement_image" ref="Verilog 95/Subtemplates/force"/>
						<TclRef name="release" icon="statement_image" ref="Verilog 95/Subtemplates/release"/>
					</Container>
				</Container>
				<TclRef name="For Loop" icon="statement_image" ref="Verilog 95/Subtemplates/For Loop"/>
				<TclRef name="While Loop" icon="statement_image" ref="Verilog 95/Subtemplates/While Loop"/>
				<TclRef name="Repeat" icon="statement_image" ref="Verilog 95/Subtemplates/Repeat"/>
				<TclRef name="Forever" icon="statement_image" ref="Verilog 95/Subtemplates/Forever"/>
				<TclRef name="If" icon="statement_image" ref="Verilog 95/Subtemplates/If"/>
				<TclRef name="Else" icon="statement_image" ref="Verilog 95/Subtemplates/else"/>
				<TclRef name="Case" icon="statement_image" ref="Verilog 95/Subtemplates/Case"/>
				<TclRef name="Fork-Join Block" icon="statement_image" ref="Verilog 95/Subtemplates/Fork-Join Block"/>
				<TclRef name="Named Begin-End Block" icon="statement_image" ref="Verilog 95/Subtemplates/Named Begin-End Block"/>
				<TclRef name="Named Fork-Join Block" icon="statement_image" ref="Verilog 95/Subtemplates/Named Fork-Join Block"/>
			</Container>
			<Template name="Begin-End Block" hide="0">begin
	[%statement%]
end
</Template>
			<Template name="Blocking Assignment">&lt;%reg_var%&gt; = [@delay_or_event_control@] &lt;%expression%&gt; ;
</Template>
			<Template name="Non-Blocking Assignment">&lt;%reg_var%&gt; &lt;= [@delay_or_event_control@] &lt;%expression%&gt; ;
</Template>
			<Template name="assign" hide="0">assign &lt;%reg_var%&gt; = &lt;%expression%&gt; ;
</Template>
			<Template name="deassign" hide="0">deassign &lt;%reg_var%&gt;;
</Template>
			<Template name="force" hide="0">force &lt;%reg_var%&gt; = &lt;%expression%&gt; ;
</Template>
			<Template name="release" hide="0">release &lt;%reg_var%&gt;;
</Template>
			<Template name="For Loop" hide="0">for ( &lt;%var%&gt; = &lt;%expr1%&gt; ; &lt;%expr2%&gt; ; &lt;%var%&gt; = &lt;%expr3%&gt; ) [@statement@]
</Template>
			<Template name="While Loop" hide="0">while (&lt;%condition%&gt;) [@statement@]
</Template>
			<Template name="Repeat" hide="0">repeat (&lt;%count%&gt;) [@statement@]
</Template>
			<Template name="Forever" hide="0">forever [@statement@]
</Template>
			<Template name="If" hide="0">if ( &lt;%condition%&gt; ) [@statement@] 
[@else@]
</Template>
			<Template name="Case">[@case_type@] ( &lt;%expression%&gt; )
	[%another_case%]
	[@default_case@]
endcase
</Template>
			<Template name="Fork-Join Block" hide="0">fork
	[%statement%]
join
</Template>
			<Template name="Named Begin-End Block" hide="0">begin: &lt;%blockname%&gt;
	[%block_item_declaration%]
	[%statement%]
end
</Template>
			<Template name="Named Fork-Join Block" hide="0">fork: &lt;%blockname%&gt;
	[%block_item_declaration%]
	[%statement%]
join
</Template>

			<Container name="Instantiations">
				<TclRef name="Module" icon="VerilogModule" ref="Verilog 95/Subtemplates/module_instantiation"/>
				<TclRef name="Gate" icon="Instance" ref="Verilog 95/Subtemplates/gate_instantiation"/>
			</Container>
			<Template name="module_instantiation">&lt;%module_name%&gt;
				[@parameter_value_assignment@] [@module_instance@]; </Template>
			<Container name="gate_instantiation">
				<TclRef name="n_input_gate" icon="Instance" ref="Verilog 95/Subtemplates/n_input_gate"/>
				<TclRef name="n_output_gate" icon="Instance" ref="Verilog 95/Subtemplates/n_output_gate"/>
				<TclRef name="enable_gate" icon="Instance" ref="Verilog 95/Subtemplates/enable_gate"/>
				<TclRef name="pullup" icon="Instance" ref="Verilog 95/Subtemplates/pullup"/>
				<TclRef name="pulldown" icon="Instance" ref="Verilog 95/Subtemplates/pulldown"/>
				<TclRef name="mos_switch" icon="Instance" ref="Verilog 95/Subtemplates/mos_switch"/>
				<TclRef name="cmos_switch" icon="Instance" ref="Verilog 95/Subtemplates/cmos_switch"/>
				<TclRef name="pass_switch" icon="Instance" ref="Verilog 95/Subtemplates/pass_switch"/>
				<TclRef name="pass_enable_switch" icon="Instance" ref="Verilog 95/Subtemplates/pass_enable_switch"/>
			</Container>
			<Template name="n_input_gate">[@n_input_gate_type@] [@drive_strength@] [@delay@]
				&lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;,
				&lt;%input%&gt; [@another_input@]); </Template>
			<Template name="n_output_gate">[@n_output_gate_type@] [@drive_strength@] [@delay@]
				&lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;
				[@another_output@], &lt;%input%&gt;); </Template>
			<Template name="enable_gate">[@enable_gate_type@] [@drive_strength@] [@delay@]
				&lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;,
				&lt;%input%&gt;, &lt;%enable%&gt;); </Template>
			<Template name="pullup" hide="0">pullup [@pullup_strength@]
				&lt;%instance_name%&gt; [@delay@] (&lt;%output%&gt;); </Template>
			<Template name="pulldown" hide="0">pulldown [@pulldown_strength@]
				&lt;%instance_name%&gt; [@delay@] (&lt;%output%&gt;); </Template>
			<Template name="mos_switch">[@mos_switch_type@] [@delay@]
				&lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;,
				&lt;%input%&gt;, &lt;%enable%&gt;); </Template>
			<Template name="cmos_switch">[@cmos_switch_type@] [@delay@]
				&lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;,
				&lt;%input%&gt;, &lt;%ncontrol%&gt;, &lt;%pcontrol%&gt;); </Template>
			<Template name="pass_switch">[@pass_switch_type@] [@delay@]
				&lt;%instance_name%&gt; [@range@] (&lt;%inout%&gt;,
				&lt;%inout%&gt;); </Template>
			<Template name="pass_enable_switch">[@pass_enable_switch_type@] [@delay@]
				&lt;%instance_name%&gt; [@range@] (&lt;%inout%&gt;,
				&lt;%inout%&gt;, &lt;%enable%&gt;); </Template>

			<Container name="Compiler Directives">
				<TclRef name="`define" ref="Verilog 95/Subtemplates/`define"/>
				<TclRef name="`ifdef" ref="Verilog 95/Subtemplates/`ifdef"/>
				<TclRef name="`include" ref="Verilog 95/Subtemplates/`include"/>
				<TclRef name="`timescale" ref="Verilog 95/Subtemplates/`timescale"/>
				<TclRef name="`celldefine" ref="Verilog 95/Subtemplates/`celldefine"/>
			</Container>
			<Template name="`define">`define &lt;%def_name%&gt; &lt;%value%&gt; </Template>
			<Template name="`ifdef">`ifdef &lt;%def_name%&gt; [%construct%] [@tick_else@]
				`endif </Template>
			<Template name="`include">`include &quot;&lt;%filename%&gt;&quot; </Template>
			<Template name="`timescale">`timescale [@time_units@] / [@precision@] </Template>
			<Template name="`celldefine"> `celldefine module &lt;%module_name%&gt;
				[@list_of_ports@]; [%module_item%] endmodule `endcelldefine </Template>
			<Container name="Blocks">
				<TclRef name="Always" icon="VerilogAlways" ref="Verilog 95/Subtemplates/Always"/>
				<TclRef name="Initial" icon="VerilogInitial" ref="Verilog 95/Subtemplates/Initial"/>
			</Container>
			<Template name="Always" hide="0">always [@event_control@] [@statement@] </Template>
			<Template name="Initial" hide="0">initial [@statement@] </Template>

			<Container name="System Tasks and Functions">
				<Container name="Display and I/O Tasks" icon="VerilogTask">
					<TclRef name="File Open" icon="VerilogTask" ref="Verilog 95/Subtemplates/File Open"/>
					<TclRef name="File Close" icon="VerilogTask" ref="Verilog 95/Subtemplates/File Close"/>
					<TclRef name="$display" icon="VerilogTask" ref="Verilog 95/Subtemplates/$display"/>
					<TclRef name="$write" icon="VerilogTask" ref="Verilog 95/Subtemplates/$write"/>
					<TclRef name="$monitor" icon="VerilogTask" ref="Verilog 95/Subtemplates/$monitor"/>
					<TclRef name="$strobe" icon="VerilogTask" ref="Verilog 95/Subtemplates/$strobe"/>
					<TclRef name="Enable Monitors" icon="VerilogTask" ref="Verilog 95/Subtemplates/Enable Monitors"/>
					<TclRef name="Disable Monitors" icon="VerilogTask" ref="Verilog 95/Subtemplates/Disable Monitors"/>
					<Container name="Read Memory from File" icon="VerilogTask">
						<TclRef name="binary" icon="VerilogTask" ref="Verilog 95/Subtemplates/rmf_binary"/>
						<TclRef name="hex" icon="VerilogTask" ref="Verilog 95/Subtemplates/rmf_hex"/>
					</Container>
				</Container>
				<Container name="Timing Check Tasks" icon="VerilogTask">
					<TclRef name="$setup" icon="VerilogTask" ref="Verilog 95/Subtemplates/$setup"/>
					<TclRef name="$hold" icon="VerilogTask" ref="Verilog 95/Subtemplates/$hold"/>
					<TclRef name="$setuphold" icon="VerilogTask" ref="Verilog 95/Subtemplates/$setuphold"/>
					<TclRef name="$width" icon="VerilogTask" ref="Verilog 95/Subtemplates/$width"/>
					<TclRef name="$period" icon="VerilogTask" ref="Verilog 95/Subtemplates/$period"/>
					<TclRef name="$skew" icon="VerilogTask" ref="Verilog 95/Subtemplates/$skew"/>
					<TclRef name="$recovery" icon="VerilogTask" ref="Verilog 95/Subtemplates/$recovery"/>
					<TclRef name="$nochange" icon="VerilogTask" ref="Verilog 95/Subtemplates/$nochange"/>
				</Container>
				<Container name="Simulation Control" icon="VerilogTask">
					<TclRef name="Finish Simulation (and exit)" icon="VerilogTask" ref="Verilog 95/Subtemplates/Finish Simulation"/>
					<TclRef name="Stop Simulation" icon="VerilogTask" ref="Verilog 95/Subtemplates/Stop Simulation"/>
				</Container>
				<Container name="Simulation Time Functions" icon="VerilogFunction">
					<TclRef name="Print TimeScale" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Print TimeScale"/>
					<TclRef name="Format Time" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Format Time"/>
					<TclRef name="Get Time as Real Number" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Get Time as Real Number"/>
					<TclRef name="Get Time as 64-bit Integer" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Get Time as 64-bit Integer"/>
					<TclRef name="Get Time as 32-bit Integer" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Get Time as 32-bit Integer"/>
				</Container>
				<Container name="Conversion Functions for Reals" icon="VerilogFunction">
					<TclRef name="Real to Integer" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Real to Integer"/>
					<TclRef name="Integer to Real" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Integer to Real"/>
					<TclRef name="Real to Bits" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Real to Bits"/>
					<TclRef name="Bits to Real" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Bits to Real"/>
				</Container>
				<Container name="Probabilistic Distribution Functions" icon="VerilogFunction">
					<TclRef name="Random" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Random"/>
					<TclRef name="Uniform" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Uniform"/>
					<TclRef name="Normal" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Normal"/>
					<TclRef name="Exponential" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Exponential"/>
					<TclRef name="Poisson" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Poisson"/>
					<TclRef name="Chi Square" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Chi Square"/>
					<TclRef name="T" icon="VerilogFunction" ref="Verilog 95/Subtemplates/T"/>
					<TclRef name="Erlang" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Erlang"/>
				</Container>
				<Container name="Stochastic Analysis Functions" icon="VerilogFunction">
					<TclRef name="Q Initialize" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Q Initialize"/>
					<TclRef name="Q Add" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Q Add"/>
					<TclRef name="Q Remove" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Q Remove"/>
					<TclRef name="Q Full" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Q Full"/>
					<TclRef name="Q Exam" icon="VerilogFunction" ref="Verilog 95/Subtemplates/Q Exam"/>
				</Container>
				<TclRef name="PLA Modeling Tasks" icon="VerilogTask" ref="Verilog 95/Subtemplates/PLA Modeling Tasks"/>
			</Container>
			<Template name="File Open">$fopen(&quot;&lt;%file_name%&gt;&quot;); </Template>
			<Template name="File Close">$fclose(&lt;%file_descriptor%&gt;); </Template>
			<Template name="$display">[@display_type@]; </Template>
			<Template name="$write">[@write_type@]; </Template>
			<Template name="$monitor">[@monitor_type@]; </Template>
			<Template name="$strobe">[@strobe_type@]; </Template>
			<Template name="Enable Monitors">$monitoron(); </Template>
			<Template name="Disable Monitors">$monitoroff(); </Template>
			<Template name="rmf_binary">$readmemb(&quot;&lt;%file_name%&gt;&quot;,
				&lt;%memory_name%&gt; [@start_addr@] [@finish_addr@]); </Template>
			<Template name="rmf_hex">$readmemh(&quot;&lt;%file_name%&gt;&quot;,
				&lt;%memory_name%&gt; [@start_addr@] [@finish_addr@]); </Template>
			<Template name="$setup">$setup([@data_event@], [@reference_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$hold">$hold([@reference_event@], [@data_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$setuphold">$setuphold([@reference_event@], [@data_event@],
				&lt;%setup_limit%&gt;, &lt;%hold_limit%&gt; [@notifier@]); </Template>
			<Template name="$width">$width([@reference_event@], &lt;%limit%&gt;
				[@threshold@] [@notifier@]); </Template>
			<Template name="$period">$period([@reference_event@], &lt;%limit%&gt;
				[@notifier@]); </Template>
			<Template name="$skew">$skew([@reference_event@], [@data_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$recovery">$recovery([@reference_event@], [@data_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$nochange">$nochange([@reference_event@], [@data_event@],
				&lt;%start_edge_offset%&gt;, &lt;%end_edge_offset%&gt;
				[@notifier@]); </Template>
			<Template name="Finish Simulation">$finish [@diagnostic_message@]; </Template>
			<Template name="Stop Simulation">$stop [@diagnostic_message@]; </Template>
			<Template name="Print TimeScale">$printtimescale(&lt;%hierarchical_name%&gt;); </Template>
			<Template name="Format Time">$timeformat[@time_format_args@]; </Template>
			<Template name="Get Time as Real Number">$realtime;</Template>
			<Template name="Get Time as 64-bit Integer">$time;</Template>
			<Template name="Get Time as 32-bit Integer">$stime;</Template>
			<Template name="Real to Integer">$rtoi(&lt;%real_val%&gt;);</Template>
			<Template name="Integer to Real">$itor(&lt;%int_val%&gt;);</Template>
			<Template name="Real to Bits">$realtobits(&lt;%real_val%&gt;);</Template>
			<Template name="Bits to Real">$bitstoreal(&lt;%bit_val%&gt;);</Template>
			<Template name="Random">$random [@seed_arg@];</Template>
			<Template name="Uniform">$dist_uniform(&lt;%seed%&gt;, &lt;%start%&gt;,
				&lt;%end%&gt;);</Template>
			<Template name="Normal">$dist_normal(&lt;%seed%&gt;, &lt;%mean%&gt;,
				&lt;%std_deviation%&gt;);</Template>
			<Template name="Exponential">$dist_exponential(&lt;%seed%&gt;,
				&lt;%mean%&gt;);</Template>
			<Template name="Poisson">$dist_poisson(&lt;%seed%&gt;, &lt;%mean%&gt;);</Template>
			<Template name="Chi Square">$dist_chi_square(&lt;%seed%&gt;,
				&lt;%degree_of_freedom%&gt;);</Template>
			<Template name="T">$dist_t(&lt;%seed%&gt;, &lt;%degree_of_freedom%&gt;);</Template>
			<Template name="Erlang">$dist_erlang(&lt;%seed%&gt;, &lt;%k_stage%&gt;,
				&lt;%mean%&gt;);</Template>
			<Template name="Q Initialize">$q_initialize(&lt;%q_id%&gt;, [@q_type@],
				&lt;%max_length%&gt;, &lt;%q_status%&gt;);</Template>
			<Template name="Q Add">$q_add(&lt;%q_id%&gt;, &lt;%job_id%&gt;,
				&lt;%uniform_id%&gt;, &lt;%q_status%&gt;);</Template>
			<Template name="Q Remove">$q_remove(&lt;%q_id%&gt;, &lt;%job_id%&gt;,
				&lt;%uniform_id%&gt;, &lt;%q_status%&gt;);</Template>
			<Template name="Q Full">$q_full(&lt;%q_id%&gt; &lt;%q_status%&gt;);</Template>
			<Template name="Q Exam">$q_exam(&lt;%q_id%&gt;, [@q_stat_code@],
				&lt;%q_stat_value%&gt;, &lt;%q_status%&gt;);</Template>
			<Template name="PLA Modeling Tasks"
				>$[@array_type@]$[@logic@]$[@format@](&lt;%memory_name%&gt;,
				&lt;%input_terms%&gt;, &lt;%output_terms%&gt;);</Template>

			<Container name="construct">
				<TclRef name="module" ref="Verilog 95/Subtemplates/Module"> </TclRef>
				<TclRef name="primitive" ref="Verilog 95/Subtemplates/Primitive"> </TclRef>
				<TclRef name="declaration" ref="Verilog 95/Subtemplates/Declarations"> </TclRef>
				<TclRef name="statement" ref="Verilog 95/Subtemplates/Statements"> </TclRef>
				<TclRef name="instantiation" ref="Verilog 95/Subtemplates/Instantiations"> </TclRef>
				<TclRef name="compiler directive" ref="Verilog 95/Subtemplates/Compiler Directives"> </TclRef>
				<TclRef name="block" ref="Verilog 95/Subtemplates/Blocks"> </TclRef>
			</Container>
			<TclRef name="statement" ref="Verilog 95/Subtemplates/Statements"> </TclRef>

			<Template name="time_format_args">([@unit_number@], [@precision_number@],
				&lt;%suffix_string%&gt;, &lt;%min_field_width%&gt;)</Template>
			<Container name="unit_number">
				<Template name="1 s">0</Template>
				<Template name="100 ms">-1</Template>
				<Template name="10 ms">-2</Template>
				<Template name="1 ms">-3</Template>
				<Template name="100 us">-4</Template>
				<Template name="10 us">-5</Template>
				<Template name="1 us">-6</Template>
				<Template name="100 ns">-7</Template>
				<Template name="10 ns">-8</Template>
				<Template name="1 ns">-9</Template>
				<Template name="100 ps">-10</Template>
				<Template name="10 ps">-11</Template>
				<Template name="1 ps">-12</Template>
				<Template name="100 fs">-13</Template>
				<Template name="10 fs">-14</Template>
				<Template name="1 fs">-15</Template>
			</Container>
			<TclRef name="precision_number" ref="Verilog 95/Subtemplates/unit_number"/>
			<Container name="q_type">
				<Template name="First-In,First-Out">1</Template>
				<Template name="Last-In,First-Out">2</Template>
			</Container>
			<Container name="q_stat_code">
				<Template name="Get Current Queue Length">1</Template>
				<Template name="Get Mean Interarrival Time">2</Template>
				<Template name="Get Maximum Queue Length">3</Template>
				<Template name="Get Shortest Wait Time Ever">4</Template>
				<Template name="Get Longest Wait Time for Jobs Still In the Queue">5</Template>
				<Template name="Get Average Wait Time in Queue">6</Template>
			</Container>
			<Template name="seed_arg">(&lt;%seed%&gt;)</Template>
			<Template name="parameter_value_assignment">#( &lt;%expression%&gt;
				[%parameter_assignment%] )</Template>
			<Template name="parameter_assignment">, &lt;%expression%&gt; </Template>
			<Template name="another_input">, &lt;%input%&gt; [@another_input@]</Template>
			<Template name="another_output">, &lt;%output%&gt; [@another_output@]</Template>
			<Container name="n_input_gate_type">
				<Template name="and">and</Template>
				<Template name="nand">nand</Template>
				<Template name="nor">nor</Template>
				<Template name="or">or</Template>
				<Template name="xnor">xnor</Template>
				<Template name="xor">xor</Template>
			</Container>
			<Container name="n_output_gate_type">
				<Template name="buf">buf</Template>
				<Template name="not">not</Template>
			</Container>
			<Container name="enable_gate_type">
				<Template name="bufif0">bufif0</Template>
				<Template name="bufif1">bufif1</Template>
				<Template name="notif0">notif0</Template>
				<Template name="notif1">notif1</Template>
			</Container>
			<Container name="mos_switch_type">
				<Template name="nmos">nmos</Template>
				<Template name="pmos">pmos</Template>
				<Template name="rnmos">rnmos</Template>
				<Template name="rpmos">rpmos</Template>
			</Container>
			<Container name="cmos_switch_type">
				<Template name="cmos">cmos</Template>
				<Template name="rcmos">rcmos</Template>
			</Container>
			<Container name="pass_switch_type">
				<Template name="tran">tran</Template>
				<Template name="rtran">rtran</Template>
			</Container>
			<Container name="pass_enable_switch_type">
				<Template name="tranif0">tranif0</Template>
				<Template name="tranif1">tranif1</Template>
				<Template name="rtranif0">rtranif0</Template>
				<Template name="rtranif1">rtranif1</Template>
			</Container>
			<Container name="net_type">
				<Template name="wire">wire</Template>
				<Template name="tri">tri</Template>
				<Template name="tri1">tri1</Template>
				<Template name="tri0">tri0</Template>
				<Template name="supply1">supply1</Template>
				<Template name="supply0">supply0</Template>
				<Template name="wand">wand</Template>
				<Template name="triand">triand</Template>
				<Template name="wor">wor</Template>
				<Template name="trior">trior</Template>
			</Container>
			<Container name="diagnostic_message">
				<Template name="Print Nothing">(0)</Template>
				<Template name="Print Simulation Time and Location">(1)</Template>
				<Template name="Print Simulation Time, Location &amp; statistics">(2)</Template>
			</Container>
			<Template name="list_of_ports">( &lt;%port_name%&gt; [@another_port_name@] )</Template>
			<Container name="module_item">
				<TclRef name="module_item_declaration"
					ref="Verilog 95/Subtemplates/module_item_declaration"/>
				<TclRef name="module_instantiation"
					ref="Verilog 95/Subtemplates/module_instantiation"/>
				<TclRef name="gate_instantiation" ref="Verilog 95/Subtemplates/gate_instantiation"/>
				<TclRef name="Blocks" ref="Verilog 95/Subtemplates/Blocks"/>
			</Container>
			<TclRef name="module_item_declaration" ref="Verilog 95/Subtemplates/Declarations"/>
			<TclRef name="Port Declaration"
				ref="Verilog 95/Subtemplates/Declarations/Port Declaration"/>
			<Container name="task_item_declaration">
				<TclRef name="block_item_declaration"
					ref="Verilog 95/Subtemplates/block_item_declaration"/>
				<TclRef name="Input Declaration" ref="Verilog 95/Subtemplates/Input Declaration"/>
				<TclRef name="Output Declaration" ref="Verilog 95/Subtemplates/Output Declaration"/>
				<TclRef name="Inout Declaration" ref="Verilog 95/Subtemplates/Inout Declaration"/>
			</Container>
			<Container name="function_item_declaration">
				<TclRef name="block_item_declaration"
					ref="Verilog 95/Subtemplates/block_item_declaration"/>
				<TclRef name="Input Declaration" ref="Verilog 95/Subtemplates/Input Declaration"/>
			</Container>
			<Template name="another_port_name">, &lt;%port_name%&gt; [@another_port_name@]</Template>
			<Template name="another_param">, &lt;%param_name%&gt; = &lt;%value%&gt;
				[@another_param@]</Template>
			<Template name="another_net">, &lt;%net_name%&gt; [@another_net@]</Template>
			<Template name="another_reg">, &lt;%reg_name%&gt; [@another_reg@]</Template>
			<Template name="another_net">, &lt;%net_name%&gt; [@another_net@]</Template>
			<Template name="another_integer">, &lt;%integer_name%&gt; [@another_integer@]</Template>
			<Template name="another_real">, &lt;%real_name%&gt; [@another_real@]</Template>
			<Template name="another_time">, &lt;%time_name%&gt; [@another_time@]</Template>
			<Template name="another_realtime">, &lt;%realtime_name%&gt; [@another_realtime@]</Template>
			<Template name="another_event">, &lt;%event_name%&gt; [@another_event@]</Template>
			<Template name="range">[&lt;%from%&gt; : &lt;%to%&gt;]</Template>
			<Template name="module_instance">&lt;%name_of_instance%&gt; (
				[@list_of_module_connections@] ) [%another_module_instance%]</Template>
			<Template name="another_module_instance">, [@module_instance@] </Template>
			<Template name="list_of_module_connections">[@port_connection@]
				[%another_port_connection%]</Template>
			<Template name="another_port_connection">, [@port_connection@] </Template>
			<Container name="port_connection">
				<Template name="ordered_port_connection">&lt;%expression%&gt;</Template>
				<Template name="named_port_connection">. &lt;%port_identifier%&gt; (
					&lt;%expression%&gt; )</Template>
			</Container>
			<Template name="udp_initial_statement" hide="0">initial &lt;%identifier%&gt; =
				&lt;%init_val%&gt; ;</Template>
			<Template name="combinational_entry">&lt;%level_input_list%&gt; :
				&lt;%output_symbol%&gt; ; </Template>
			<Template name="sequential_entry">&lt;%seq_input_list%&gt; :
				&lt;%current_state%&gt; : &lt;%next_state%&gt; ; </Template>
			<Container name="udp_body">
				<Template name="combinational_body">table [%combinational_entry%] endtable</Template>
				<Template name="sequential_body">[@udp_initial_statement@] table
					[%sequential_entry%] endtable</Template>
			</Container>
			<Container name="range_or_type">
				<TclRef name="range" ref="Verilog 95/Subtemplates/range"> </TclRef>
				<Template name="integer">integer</Template>
				<Template name="real">real</Template>
				<Template name="realtime">realtime</Template>
				<Template name="time">time</Template>

			</Container>
			<Container name="delay_or_event_control">
				<TclRef name="event_control" ref="Verilog 95/Subtemplates/event_control"> </TclRef>
				<TclRef name="delay" ref="Verilog 95/Subtemplates/delay"> </TclRef>
			</Container>
			<Template name="delay">#&lt;%delay_val%&gt;</Template>
			<Template name="event_control">@([@event_expr@])</Template>
			<Template name="drive_strength">([@strength@],[@strength@])</Template>
			<Container name="pullup_strength">
				<TclRef name="(strength,strength)" ref="Verilog 95/Subtemplates/drive_strength"> </TclRef>
				<TclRef name="strength1" ref="Verilog 95/Subtemplates/strength1"> </TclRef>
			</Container>
			<Container name="pulldown_strength">
				<TclRef name="(strength,strength)" ref="Verilog 95/Subtemplates/drive_strength"> </TclRef>
				<TclRef name="strength0" ref="Verilog 95/Subtemplates/strength0"> </TclRef>
			</Container>
			<Container name="strength">
				<Template name="strong0">strong0</Template>
				<Template name="strong1">strong1</Template>
				<Template name="weak0">weak0</Template>
				<Template name="weak1">weak1</Template>
				<Template name="pull0">pull0</Template>
				<Template name="pull1">pull1</Template>
				<Template name="supply0">supply0</Template>
				<Template name="supply1">supply1</Template>
				<Template name="highz0">highz0</Template>
				<Template name="highz1">highz1</Template>
			</Container>
			<Container name="strength0">
				<Template name="strong0">strong0</Template>
				<Template name="weak0">weak0</Template>
				<Template name="pull0">pull0</Template>
				<Template name="supply0">supply0</Template>
				<Template name="highz0">highz0</Template>
			</Container>
			<Container name="strength1">
				<Template name="strong1">strong1</Template>
				<Template name="weak1">weak1</Template>
				<Template name="pull1">pull1</Template>
				<Template name="supply1">supply1</Template>
				<Template name="highz1">highz1</Template>
			</Container>
			<Container name="event_expr">
				<Template name="event">(&lt;%event%&gt;)</Template>
				<Template name="posedge">posedge &lt;%net_name%&gt;</Template>
				<Template name="negedge">negedge &lt;%net_name%&gt;</Template>
				<Template name="expr or expr">[@event_expr@] or [@event_expr@]</Template>
			</Container>
			<Container name="case_type">
				<Template name="Case">case</Template>
				<Template name="Case X">casex</Template>
				<Template name="Case Z">casez</Template>
			</Container>
			<Template name="another_case">&lt;%value%&gt; : [@statement@] </Template>
			<Template name="default_case">default : [@statement@]</Template>
			<Template name="else" hide="0">else [@statement@]</Template>
			<Template name="tick_else"> `else [%construct%] </Template>
			<Container name="time_units">
				<Template name="1 ns">1 ns</Template>
				<Template name="10 ns">10 ns</Template>
				<Template name="100 ns">100 ns</Template>
				<Template name="10 ps">10 ps</Template>
				<Template name="100 ps">100 ps</Template>
			</Container>
			<TclRef name="precision" ref="Verilog 95/Subtemplates/time_units"> </TclRef>
			<Template name="threshold">, &lt;%threshold%&gt;</Template>
			<Template name="notifier">, &lt;%notifier%&gt;</Template>
			<Template name="start_addr">, &lt;%start_addr%&gt;</Template>
			<Template name="finish_addr">, &lt;%finish_addr%&gt;</Template>
			<Template name="another_arg">, &lt;%arg%&gt; [@another_arg@]</Template>
			<Container name="transition_pair">
				<Template name="Transition from 0 to 1">01</Template>
				<Template name="Transition from 0 to x">0x</Template>
				<Template name="Transition from 1 to 0">10</Template>
				<Template name="Transition from 1 to x">1x</Template>
				<Template name="Transition from x to 0">x0</Template>
				<Template name="Transition from x to 1">x1</Template>
			</Container>
			<Template name="another_transition_pair">, [%transition_pair%]</Template>
			<Container name="reference_event">
				<Template name="posedge">posedge &lt;%name%&gt;</Template>
				<Template name="negedge">negedge &lt;%name%&gt;</Template>
				<Template name="edge">edge [ [@transition_pair@] [@another_transition_pair@] ]
					&lt;%name%&gt;</Template>
			</Container>
			<TclRef name="data_event" ref="Verilog 95/Subtemplates/reference_event"/>
			<Container name="array_type">
				<Template name="Sync">sync</Template>
				<Template name="Async">async</Template>
			</Container>
			<Container name="logic">
				<Template name="and">and</Template>
				<Template name="or">or</Template>
				<Template name="nand">nand</Template>
				<Template name="nor">nor</Template>
			</Container>
			<Container name="format">
				<Template name="Array">array</Template>
				<Template name="Plane">plane</Template>
			</Container>
			<Container name="display_type">
				<Container name="To Screen">
					<Template name="decimal">$display(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$displayb(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$displayh(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$displayo(&lt;%arg%&gt;
					[@another_arg@])</Template>
				</Container>
				<Container name="To File">
					<Template name="decimal">$fdisplay(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$fdisplayb(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$fdisplayh(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$fdisplayo(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
				</Container>
			</Container>
			<Container name="write_type">
				<Container name="To Screen">
					<Template name="decimal">$write(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$writeb(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$writeh(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$writeo(&lt;%arg%&gt; [@another_arg@])</Template>
				</Container>
				<Container name="To File">
					<Template name="decimal">$fwrite(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$fwriteb(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$fwriteh(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$fwriteo(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
				</Container>
			</Container>
			<Container name="monitor_type">
				<Container name="To Screen">
					<Template name="decimal">$monitor(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$monitorb(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$monitorh(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$monitoro(&lt;%arg%&gt;
					[@another_arg@])</Template>
				</Container>
				<Container name="To File">
					<Template name="decimal">$fmonitor(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$fmonitorb(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$fmonitorh(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$fmonitoro(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
				</Container>
			</Container>
			<Container name="strobe_type">
				<Container name="To Screen">
					<Template name="decimal">$strobe(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$strobeb(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$strobeh(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$strobeo(&lt;%arg%&gt;
					[@another_arg@])</Template>
				</Container>
				<Container name="To File">
					<Template name="decimal">$fstrobe(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$fstrobeb(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$fstrobeh(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$fstrobeo(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
				</Container>
			</Container>
			<Container name="block_item_declaration">
				<TclRef name="Parameter" ref="Verilog 95/Subtemplates/Parameter"/>
				<TclRef name="Reg Declaration" ref="Verilog 95/Subtemplates/Reg Declaration"/>
				<TclRef name="Integer Declaration" ref="Verilog 95/Subtemplates/Integer Declaration"/>
				<TclRef name="Real Declaration" ref="Verilog 95/Subtemplates/Real Declaration"/>
				<TclRef name="Time Declaration" ref="Verilog 95/Subtemplates/Time Declaration"/>
				<TclRef name="Realtime Declaration"
					ref="Verilog 95/Subtemplates/Realtime Declaration"/>
				<TclRef name="Event Declaration" ref="Verilog 95/Subtemplates/Event Declaration"/>
			</Container>
		</Container>
	</Container>

	<!-- ### VHDL '87 & '93 ### -->

	<Container name="VHDL">
		<Tcl name="New Design" icon="newdsn_image">::HTE::Editor::srcWizard::OpenNewDesignWizard</Tcl>
	   <Tcl name="Create Testbench" icon="newdsn_image">::HTE::Editor::srcWizard::CreateTestbenchWizard</Tcl>
		<Container name="Language Constructs" icon="template_image">
			<Container name="Library Definitions" icon="library_image">
				<Template name="Library" icon="library_image">LIBRARY
					&lt;%library_name%&gt;; USE
					&lt;%library_name%&gt;.package_name.all; </Template>
				<Container name="IEEE Packages" icon="library_image">
					<Template name="std_logic_pkg" icon="library_image">LIBRARY IEEE; USE
						IEEE.[@std_logic_pkg@].all; </Template>
					<Template name="numeric_pkg" icon="library_image">LIBRARY IEEE; USE
						IEEE.[@numeric_pkg@].all; </Template>
					<Template name="math_pkg" icon="library_image">LIBRARY IEEE; USE
						IEEE.[@math_pkg@].all; </Template>
				</Container>
				<Container name="VITAL Packages" icon="library_image">
					<Template name="vital_pkg" icon="library_image">LIBRARY IEEE; USE
						IEEE.[@vital_pkg@].all; </Template>
					<Template name="vital2000_pkg" icon="library_image">LIBRARY VITAL2000; USE
						VITAL2000.[@vital2000_pkg@].all; </Template>
				</Container>
			</Container>
			<Template name="Entity" icon="entity_image"> ENTITY &lt;%entity_name%&gt; IS
				[@generics@] [@ports@] [%entity_declarative_part%] [@entity_statement_part@] END
				[@optional_entity@] &lt;%entity_name%&gt; ; </Template>
			<Template name="Architecture" icon="architecture_image"> ARCHITECTURE
				&lt;%architecture_name%&gt; OF &lt;%entity_name%&gt; IS
				[%block_declarative_item%] BEGIN [%concurrent_statement%] END
				&lt;%architecture_name%&gt;; </Template>
			<Container name="Package" icon="package_image">
				<Template name="Package Header" icon="package_image"> PACKAGE
					&lt;%package_name%&gt; IS [%package_declarative_part%] END
					&lt;%package_name%&gt;; </Template>
				<Template name="Package Body" icon="package_image"> PACKAGE BODY
					&lt;%package_name%&gt; IS [%package_body_declarative_part%] END
					&lt;%package_name%&gt;; </Template>
			</Container>
			<Container name="Configuration" icon="config_image">
				<Template name="Declaration" icon="config_image"> CONFIGURATION
					&lt;%configuration_name%&gt; OF &lt;%entity_name%&gt; IS
					[%configuration_declarative_part%] [@block_configuration@] END
					&lt;%configuration_name%&gt;; </Template>
				<TclRef name="Specification" ref="VHDL/Subtemplates/configuration_specification"
					icon="config_image"/>
			</Container>
			<TclRef name="Declarations" icon="declaration_image" ref="VHDL/Subtemplates/block_declarative_item"/>
			<Container name="Statements" icon="statement_image">
				<TclRef name="Sequential Statement" icon="statement_image" ref="VHDL/Subtemplates/sequential_statement"/>
				<TclRef name="Concurrent Statement" icon="statement_image" ref="VHDL/Subtemplates/concurrent_statement"/>
			</Container>
		</Container>
		<!--  ##### Temporarily comment out logic blocks until we have some :).
		<Container name="Logic Blocks" icon="blocks_image">
			<Tcl name="Add Counter">::HTE::Editor::srcWizard::OpenCountWizard</Tcl>
		</Container>
-->
		<Container name="Stimulus Generators" icon="stimulus_image">
			<!--  ##### Temporarily comment out bus cycle wizard
			<Tcl name="Bus Cycle" icon="bus_cycle_image">add_bus_cycle</Tcl>
-->
			<Tcl name="Clock" icon="clock_image">::HTE::Editor::srcWizard::OpenClockWizard</Tcl>
			<Tcl name="Counter" icon="count_image">::HTE::Editor::srcWizard::OpenCountWizard</Tcl>
			<!--  ##### Temporarily comment out pseudo random wizard
			<Tcl name="Pseudo Random" icon="random_image">::HTE::Editor::srcWizard::OpenRandomWizard</Tcl>
-->
			<Tcl name="Stop Simulation" icon="stop_image">::HTE::Editor::srcWizard::OpenStopWizard</Tcl>
		</Container>
		<Container name="Subtemplates" hide="1">
			<Template name="use_clause" hide="0">use &lt;%selected_name%&gt;; </Template>
			<Template name="expression">:= &lt;%expression%&gt;</Template>
			<Template name="variable_declaration">VARIABLE &lt;%variable_name%&gt; :
				[@type@] [@expression@];</Template>
			<Template name="block_configuration">FOR &lt;%block_specification%&gt;
				[@use_clause@] [@configuration_item@] END FOR; </Template>
			<Template name="block_statement"> &lt;%block_label%&gt; : BLOCK
				[@guard_statement@] [@is@] [%block_header%] [%block_declarative_item%] BEGIN
				[%concurrent_statement%] END BLOCK &lt;%block_label%&gt; ; </Template>
			<Template name="process_statement" hide="0"> [@label@] PROCESS [@postponed@]
				[@sensitivity_list@] [%process_declarative_item%] BEGIN [%sequential_statement%] END
				PROCESS; </Template>
			<Template name="guard_statement">( &lt;%guard_expression%&gt; )</Template>
			<Template name="label">&lt;%label%&gt; :</Template>
			<Template name="is">IS</Template>
			<Template name="args">(&lt;%arg%&gt; [@another_arg@])</Template>
			<Template name="another_arg">, &lt;%arg%&gt; [@another_arg@]</Template>
			<Template name="postponed">POSTPONED</Template>
			<Container name="severity_level">
				<Template name="Note">NOTE</Template>
				<Template name="Warning">WARNING</Template>
				<Template name="Error">ERROR</Template>
				<Template name="Failure">FAILURE</Template>
			</Container>
			<Template name="another_waveform_element">, [@waveform_element@]
				[@another_waveform_element@]</Template>
			<Container name="waveform">
				<Template name="waveform_element">[@waveform_element@] [@another_waveform_element@]</Template>
				<Template name="unaffected">UNAFFECTED</Template>
			</Container>
			<Container name="waveform_element">
				<Template name="value_expression">&lt;%expression%&gt; [@after_time@]</Template>
				<Template name="null_expression">NULL [@after_time@]</Template>
			</Container>
			<Template name="after_time">AFTER &lt;%time%&gt;</Template>
			<Template name="report">REPORT &lt;%expression%&gt;</Template>
			<Template name="severity">SEVERITY [@severity_level@]</Template>
			<Template name="assertion">ASSERT &lt;%condition%&gt; [@report@] [@severity@]; </Template>
			<Template name="procedure_call">&lt;%procedure_name%&gt; [@args@]</Template>
			<Template name="another_choice">, [@waveform@] WHEN &lt;%choice%&gt;
				[@another_choice@]</Template>
			<Template name="else_another_choice">ELSE [@waveform@] WHEN &lt;%choice%&gt;
				[@else_another_choice@]</Template>
			<Template name="selected_waveform">[@waveform@] WHEN &lt;%choice%&gt;
				[@another_choice@]</Template>
			<Template name="conditional_waveform">[@waveform@] WHEN &lt;%choice%&gt;
				[@else_another_choice@]</Template>
			<Template name="reject_expr">REJECT &lt;%time_expression%&gt;</Template>
			<Template name="guarded">GUARDED</Template>
			<Container name="delay_mechanism">
				<Template name="Transport">TRANSPORT</Template>
				<Template name="Inertial"> [@reject_expr@] INERTIAL</Template>
			</Container>
			<Template name="options">[@guarded@] [@delay_mechanism@]</Template>
			<Container name="assignment_type">
				<Template name="simple">&lt;%target%&gt; &lt;= [@waveform@]</Template>
				<Template name="conditional">&lt;%target%&gt; &lt;= [@options@]
					[@conditional_waveform@]</Template>
				<Template name="selected">with &lt;%expression%&gt; select
					&lt;%target%&gt; &lt;= [@options@] [@selected_waveform@]</Template>
			</Container>
			<Container name="entity_statement_item">
				<TclRef name="process_statement" ref="VHDL/Subtemplates/process_statement"/>
				<Template name="concurrent_procedure_call_statement">[@label@] [@postponed@]
					[@procedure_call@] </Template>
				<Template name="concurrent_assertion_statement">[@label@] [@postponed@]
					[@assertion@] </Template>
			</Container>

			<!--   concurrent_statement begin   -->
			<Template name="concurrent_procedure_call_statement">[@label@] [@postponed@]
				[@procedure_call@] </Template>
			<Template name="concurrent_assertion_statement">[@label@] [@postponed@] [@assertion@] </Template>
			<Template name="concurrent_signal_assignment_statement">[@label@] [@postponed@]
				[@assignment_type@]; </Template>
			<Template name="component_instantiation_statement"
				>&lt;%instantiation_label%&gt;: &lt;%component_name%&gt;
				[@generic_map@] [@port_map@]; </Template>
			<Template name="generate_statement" hide="0">&lt;%generate_label%&gt;:
				[@generate_scheme@] GENERATE [@block_begin@] END GENERATE; </Template>
			<!--   concurrent_statement end   -->

			<Container name="concurrent_statement">
				<TclRef name="Block" icon="statement_image" ref="VHDL/Subtemplates/block_statement"/>
				<TclRef name="process_statement" icon="statement_image" ref="VHDL/Subtemplates/process_statement"/>
				<TclRef name="concurrent_procedure_call_statement" icon="statement_image" ref="VHDL/Subtemplates/concurrent_procedure_call_statement"/>
				<TclRef name="concurrent_assertion_statement" icon="statement_image" ref="VHDL/Subtemplates/concurrent_assertion_statement"/>
				<TclRef name="concurrent_signal_assignment_statement" icon="statement_image" ref="VHDL/Subtemplates/concurrent_signal_assignment_statement"/>
				<TclRef name="component_instantiation_statement" icon="statement_image" ref="VHDL/Subtemplates/component_instantiation_statement"/>
				<TclRef name="generate_statement" icon="statement_image" ref="VHDL/Subtemplates/generate_statement"/>
			</Container>
			<Template name="sensitivity_clause">ON [@sensitivity_list@]</Template>
			<Template name="condition_clause">UNTIL &lt;%condition%&gt;</Template>
			<Template name="timeout_clause">FOR &lt;%time_expression%&gt;</Template>

			<!--   sequential_statement begin   -->
			<Template name="wait_statement" hide="0">[@label@] WAIT [@sensitivity_clause@]
				[@condition_clause@] [@timeout_clause@]; </Template>
			<Template name="report_statement" hide="0">[@label@] REPORT &lt;%expression%&gt;
				[@severity@]; </Template>
			<Template name="signal_assignment_statement">[@assignment_type@]; </Template>
			<Template name="variable_assignment_statement">[@label@] &lt;%target%&gt; :=
				&lt;%expression%&gt;; </Template>
			<Template name="procedure_call_statement">[@label@] [@procedure_call@] ; </Template>
			<Template name="if_statement" hide="0">[@label@] IF &lt;%boolean_expression%&gt;
				THEN [%sequential_statement%] [%elsif_clause%] [@else_clause@] END IF ; </Template>
			<Template name="case_statement" hide="0">[@label@] CASE &lt;%expression%&gt; IS
				WHEN &lt;%choices%&gt; =&gt; [%sequential_statement%] [@another_when@]
				[@when_others@] END CASE ; </Template>
			<Template name="loop_statement" hide="0">[@label@] [@iteration_scheme@] LOOP
				[%sequential_statement%] END LOOP; </Template>
			<Template name="for_loop_statement" hide="0">[@label@] FOR &lt;%identifier%&gt;
				IN &lt;%range%&gt; LOOP [%sequential_statement%] END LOOP; </Template>
			<Template name="while_loop_statement" hide="0">[@label@] WHILE
				&lt;%condition%&gt; LOOP [%sequential_statement%] END LOOP; </Template>
			<Template name="next_statement">[@label@] NEXT [@loop_label@] [@when_condition@]; </Template>
			<Template name="exit_statement">[@label@] EXIT [@loop_label@] [@when_condition@]; </Template>
			<Template name="return_statement">[@label@] RETURN &lt;%expression%&gt;; </Template>
			<Template name="null_statement">[@label@] NULL; </Template>
			<!--   sequential_statement end   -->

			<Container name="sequential_statement">
				<TclRef name="wait_statement" icon="statement_image" ref="VHDL/Subtemplates/wait_statement"/>
				<TclRef name="assertion_statement" icon="statement_image" ref="VHDL/Subtemplates/assertion"/>
				<TclRef name="report_statement" icon="statement_image" ref="VHDL/Subtemplates/report_statement"/>
				<TclRef name="signal_assignment_statement" icon="statement_image" ref="VHDL/Subtemplates/signal_assignment_statement"/>
				<TclRef name="variable_assignment_statement" icon="statement_image" ref="VHDL/Subtemplates/variable_assignment_statement"/>
				<TclRef name="procedure_call_statement" icon="statement_image" ref="VHDL/Subtemplates/procedure_call_statement"/>
				<TclRef name="if_statement" icon="statement_image" ref="VHDL/Subtemplates/if_statement"/>
				<TclRef name="else_clause" icon="statement_image" ref="VHDL/Subtemplates/else_clause"/>
				<TclRef name="elsif_clause" icon="statement_image" ref="VHDL/Subtemplates/elsif_clause"/>
				<TclRef name="case_statement" icon="statement_image" ref="VHDL/Subtemplates/case_statement"/>
				<TclRef name="loop_statement" icon="statement_image" ref="VHDL/Subtemplates/loop_statement"/>
				<TclRef name="when_condition" icon="statement_image" ref="VHDL/Subtemplates/when_condition"/>
				<TclRef name="for_loop_statement" icon="statement_image" ref="VHDL/Subtemplates/for_loop_statement"/>
				<TclRef name="while_loop_statement" icon="statement_image" ref="VHDL/Subtemplates/while_loop_statement"/>
				<TclRef name="next_statement" icon="statement_image" ref="VHDL/Subtemplates/next_statement"/>
				<TclRef name="exit_statement" icon="statement_image" ref="VHDL/Subtemplates/exit_statement"/>
				<TclRef name="return_statement" icon="statement_image" ref="VHDL/Subtemplates/return_statement"/>
				<TclRef name="null_statement" icon="statement_image" ref="VHDL/Subtemplates/null_statement"/>
				<TclRef name="port_map_statement" icon="statement_image" ref="VHDL/Subtemplates/port_map"/>
				<TclRef name="generic_map_statement" icon="statement_image" ref="VHDL/Subtemplates/generic_map"/>
			</Container>
			<Template name="loop_label">&lt;%loop_label%&gt;</Template>
			<Template name="when_condition" hide="0">WHEN &lt;%condition%&gt;</Template>
			<Container name="iteration_scheme">
				<Template name="for">FOR &lt;%identifier%&gt; IN &lt;%range%&gt;</Template>
				<Template name="while">WHILE &lt;%condition%&gt;</Template>
			</Container>
			<Container name="generate_scheme">
				<Template name="for">FOR &lt;%identifier%&gt; IN &lt;%range%&gt;</Template>
				<Template name="if">IF &lt;%condition%&gt;</Template>
			</Container>
			<Container name="block_begin">
				<Template name="begin"> [%block_declarative_item%] BEGIN [%concurrent_statement%]</Template>
				<Template name="concurrent_statement">[%concurrent_statement%]</Template>
			</Container>
			<Template name="arch_ident">(&lt;%architecture_name%&gt;)</Template>
			<Container name="entity_aspect">
				<Template name="entity">ENTITY &lt;%entity_name%&gt; [@arch_ident@] </Template>
				<Template name="configuration">CONFIGURATION &lt;%configuration_name%&gt; </Template>
				<Template name="open">OPEN</Template>
			</Container>
			<Container name="block_header">
				<TclRef name="generic_clause" ref="VHDL/Subtemplates/generics"/>
				<TclRef name="generic_map_aspect" ref="VHDL/Subtemplates/generic_map"/>
				<TclRef name="port_clause" ref="VHDL/Subtemplates/ports"/>
				<TclRef name="port_map_aspect" ref="VHDL/Subtemplates/port_map"/>
			</Container>
			<Container name="binding_indication">
				<Template name="use entity_aspect">use [@entity_aspect@]</Template>
				<TclRef name="generic_map_aspect" ref="VHDL/Subtemplates/generic_map"/>
				<TclRef name="port_map_aspect" ref="VHDL/Subtemplates/port_map"/>
				<Template name="use entity_aspect generic_map_aspect port_map_aspect">use
					[@entity_aspect@] [@generic_map@] [@port_map@]</Template>
			</Container>
			<Template name="configuration_specification">FOR [@instantiation_list@] :
				&lt;%component_name%&gt; [@binding_indication@] ; </Template>
			<Template name="another_instance_label">, &lt;%instance_label%&gt;
				[@another_instance_label@]</Template>
			<Container name="instantiation_list">
				<Template name="instantiation_label">&lt;%instance_label%&gt;
					[@another_instance_label@]</Template>
				<Template name="Others">OTHERS</Template>
				<Template name="All">ALL</Template>
			</Container>
			<Template name="component_binding_indication">[@binding_indication@];</Template>
			<Template name="component_specification">[@instantiation_list@] :
				&lt;%component_name%&gt; </Template>
			<Container name="configuration_item">
				<TclRef name="block_configuration" ref="VHDL/Subtemplates/block_configuration"/>
				<Template name="component_configuration">FOR [@component_specification@]
					[@component_binding_indication@] [@block_configuration@] END FOR; </Template>
			</Container>
			<Container name="signal_kind">
				<Template name="Register">register</Template>
				<Template name="Bus">bus</Template>
			</Container>
			<Container name="file_open_kind">
				<Template name="For Reading">READ_MODE</Template>
				<Template name="For Writing">WRITE_MODE</Template>
			</Container>
			<Template name="configuration_declarative_part">[@configuration_declarative_item@] </Template>
			<Container name="configuration_declarative_item">
				<TclRef name="Use Clause" ref="VHDL/Subtemplates/use_clause"/>
				<TclRef name="Attribute Specification"
					ref="VHDL/Subtemplates/attribute_specification"/>
				<Template name="group_declaration">GROUP &lt;%identifier%&gt;:
					&lt;%group_template_name%&gt; ( &lt;%group_constituent_list%&gt;
					);</Template>
			</Container>
			<Container name="vital_pkg">
				<Template name="vital_primitives">vital_primitives</Template>
				<Template name="vital_timing">vital_timing</Template>
			</Container>
			<Container name="vital2000_pkg">
				<Template name="vital_primitives">vital_primitives</Template>
				<Template name="vital_timing">vital_timing</Template>
				<Template name="vital_memory">vital_memory</Template>
			</Container>
			<Container name="numeric_pkg">
				<Template name="numeric_bit">numeric_bit</Template>
				<Template name="numeric_std">numeric_std</Template>
			</Container>
			<Container name="math_pkg">
				<Template name="math_real">math_real</Template>
				<Template name="math_complex">math_complex</Template>
			</Container>
			<Container name="std_logic_pkg">
				<Template name="std_logic_1164">std_logic_1164</Template>
				<Template name="std_logic_arith">std_logic_arith</Template>
				<Template name="std_logic_misc">std_logic_misc</Template>
				<Template name="std_logic_signed">std_logic_signed</Template>
				<Template name="std_logic_unsigned">std_logic_unsigned</Template>
				<Template name="std_logic_textio">std_logic_textio</Template>
			</Container>
			<Template name="package_declarative_part">[@package_declarative_item@] </Template>
			<Template name="package_body_declarative_part">[@package_body_declarative_item@] </Template>
			<Template name="entity_declarative_part">[@entity_declarative_item@] </Template>
			<Template name="entity_statement">[@entity_statement_item@] </Template>
			<Template name="entity_statement_part">BEGIN [%entity_statement%]</Template>
			<Template name="optional_entity">ENTITY</Template>
			<Template name="interface_list">( [@sub_arg@] [@sub_another_arg@] )</Template>
			<Template name="sub_arg"> &lt;%identifier%&gt; : [@mode@] [@type@] </Template>
			<Template name="sub_another_arg">, [@sub_arg@] [@sub_another_arg@]</Template>
			<Template name="another_subprogram_declarative_item">[@subprogram_declarative_item@]
				[@another_subprogram_declarative_item@]</Template>

			<!--   block_declarative_item begin   -->
			<Template name="Function Declaration" hide="0"> FUNCTION &lt;%name%&gt;
				[@interface_list@] RETURN &lt;%type_mark%&gt;; </Template>
			<Template name="Procedure Declaration" hide="0"> PROCEDURE &lt;%name%&gt;
				[@interface_list@]; </Template>
			<Template name="Function Body" hide="0"> FUNCTION &lt;%name%&gt;
				[@interface_list@] RETURN &lt;%type_mark%&gt; IS
				[@subprogram_declarative_item@] [@another_subprogram_declarative_item@] BEGIN
				[%sequential_statement%] END &lt;%name%&gt; </Template>
			<Template name="Procedure Body" hide="0"> PROCEDURE &lt;%name%&gt;
				[@interface_list@] IS [@subprogram_declarative_item@]
				[@another_subprogram_declarative_item@] BEGIN [%sequential_statement%] END
				&lt;%name%&gt; </Template>

			<Template name="Full Type Declaration" hide="0">TYPE &lt;%identifier%&gt; IS
				&lt;%type_definition%&gt; ; </Template>
			<Template name="Incomplete Type Declaration" hide="0">TYPE &lt;%identifier%&gt;
				; </Template>

			<Template name="Group Template Declaration" hide="0">GROUP &lt;%identifier%&gt;
				IS ([@entity_class_entry@] [@another_entity_class_entry@]) ; </Template>
			<Template name="Group Declaration" hide="0">GROUP &lt;%identifier%&gt; :
				&lt;%group_template_name%&gt; ( &lt;%group_constituent%&gt;
				[@another_group_constituent@] ); </Template>
			<!--   block_declarative_item end   -->

			<Container name="subprogram_declaration">
				<TclRef name="Function" icon="declaration_image" ref="VHDL/Subtemplates/Function Declaration"/>
				<TclRef name="Procedure" icon="declaration_image" ref="VHDL/Subtemplates/Procedure Declaration"/>
			</Container>
			<Container name="subprogram_body">
				<TclRef name="Function" icon="declaration_image" ref="VHDL/Subtemplates/Function Body"/>
				<TclRef name="Procedure" icon="declaration_image" ref="VHDL/Subtemplates/Procedure Body"/>
			</Container>
			<Container name="type_declaration">
				<TclRef name="Full Type" icon="declaration_image" ref="VHDL/Subtemplates/Full Type Declaration"/>
				<TclRef name="Incomplete Type" icon="declaration_image" ref="VHDL/Subtemplates/Incomplete Type Declaration"/>
			</Container>
			<Template name="subtype_declaration" hide="0">SUBTYPE &lt;%identifier%&gt; IS
				[@type@] ; </Template>
			<Template name="alias_declaration" hide="0">ALIAS &lt;%identifier%&gt; :
				[@type@] IS &lt;%name%&gt; ; </Template>
			<Template name="attribute_declaration" hide="0">ATTRIBUTE &lt;%name%&gt; :
				[@type@]; </Template>
			<Template name="attribute_specification" hide="0">ATTRIBUTE &lt;%name%&gt; OF
				[@entity_name_list@] : [@entity_class@] IS &lt;%expression%&gt;; </Template>
			<Template name="component_declaration" hide="0">COMPONENT
				&lt;%component_name%&gt; [@generics@] [@ports@] END COMPONENT ; </Template>
			<Template name="constant_declaration" hide="0">CONSTANT &lt;%identifier%&gt; :
				[@type@] [@expression@] ; </Template>
			<Template name="port_declaration" hide="0">PORT ( SIGNAL
				&lt;%identifier_list%&gt; : [@mode@] [@type@] [@another_port@] ); </Template>
			<Template name="file_declaration" hide="0">FILE &lt;%identifier%&gt; : [@type@]
				OPEN [@file_open_kind@] IS &lt;%file_logical_name%&gt; ; </Template>
			<Template name="signal_declaration" hide="0">SIGNAL &lt;%signal_name%&gt; :
				[@type@] [@signal_kind@] [@expression@] ; </Template>
			<Template name="shared_variable_declaration" hide="0">SHARED [@variable_declaration@] </Template>
			<Template name="disconnect_specification" hide="0">DISCONNECT
				&lt;%guarded_signal%&gt; after [@time_expression@] ; </Template>
			<Container name="group">
				<TclRef name="Group Template Declaration" icon="declaration_image" ref="VHDL/Subtemplates/Group Template Declaration"/>
				<TclRef name="Group Declaration" icon="declaration_image" ref="VHDL/Subtemplates/Group Declaration"/>
			</Container>
			<Container name="block_declarative_item">
				<TclRef name="subprogram_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_declaration"/>
				<TclRef name="subprogram_body" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_body"/>
				<TclRef name="type_declaration" icon="declaration_image" ref="VHDL/Subtemplates/type_declaration"/>
				<TclRef name="subtype_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subtype_declaration"/>
				<TclRef name="constant_declaration" icon="declaration_image" ref="VHDL/Subtemplates/constant_declaration"/>
				<TclRef name="port_declaration" icon="declaration_image" ref="VHDL/Subtemplates/port_declaration"/>
				<TclRef name="signal_declaration" icon="declaration_image" ref="VHDL/Subtemplates/signal_declaration"/>
				<TclRef name="variable_declaration" icon="declaration_image" ref="VHDL/Subtemplates/variable_declaration"/>
				<TclRef name="shared_variable_declaration" icon="declaration_image" ref="VHDL/Subtemplates/shared_variable_declaration"/>
				<TclRef name="file_declaration" icon="declaration_image" ref="VHDL/Subtemplates/file_declaration"/>
				<TclRef name="alias_declaration" icon="declaration_image" ref="VHDL/Subtemplates/alias_declaration"/>
				<TclRef name="component_declaration" icon="declaration_image" ref="VHDL/Subtemplates/component_declaration"/>
				<TclRef name="attribute_declaration" icon="declaration_image" ref="VHDL/Subtemplates/attribute_declaration"/>
				<TclRef name="attribute_specification" icon="declaration_image" ref="VHDL/Subtemplates/attribute_specification"/>
				<TclRef name="configuration_specification" icon="declaration_image" ref="VHDL/Subtemplates/configuration_specification"/>
				<TclRef name="disconnect_specification" icon="declaration_image" ref="VHDL/Subtemplates/disconnect_specification"/>
				<TclRef name="use_clause" icon="declaration_image" ref="VHDL/Subtemplates/use_clause"/>
				<TclRef name="group" icon="declaration_image" ref="VHDL/Subtemplates/group"/>
				<TclRef name="generic_declaration" icon="declaration_image" ref="VHDL/Subtemplates/generics"/>
			</Container>
			<Container name="process_declarative_item">
				<TclRef name="subprogram_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_declaration"/>
				<TclRef name="subprogram_body" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_body"/>
				<TclRef name="type_declaration" icon="declaration_image" ref="VHDL/Subtemplates/type_declaration"/>
				<TclRef name="subtype_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subtype_declaration"/>
				<TclRef name="constant_declaration" icon="declaration_image" ref="VHDL/Subtemplates/constant_declaration"/>
				<TclRef name="variable_declaration" icon="declaration_image" ref="VHDL/Subtemplates/variable_declaration"/>
				<TclRef name="file_declaration" icon="declaration_image" ref="VHDL/Subtemplates/file_declaration"/>
				<TclRef name="alias_declaration" icon="declaration_image" ref="VHDL/Subtemplates/alias_declaration"/>
				<TclRef name="attribute_declaration" icon="declaration_image" ref="VHDL/Subtemplates/attribute_declaration"/>
				<TclRef name="attribute_specification" icon="declaration_image" ref="VHDL/Subtemplates/attribute_specification"/>
				<TclRef name="use_clause" icon="declaration_image" ref="VHDL/Subtemplates/use_clause"/>
				<TclRef name="group" icon="declaration_image" ref="VHDL/Subtemplates/group"/>
			</Container>
			<Container name="subprogram_declarative_item">
				<TclRef name="subprogram_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_declaration"/>
				<TclRef name="subprogram_body" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_body"/>
				<TclRef name="type_declaration" icon="declaration_image" ref="VHDL/Subtemplates/type_declaration"/>
				<TclRef name="subtype_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subtype_declaration"/>
				<TclRef name="constant_declaration" icon="declaration_image" ref="VHDL/Subtemplates/constant_declaration"/>
				<TclRef name="variable_declaration" icon="declaration_image" ref="VHDL/Subtemplates/variable_declaration"/>
				<TclRef name="file_declaration" icon="declaration_image" ref="VHDL/Subtemplates/file_declaration"/>
				<TclRef name="alias_declaration" icon="declaration_image" ref="VHDL/Subtemplates/alias_declaration"/>
				<TclRef name="attribute_declaration" icon="declaration_image" ref="VHDL/Subtemplates/attribute_declaration"/>
				<TclRef name="attribute_specification" icon="declaration_image" ref="VHDL/Subtemplates/attribute_specification"/>
				<TclRef name="use_clause" icon="declaration_image" ref="VHDL/Subtemplates/use_clause"/>
				<TclRef name="group" icon="declaration_image" ref="VHDL/Subtemplates/group"/>
			</Container>
			<Container name="package_declarative_item">
				<TclRef name="subprogram_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_declaration"/>
				<TclRef name="type_declaration" icon="declaration_image" ref="VHDL/Subtemplates/type_declaration"/>
				<TclRef name="subtype_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subtype_declaration"/>
				<TclRef name="constant_declaration" icon="declaration_image" ref="VHDL/Subtemplates/constant_declaration"/>
				<TclRef name="signal_declaration" icon="declaration_image" ref="VHDL/Subtemplates/signal_declaration"/>
				<TclRef name="shared_variable_declaration" icon="declaration_image" ref="VHDL/Subtemplates/shared_variable_declaration"/>
				<TclRef name="file_declaration" icon="declaration_image" ref="VHDL/Subtemplates/file_declaration"/>
				<TclRef name="alias_declaration" icon="declaration_image" ref="VHDL/Subtemplates/alias_declaration"/>
				<TclRef name="component_declaration" icon="declaration_image" ref="VHDL/Subtemplates/component_declaration"/>
				<TclRef name="attribute_declaration" icon="declaration_image" ref="VHDL/Subtemplates/attribute_declaration"/>
				<TclRef name="attribute_specification" icon="declaration_image" ref="VHDL/Subtemplates/attribute_specification"/>
				<TclRef name="disconnect_specification" icon="declaration_image" ref="VHDL/Subtemplates/disconnect_specification"/>
				<TclRef name="use_clause" icon="declaration_image" ref="VHDL/Subtemplates/use_clause"/>
				<TclRef name="group" icon="declaration_image" ref="VHDL/Subtemplates/group"/>
			</Container>
			<Container name="package_body_declarative_item">
				<TclRef name="subprogram_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_declaration"/>
				<TclRef name="subprogram_body" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_body"/>
				<TclRef name="type_declaration" icon="declaration_image" ref="VHDL/Subtemplates/type_declaration"/>
				<TclRef name="subtype_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subtype_declaration"/>
				<TclRef name="constant_declaration" icon="declaration_image" ref="VHDL/Subtemplates/constant_declaration"/>
				<TclRef name="shared_variable_declaration" icon="declaration_image" ref="VHDL/Subtemplates/shared_variable_declaration"/>
				<TclRef name="file_declaration" icon="declaration_image" ref="VHDL/Subtemplates/file_declaration"/>
				<TclRef name="alias_declaration" icon="declaration_image" ref="VHDL/Subtemplates/alias_declaration"/>
				<TclRef name="use_clause" icon="declaration_image" ref="VHDL/Subtemplates/use_clause"/>
				<TclRef name="group" icon="declaration_image" ref="VHDL/Subtemplates/group"/>
			</Container>
			<Container name="entity_declarative_item">
				<TclRef name="subprogram_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_declaration"/>
				<TclRef name="subprogram_body" icon="declaration_image" ref="VHDL/Subtemplates/subprogram_body"/>
				<TclRef name="type_declaration" icon="declaration_image" ref="VHDL/Subtemplates/type_declaration"/>
				<TclRef name="subtype_declaration" icon="declaration_image" ref="VHDL/Subtemplates/subtype_declaration"/>
				<TclRef name="constant_declaration" icon="declaration_image" ref="VHDL/Subtemplates/constant_declaration"/>
				<TclRef name="signal_declaration" icon="declaration_image" ref="VHDL/Subtemplates/signal_declaration"/>
				<TclRef name="shared_variable_declaration" icon="declaration_image" ref="VHDL/Subtemplates/shared_variable_declaration"/>
				<TclRef name="file_declaration" icon="declaration_image" ref="VHDL/Subtemplates/file_declaration"/>
				<TclRef name="alias_declaration" icon="declaration_image" ref="VHDL/Subtemplates/alias_declaration"/>
				<TclRef name="attribute_declaration" icon="declaration_image" ref="VHDL/Subtemplates/attribute_declaration"/>
				<TclRef name="attribute_specification" icon="declaration_image" ref="VHDL/Subtemplates/attribute_specification"/>
				<TclRef name="disconnect_specification" icon="declaration_image" ref="VHDL/Subtemplates/disconnect_specification"/>
				<TclRef name="use_clause" icon="declaration_image" ref="VHDL/Subtemplates/use_clause"/>
				<TclRef name="group" icon="declaration_image" ref="VHDL/Subtemplates/group"/>
			</Container>
			<Template name="another_entity_class_entry">, [@entity_class_entry@] [@another_entity_class_entry@]</Template>				
			<Container name="entity_class_entry">
				<TclRef name="entity_class" ref="VHDL/Subtemplates/entity_class"/>
				<Template name="other">&lt;&gt;</Template>
			</Container>
			<Template name="another_group_constituent">, &lt;%group_constituent%&gt;
				[@another_group_constituent@]</Template>
			<Container name="entity_class">
				<Template name="entity">entity</Template>
				<Template name="architecture">architecture</Template>
				<Template name="configuration">configuration</Template>
				<Template name="procedure">procedure</Template>
				<Template name="function">function</Template>
				<Template name="package">package</Template>
				<Template name="type">type</Template>
				<Template name="subtype">subtype</Template>
				<Template name="constant">constant</Template>
				<Template name="signal">signal</Template>
				<Template name="variable">variable</Template>
				<Template name="component">component</Template>
				<Template name="label">label</Template>
				<Template name="literal">literal</Template>
				<Template name="units">units</Template>
				<Template name="group">group</Template>
				<Template name="file">file</Template>
			</Container>
			<Container name="entity_name_list">
				<Template name="entity_designator">&lt;%entity_designator%&gt;
					[@another_entity_designator@]</Template>
				<Template name="others">others</Template>
				<Template name="all">all</Template>
			</Container>
			<Template name="another_entity_designator">, &lt;%entity_designator%&gt;
				[@another_entity_designator@]</Template>
			<Template name="time_expression">&lt;%delay%&gt; [@time_units@]</Template>
			<Container name="time_units">
				<Template name="hr">hr</Template>
				<Template name="min">min</Template>
				<Template name="sec">sec</Template>
				<Template name="ms">ms</Template>
				<Template name="us">us</Template>
				<Template name="ns">ns</Template>
				<Template name="ps">ps</Template>
				<Template name="fs">fs</Template>
			</Container>
			<Container name="direction">
				<Template name="Downto">DOWNTO</Template>
				<Template name="To">TO</Template>
			</Container>
			<Container name="mode">
				<Template name="Buffer">BUFFER</Template>
				<Template name="In">IN</Template>
				<Template name="Inout">INOUT</Template>
				<Template name="Out">OUT</Template>
			</Container>
			<Container name="type">
				<Template name="Bit Vector">bit_vector( &lt;%from%&gt; [@direction@]
					&lt;%to%&gt; )</Template>
				<Template name="Integer">integer</Template>
				<Template name="Signed">signed( &lt;%from%&gt; [@direction@]
					&lt;%to%&gt; )</Template>
				<Template name="Std Logic">std_logic</Template>
				<Template name="Stdlogic Vector">std_logic_vector( &lt;%from%&gt;
					[@direction@] &lt;%to%&gt; )</Template>
				<Template name="Unsigned">unsigned(&lt;%from%&gt; [@direction@]
					&lt;%to%&gt;)</Template>
				<Template name="User-Defined">&lt;%type%&gt;</Template>
			</Container>
			<Template name="another_generic">; &lt;%generic_name%&gt; : [@type@]
				[@another_generic@]</Template>
			<Template name="another_generic_name">, &lt;%generic_name%&gt;
				[@another_generic_name@]</Template>
			<Template name="another_port">; SIGNAL &lt;%identifier_list%&gt; : [@mode@]
				[@type@] [@another_port@]</Template>
			<Template name="another_signal_name">, &lt;%signal_name%&gt;
				[@another_signal_name@]</Template>
			<Template name="another_when">WHEN &lt;%choices%&gt; =&gt;
				[%sequential_statement%] [@another_when@]</Template>
			<Template name="else_clause" hide="0">ELSE &lt;%boolean_expression%&gt; THEN
				[%sequential_statement%]</Template>
			<Template name="elsif_clause" hide="0">ELSIF &lt;%boolean_expression%&gt; THEN
				[%sequential_statement%] </Template>
			<Template name="generic_map" hide="0">GENERIC MAP ( &lt;%generic_name%&gt;
				[@another_generic_name@] ) </Template>
			<Template name="generics" hide="0">GENERIC ( &lt;%generic_name%&gt; : [@type@]
				[@another_generic@] ); </Template>
			<Template name="others">OTHERS =&gt; [%sequential_statement%] </Template>
			<Template name="when_others">WHEN OTHERS =&gt; [%sequential_statement%] </Template>
			<Template name="port_map" hide="0">PORT MAP ( &lt;%signal_name%&gt;
				[@another_signal_name@] )</Template>
			<Template name="ports">PORT ( SIGNAL &lt;%identifier_list%&gt; : [@mode@]
				[@type@] [@another_port@] ); </Template>
			<Template name="sensitivity_list">( &lt;%signal_name%&gt;
				[@another_signal_name@] )</Template>
		</Container>
	</Container>


	<!-- ### Verilog 2001 ### -->

	<Container name="Verilog">
		<Tcl name="New Design Wizard" icon="newdsn_image">::HTE::Editor::srcWizard::OpenNewDesignWizard</Tcl>
		<Tcl name="Create Testbench" icon="newdsn_image">::HTE::Editor::srcWizard::CreateTestbenchWizard</Tcl>
		<Container name="Language Constructs" icon="template_image">
			<TclRef name="Module" icon="module_image" ref="Verilog/Subtemplates/Module"/>
			<TclRef name="Primitive" icon="udp_image" ref="Verilog/Subtemplates/Primitive"/>
			<TclRef name="Declarations" icon="declaration_image" ref="Verilog/Subtemplates/Declarations"/>
			<TclRef name="Statements" icon="statement_image" ref="Verilog/Subtemplates/Statements"/>
			<TclRef name="Instantiations" icon="Instance" ref="Verilog/Subtemplates/Instantiations"/>
			<TclRef name="Compiler Directives" ref="Verilog/Subtemplates/Compiler Directives"/>
			<TclRef name="Blocks" icon="blocks_image" ref="Verilog/Subtemplates/Blocks"/>
			<TclRef name="System Tasks and Functions" icon="statement_image" ref="Verilog/Subtemplates/System Tasks and Functions"/>
		</Container>
<!--  ##### Temporarily comment out logic blocks until we have some :).
		<Container name="Logic Blocks" icon="blocks_image">
			<Tcl name="Add Counter">::HTE::Editor::srcWizard::OpenCountWizard</Tcl>
		</Container>
-->
		<Container name="Stimulus Generators" icon="stimulus_image">
			<!--  ##### Temporarily comment out bus cycle wizard
			<Tcl name="Bus Cycle" icon="bus_cycle_image">add_bus_cycle</Tcl>
-->
			<Tcl name="Clock" icon="clock_image">::HTE::Editor::srcWizard::OpenClockWizard</Tcl>
			<Tcl name="Counter" icon="count_image">::HTE::Editor::srcWizard::OpenCountWizard</Tcl>
			<!--  ##### Temporarily comment out pseudo random wizard
			<Tcl name="Pseudo Random" icon="random_image">::HTE::Editor::srcWizard::OpenRandomWizard</Tcl>
-->
			<Tcl name="Stop Simulation" icon="stop_image">::HTE::Editor::srcWizard::OpenStopWizard</Tcl>
		</Container>

		<Container name="Subtemplates" hide="1">
			<Template name="Module" hide="0"> module &lt;%module_name%&gt;
				[@list_of_ansi_params@] [@list_of_ansi_ports@]; [%module_item%] endmodule </Template>
			<Template name="Primitive" hide="0"> primitive &lt;%primitive_name%&gt;
				[@list_of_ansi_ports@]; [%Port_Declaration%] [@udp_body@] endprimitive </Template>

			<Container name="Declarations">
				<TclRef name="Parameter" icon="VerilogParameterDecl" ref="Verilog/Subtemplates/Parameter"/>
				<Container name="Port Declaration" icon="declaration_image">
					<TclRef name="Input Declaration" icon="PortIn" ref="Verilog/Subtemplates/Input Declaration"/>
					<TclRef name="Output Declaration" icon="PortOut" ref="Verilog/Subtemplates/Output Declaration"/>
					<TclRef name="Inout Declaration" icon="PortIO" ref="Verilog/Subtemplates/Inout Declaration"/>
				</Container>
				<TclRef name="Local Parameter" icon="declaration_image" ref="Verilog/Subtemplates/Local Parameter"/>
				<TclRef name="Generate Variable" icon="declaration_image" ref="Verilog/Subtemplates/Generate Variable"/>
				<TclRef name="Net Declaration" icon="declaration_image" ref="Verilog/Subtemplates/Net Declaration"/>
				<TclRef name="Reg Declaration" icon="declaration_image" ref="Verilog/Subtemplates/Reg Declaration"/>
				<TclRef name="Integer Declaration" icon="declaration_image" ref="Verilog/Subtemplates/Integer Declaration"/>
				<TclRef name="Real Declaration" icon="declaration_image" ref="Verilog/Subtemplates/Real Declaration"/>
				<TclRef name="Time Declaration" icon="declaration_image" ref="Verilog/Subtemplates/Time Declaration"/>
				<TclRef name="Realtime Declaration" icon="declaration_image" ref="Verilog/Subtemplates/Realtime Declaration"/>
				<TclRef name="Event Declaration" icon="declaration_image" ref="Verilog/Subtemplates/Event Declaration"/>
				<TclRef name="Task Declaration" icon="declaration_image" ref="Verilog/Subtemplates/Task Declaration"/>
				<TclRef name="Function Declaration" icon="declaration_image" ref="Verilog/Subtemplates/Function Declaration"/>
			</Container>
			<Template name="Input Declaration" hide="0">input [@range@] &lt;%input_name%&gt;;
</Template>
			<Template name="Output Declaration" hide="0">output [@range@] &lt;%output_name%&gt;;
</Template>
			<Template name="Inout Declaration" hide="0">inout [@range@] &lt;%inout_name%&gt;;
</Template>
			<Template name="Parameter" hide="0">parameter [@range_or_type@] &lt;%param_name%&gt; = &lt;%value%&gt; [@another_param@];
</Template>
			<Template name="Local Parameter" hide="0">localparam [@range_or_type@] &lt;%localparam_name%&gt; = &lt;%value%&gt; [@another_localparam@];
</Template>
			<Template name="Generate Variable" hide="0">genvar &lt;%genvar_name%&gt; [@another_genvar@];
</Template>
			<Template name="Net Declaration">[@net_type@] [@sign_range@] &lt;%net_name%&gt; [@another_net@];
</Template>
			<Template name="Reg Declaration" hide="0">reg [@sign_range@] &lt;%reg_name%&gt; [@initial_value@] [@another_reg@];
</Template>
			<Template name="Integer Declaration" hide="0">integer &lt;%integer_name%&gt; [@initial_value@] [@another_integer@];
</Template>
			<Template name="Real Declaration" hide="0">real  &lt;%real_name%&gt; [@initial_value@] [@another_real@];
</Template>
			<Template name="Time Declaration" hide="0">time &lt;%time_name%&gt; [@initial_value@] [@another_time@];
</Template>
			<Template name="Realtime Declaration" hide="0">realtime &lt;%realtime_name%&gt; [@initial_value@] [@another_realtime@];
</Template>
			<Template name="Event Declaration" hide="0">event &lt;%event_name%&gt; [@another_event@];
</Template>
			<Template name="Task Declaration" hide="0">
task [@automatic@] &lt;%task_name%&gt; [@list_of_ansi_ports@];
	[%task_item_declaration%]
	[%statement%]
endtask
</Template>
			<Template name="Function Declaration" hide="0">
function [@automatic@] [@range_or_type@] &lt;%function_name%&gt; [@list_of_ansi_ports@];
	[%function_item_declaration%]
	[%statement%]
	&lt;%function_name%&gt; = &lt;%expression%&gt;;
endfunction
</Template>				
			<Container name="Statements">
				<TclRef name="Begin-End Block" icon="statement_image" ref="Verilog/Subtemplates/Begin-End Block"/>
				<Container name="Assignment Statement" icon="statement_image">
					<TclRef name="Blocking Assignment" icon="statement_image" ref="Verilog/Subtemplates/Blocking Assignment"/>
					<TclRef name="Non-Blocking Assignment" icon="statement_image" ref="Verilog/Subtemplates/Non-Blocking Assignment"/>
					<Container name="Procedural Continuous Statement" icon="statement_image">
						<TclRef name="assign" icon="statement_image" ref="Verilog/Subtemplates/assign"/>
						<TclRef name="deassign" icon="statement_image" ref="Verilog/Subtemplates/deassign"/>
						<TclRef name="force" icon="statement_image" ref="Verilog/Subtemplates/force"/>
						<TclRef name="release" icon="statement_image" ref="Verilog/Subtemplates/release"/>
					</Container>
				</Container>
				<TclRef name="For Loop" icon="statement_image" ref="Verilog/Subtemplates/For Loop"/>
				<TclRef name="While Loop" icon="statement_image" ref="Verilog/Subtemplates/While Loop"/>
				<TclRef name="Repeat" icon="statement_image" ref="Verilog/Subtemplates/Repeat"/>
				<TclRef name="Forever" icon="statement_image" ref="Verilog/Subtemplates/Forever"/>
				<TclRef name="If" icon="statement_image" ref="Verilog/Subtemplates/If"/>
				<TclRef name="Case" icon="statement_image" ref="Verilog/Subtemplates/Case"/>
				<TclRef name="Fork-Join Block" icon="statement_image" ref="Verilog/Subtemplates/Fork-Join Block"/>
				<TclRef name="Named Begin-End Block" icon="statement_image" ref="Verilog/Subtemplates/Named Begin-End Block"/>
				<TclRef name="Named Fork-Join Block" icon="statement_image" ref="Verilog/Subtemplates/Named Fork-Join Block"/>
				<TclRef name="Udp Initial Statement" icon="statement_image" ref="Verilog/Subtemplates/udp_initial_statement"/>
			</Container>
			<Template name="Begin-End Block" hide="0">begin
	[%statement%]
end
</Template>
			<Template name="Blocking Assignment">&lt;%reg_var%&gt; = [@delay_or_event_control@] &lt;%expression%&gt; ;
</Template>
			<Template name="Non-Blocking Assignment">&lt;%reg_var%&gt; &lt;= [@delay_or_event_control@] &lt;%expression%&gt; ;
</Template>
			<Template name="assign" hide="0">assign &lt;%reg_var%&gt; = &lt;%expression%&gt; ;
</Template>
			<Template name="deassign" hide="0">deassign &lt;%reg_var%&gt;;
</Template>
			<Template name="force" hide="0">force &lt;%reg_var%&gt; = &lt;%expression%&gt; ;
</Template>
			<Template name="release" hide="0">release &lt;%reg_var%&gt;;
</Template>
			<Template name="For Loop" hide="0">for ( &lt;%var%&gt; = &lt;%expr1%&gt; ; &lt;%expr2%&gt; ; &lt;%var%&gt; = &lt;%expr3%&gt; ) [@statement@]
</Template>
			<Template name="While Loop" hide="0">while (&lt;%condition%&gt;) [@statement@]
</Template>
			<Template name="Repeat" hide="0">repeat (&lt;%count%&gt;) [@statement@]
</Template>
			<Template name="Forever" hide="0">forever [@statement@]
</Template>
			<Template name="If" hide="0">if ( &lt;%condition%&gt; ) [@statement@] 
[@else@]
</Template>
			<Template name="Case">[@case_type@] ( &lt;%expression%&gt; )
	[%case_item%]
	[@default_case@]
endcase
</Template>
			<Template name="Fork-Join Block" hide="0">fork
	[%statement%]
join
</Template>
			<Template name="Named Begin-End Block" hide="0">begin: &lt;%blockname%&gt;
	[%block_item_declaration%]
	[%statement%]
end
</Template>
			<Template name="Named Fork-Join Block" hide="0">fork: &lt;%blockname%&gt;
	[%block_item_declaration%]
	[%statement%]
join
</Template>

			<Container name="Instantiations">				
				<TclRef name="Module" icon="VerilogModule" ref="Verilog/Subtemplates/module_instantiation"/>
				<TclRef name="Gate" icon="Instance" ref="Verilog/Subtemplates/gate_instantiation"/>
				<TclRef name="Generated" icon="Instance" ref="Verilog/Subtemplates/generated_instantiation"/>
			</Container>
			<Template name="module_instantiation">&lt;%module_name%&gt; [@parameter_value_assignment@] [@module_instance@];
</Template>				
			<Container name="gate_instantiation" icon="Instance">
				<TclRef name="n_input_gate" icon="Instance" ref="Verilog/Subtemplates/n_input_gate"/>
				<TclRef name="n_output_gate" icon="Instance" ref="Verilog/Subtemplates/n_output_gate"/>
				<TclRef name="enable_gate" icon="Instance" ref="Verilog/Subtemplates/enable_gate"/>
				<TclRef name="pullup" icon="Instance" ref="Verilog/Subtemplates/pullup"/>
				<TclRef name="pulldown" icon="Instance" ref="Verilog/Subtemplates/pulldown"/>
				<TclRef name="mos_switch" icon="Instance" ref="Verilog/Subtemplates/mos_switch"/>
				<TclRef name="cmos_switch" icon="Instance" ref="Verilog/Subtemplates/cmos_switch"/>
				<TclRef name="pass_switch" icon="Instance" ref="Verilog/Subtemplates/pass_switch"/>
				<TclRef name="pass_enable_switch" icon="Instance" ref="Verilog/Subtemplates/pass_enable_switch"/>
			</Container>
			<Template name="n_input_gate">[@n_input_gate_type@] [@drive_strength@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;, &lt;%input%&gt; [@another_input@]);
</Template>
			<Template name="n_output_gate">[@n_output_gate_type@] [@drive_strength@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%output%&gt; [@another_output@], &lt;%input%&gt;);
</Template>
			<Template name="enable_gate">[@enable_gate_type@] [@drive_strength@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;, &lt;%input%&gt;, &lt;%enable%&gt;);
</Template>
			<Template name="pullup" hide="0">pullup [@pullup_strength@] &lt;%instance_name%&gt; [@delay@] (&lt;%output%&gt;);
</Template>
			<Template name="pulldown" hide="0">pulldown [@pulldown_strength@] &lt;%instance_name%&gt; [@delay@] (&lt;%output%&gt;);
</Template>
			<Template name="mos_switch">[@mos_switch_type@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;, &lt;%input%&gt;, &lt;%enable%&gt;);
</Template>
			<Template name="cmos_switch">[@cmos_switch_type@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;, &lt;%input%&gt;, &lt;%ncontrol%&gt;, &lt;%pcontrol%&gt;);
</Template>
			<Template name="pass_switch">[@pass_switch_type@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%inout%&gt;, &lt;%inout%&gt;);
</Template>
			<Template name="pass_enable_switch">[@pass_enable_switch_type@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%inout%&gt;, &lt;%inout%&gt;, &lt;%enable%&gt;);
</Template>
			<Template name="generated_instantiation" hide="0">generate
	[%generate_item%]
endgenerate
</Template>

			<Container name="Compiler Directives">
				<TclRef name="`define" ref="Verilog/Subtemplates/`define"/>
				<TclRef name="`ifdef" ref="Verilog/Subtemplates/`ifdef"/>
				<TclRef name="`ifndef" ref="Verilog/Subtemplates/`ifndef"/>
				<TclRef name="`include" ref="Verilog/Subtemplates/`include"/>
				<TclRef name="`timescale" ref="Verilog/Subtemplates/`timescale"/>
				<TclRef name="`celldefine" ref="Verilog/Subtemplates/`celldefine"/>
			</Container>
			<Template name="`define">`define &lt;%def_name%&gt; &lt;%value%&gt; 
</Template>
			<Template name="`ifdef">`ifdef &lt;%def_name%&gt;
	[%construct%]
[@tick_else_or_elsif@]
`endif
</Template>
			<Template name="`ifndef">`ifndef &lt;%def_name%&gt;
	[%construct%]
[@tick_else_or_elsif@]
`endif
</Template>
			<Template name="`include">`include &quot;&lt;%filename%&gt;&quot;
</Template>
			<Template name="`timescale">`timescale [@time_units@] / [@precision@]
</Template>
			<Template name="`celldefine">
`celldefine
module &lt;%module_name%&gt; [@list_of_ansi_params@] [@list_of_ansi_ports@];

	[%module_item%]

endmodule
`endcelldefine
</Template>				
			<Container name="Blocks">
				<TclRef name="Always" icon="VerilogAlways" ref="Verilog/Subtemplates/Always"/>
				<TclRef name="Initial" icon="VerilogInitial" ref="Verilog/Subtemplates/Initial"/>
			</Container>
			<Template name="Always" hide="0">always [@event_control@] [@statement@] </Template>
			<Template name="Initial" hide="0">initial [@statement@] </Template>

			<Container name="System Tasks and Functions">
				<Container name="Display and I/O Tasks" icon="VerilogTask">
					<TclRef name="File Open" icon="VerilogTask" ref="Verilog/Subtemplates/File Open"/>
					<TclRef name="File Close" icon="VerilogTask" ref="Verilog/Subtemplates/File Close"/>
					<TclRef name="$display" icon="VerilogTask" ref="Verilog/Subtemplates/$display"/>
					<TclRef name="$write" icon="VerilogTask" ref="Verilog/Subtemplates/$write"/>
					<TclRef name="$monitor" icon="VerilogTask" ref="Verilog/Subtemplates/$monitor"/>
					<TclRef name="$strobe" icon="VerilogTask" ref="Verilog/Subtemplates/$strobe"/>
					<TclRef name="Enable Monitors" icon="VerilogTask" ref="Verilog/Subtemplates/Enable Monitors"/>
					<TclRef name="Disable Monitors" icon="VerilogTask" ref="Verilog/Subtemplates/Disable Monitors"/>
					<Container name="Read Memory from File" icon="VerilogTask">
						<TclRef name="binary" icon="VerilogTask" ref="Verilog/Subtemplates/rmf_binary"/>
						<TclRef name="hex" icon="VerilogTask" ref="Verilog/Subtemplates/rmf_hex"/>
					</Container>
				</Container>
				<Container name="Timing Check Tasks" icon="VerilogTask">
					<TclRef name="$setup" icon="VerilogTask" ref="Verilog/Subtemplates/$setup"/>
					<TclRef name="$hold" icon="VerilogTask" ref="Verilog/Subtemplates/$hold"/>
					<TclRef name="$setuphold" icon="VerilogTask" ref="Verilog/Subtemplates/$setuphold"/>
					<TclRef name="$width" icon="VerilogTask" ref="Verilog/Subtemplates/$width"/>
					<TclRef name="$period" icon="VerilogTask" ref="Verilog/Subtemplates/$period"/>
					<TclRef name="$skew" icon="VerilogTask" ref="Verilog/Subtemplates/$skew"/>
					<TclRef name="$timeskew" icon="VerilogTask" ref="Verilog/Subtemplates/$timeskew"/>
					<TclRef name="$fullskew" icon="VerilogTask" ref="Verilog/Subtemplates/$fullskew"/>
					<TclRef name="$recovery" icon="VerilogTask" ref="Verilog/Subtemplates/$recovery"/>
					<TclRef name="$removal" icon="VerilogTask" ref="Verilog/Subtemplates/$removal"/>
					<TclRef name="$recrem" icon="VerilogTask" ref="Verilog/Subtemplates/$recrem"/>
					<TclRef name="$nochange" icon="VerilogTask" ref="Verilog/Subtemplates/$nochange"/>
				</Container>
				<Container name="Simulation Control" icon="VerilogTask">
					<TclRef name="Finish Simulation (and exit)" icon="VerilogTask" ref="Verilog/Subtemplates/Finish Simulation"/>
					<TclRef name="Stop Simulation" icon="VerilogTask" ref="Verilog/Subtemplates/Stop Simulation"/>
				</Container>
				<Container name="Simulation Time Functions" icon="VerilogFunction">
					<TclRef name="Print TimeScale" icon="VerilogFunction" ref="Verilog/Subtemplates/Print TimeScale"/>
					<TclRef name="Format Time" icon="VerilogFunction" ref="Verilog/Subtemplates/Format Time"/>
					<TclRef name="Get Time as Real Number" icon="VerilogFunction" ref="Verilog/Subtemplates/Get Time as Real Number"/>
					<TclRef name="Get Time as 64-bit Integer" icon="VerilogFunction" ref="Verilog/Subtemplates/Get Time as 64-bit Integer"/>
					<TclRef name="Get Time as 32-bit Integer" icon="VerilogFunction" ref="Verilog/Subtemplates/Get Time as 32-bit Integer"/>
				</Container>
				<Container name="Conversion Functions for Reals" icon="VerilogFunction">
					<TclRef name="Real to Integer" icon="VerilogFunction" ref="Verilog/Subtemplates/Real to Integer"/>
					<TclRef name="Integer to Real" icon="VerilogFunction" ref="Verilog/Subtemplates/Integer to Real"/>
					<TclRef name="Real to Bits" icon="VerilogFunction" ref="Verilog/Subtemplates/Real to Bits"/>
					<TclRef name="Bits to Real" icon="VerilogFunction" ref="Verilog/Subtemplates/Bits to Real"/>
				</Container>
				<Container name="Probabilistic Distribution Functions" icon="VerilogFunction">
					<TclRef name="Random" icon="VerilogFunction" ref="Verilog/Subtemplates/Random"/>
					<TclRef name="Uniform" icon="VerilogFunction" ref="Verilog/Subtemplates/Uniform"/>
					<TclRef name="Normal" icon="VerilogFunction" ref="Verilog/Subtemplates/Normal"/>
					<TclRef name="Exponential" icon="VerilogFunction" ref="Verilog/Subtemplates/Exponential"/>
					<TclRef name="Poisson" icon="VerilogFunction" ref="Verilog/Subtemplates/Poisson"/>
					<TclRef name="Chi Square" icon="VerilogFunction" ref="Verilog/Subtemplates/Chi Square"/>
					<TclRef name="T" icon="VerilogFunction" ref="Verilog/Subtemplates/T"/>
					<TclRef name="Erlang" icon="VerilogFunction" ref="Verilog/Subtemplates/Erlang"/>
				</Container>
				<Container name="Stochastic Analysis Functions" icon="VerilogFunction">
					<TclRef name="Q Initialize" icon="VerilogFunction" ref="Verilog/Subtemplates/Q Initialize"/>
					<TclRef name="Q Add" icon="VerilogFunction" ref="Verilog/Subtemplates/Q Add"/>
					<TclRef name="Q Remove" icon="VerilogFunction" ref="Verilog/Subtemplates/Q Remove"/>
					<TclRef name="Q Full" icon="VerilogFunction" ref="Verilog/Subtemplates/Q Full"/>
					<TclRef name="Q Exam" icon="VerilogFunction" ref="Verilog/Subtemplates/Q Exam"/>
				</Container>
				<TclRef name="PLA Modeling Tasks" icon="VerilogTask" ref="Verilog/Subtemplates/PLA Modeling Tasks"/>
			</Container>
			<Template name="File Open">$fopen(&quot;&lt;%file_name%&gt;&quot;); </Template>
			<Template name="File Close">$fclose(&lt;%file_descriptor%&gt;); </Template>
			<Template name="$display">[@display_type@]; </Template>
			<Template name="$write">[@write_type@]; </Template>
			<Template name="$monitor">[@monitor_type@]; </Template>
			<Template name="$strobe">[@strobe_type@]; </Template>
			<Template name="Enable Monitors">$monitoron(); </Template>
			<Template name="Disable Monitors">$monitoroff(); </Template>
			<Template name="rmf_binary">$readmemb(&quot;&lt;%file_name%&gt;&quot;,
				&lt;%memory_name%&gt; [@start_addr@] [@finish_addr@]); </Template>
			<Template name="rmf_hex">$readmemh(&quot;&lt;%file_name%&gt;&quot;,
				&lt;%memory_name%&gt; [@start_addr@] [@finish_addr@]); </Template>
			<Template name="$setup">$setup([@data_event@], [@reference_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$hold">$hold([@reference_event@], [@data_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$setuphold">$setuphold([@reference_event@], [@data_event@],
				&lt;%setup_limit%&gt;, &lt;%hold_limit%&gt; [@notifier@]); </Template>
			<Template name="$width">$width([@reference_event@], &lt;%limit%&gt;
				[@threshold@] [@notifier@]); </Template>
			<Template name="$period">$period([@reference_event@], &lt;%limit%&gt;
				[@notifier@]); </Template>
			<Template name="$skew">$skew([@reference_event@], [@data_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$timeskew">$timeskew([@reference_event@], [@data_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$fullskew">$fullskew([@reference_event@], [@data_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$recovery">$recovery([@reference_event@], [@data_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$removal">$removal([@reference_event@], [@data_event@],
				&lt;%limit%&gt; [@notifier@]); </Template>
			<Template name="$recrem">$recrem([@reference_event@], [@data_event@],
				&lt;%rec_limit%&gt;, &lt;%rem_limit%&gt; [@notifier@]); </Template>
			<Template name="$nochange">$nochange([@reference_event@], [@data_event@],
				&lt;%start_edge_offset%&gt;, &lt;%end_edge_offset%&gt;
				[@notifier@]); </Template>
			<Template name="Finish Simulation">$finish [@diagnostic_message@]; </Template>
			<Template name="Stop Simulation">$stop [@diagnostic_message@]; </Template>
			<Template name="Print TimeScale">$printtimescale(&lt;%hierarchical_name%&gt;); </Template>
			<Template name="Format Time">$timeformat[@time_format_args@]; </Template>
			<Template name="Get Time as Real Number">$realtime;</Template>
			<Template name="Get Time as 64-bit Integer">$time;</Template>
			<Template name="Get Time as 32-bit Integer">$stime;</Template>
			<Template name="Real to Integer">$rtoi(&lt;%real_val%&gt;);</Template>
			<Template name="Integer to Real">$itor(&lt;%int_val%&gt;);</Template>
			<Template name="Real to Bits">$realtobits(&lt;%real_val%&gt;);</Template>
			<Template name="Bits to Real">$bitstoreal(&lt;%bit_val%&gt;);</Template>
			<Template name="Random">$random [@seed_arg@];</Template>
			<Template name="Uniform">$dist_uniform(&lt;%seed%&gt;, &lt;%start%&gt;,
				&lt;%end%&gt;);</Template>
			<Template name="Normal">$dist_normal(&lt;%seed%&gt;, &lt;%mean%&gt;,
				&lt;%std_deviation%&gt;);</Template>
			<Template name="Exponential">$dist_exponential(&lt;%seed%&gt;,
				&lt;%mean%&gt;);</Template>
			<Template name="Poisson">$dist_poisson(&lt;%seed%&gt;, &lt;%mean%&gt;);</Template>
			<Template name="Chi Square">$dist_chi_square(&lt;%seed%&gt;,
				&lt;%degree_of_freedom%&gt;);</Template>
			<Template name="T">$dist_t(&lt;%seed%&gt;, &lt;%degree_of_freedom%&gt;);</Template>
			<Template name="Erlang">$dist_erlang(&lt;%seed%&gt;, &lt;%k_stage%&gt;,
				&lt;%mean%&gt;);</Template>
			<Template name="Q Initialize">$q_initialize(&lt;%q_id%&gt;, [@q_type@],
				&lt;%max_length%&gt;, &lt;%q_status%&gt;);</Template>
			<Template name="Q Add">$q_add(&lt;%q_id%&gt;, &lt;%job_id%&gt;,
				&lt;%uniform_id%&gt;, &lt;%q_status%&gt;);</Template>
			<Template name="Q Remove">$q_remove(&lt;%q_id%&gt;, &lt;%job_id%&gt;,
				&lt;%uniform_id%&gt;, &lt;%q_status%&gt;);</Template>
			<Template name="Q Full">$q_full(&lt;%q_id%&gt; &lt;%q_status%&gt;);</Template>
			<Template name="Q Exam">$q_exam(&lt;%q_id%&gt;, [@q_stat_code@],
				&lt;%q_stat_value%&gt;, &lt;%q_status%&gt;);</Template>
			<Template name="PLA Modeling Tasks"
				>$[@array_type@]$[@logic@]$[@format@](&lt;%memory_name%&gt;,
				&lt;%input_terms%&gt;, &lt;%output_terms%&gt;);</Template>

			<Container name="construct">
				<TclRef name="module" ref="Verilog/Subtemplates/Module"> </TclRef>
				<TclRef name="primitive" ref="Verilog/Subtemplates/Primitive"> </TclRef>
				<TclRef name="declaration" ref="Verilog/Subtemplates/Declarations"> </TclRef>
				<TclRef name="statement" ref="Verilog/Subtemplates/Statements"> </TclRef>
				<TclRef name="instantiation" ref="Verilog/Subtemplates/Instantiations"> </TclRef>
				<TclRef name="compiler directive" ref="Verilog/Subtemplates/Compiler Directives"> </TclRef>
				<TclRef name="block" ref="Verilog/Subtemplates/Blocks"> </TclRef>
			</Container>
			<TclRef name="statement" ref="Verilog/Subtemplates/Statements"> </TclRef>

			<Template name="time_format_args">([@unit_number@], [@precision_number@],
				&lt;%suffix_string%&gt;, &lt;%min_field_width%&gt;)</Template>
			<Container name="unit_number">
				<Template name="1 s">0</Template>
				<Template name="100 ms">-1</Template>
				<Template name="10 ms">-2</Template>
				<Template name="1 ms">-3</Template>
				<Template name="100 us">-4</Template>
				<Template name="10 us">-5</Template>
				<Template name="1 us">-6</Template>
				<Template name="100 ns">-7</Template>
				<Template name="10 ns">-8</Template>
				<Template name="1 ns">-9</Template>
				<Template name="100 ps">-10</Template>
				<Template name="10 ps">-11</Template>
				<Template name="1 ps">-12</Template>
				<Template name="100 fs">-13</Template>
				<Template name="10 fs">-14</Template>
				<Template name="1 fs">-15</Template>
			</Container>
			<TclRef name="precision_number" ref="Verilog/Subtemplates/unit_number"/>
			<Container name="q_type">
				<Template name="First-In,First-Out">1</Template>
				<Template name="Last-In,First-Out">2</Template>
			</Container>
			<Container name="q_stat_code">
				<Template name="Get Current Queue Length">1</Template>
				<Template name="Get Mean Interarrival Time">2</Template>
				<Template name="Get Maximum Queue Length">3</Template>
				<Template name="Get Shortest Wait Time Ever">4</Template>
				<Template name="Get Longest Wait Time for Jobs Still In the Queue">5</Template>
				<Template name="Get Average Wait Time in Queue">6</Template>
			</Container>
			<Template name="seed_arg">(&lt;%seed%&gt;)</Template>
			<Template name="parameter_value_assignment">#( &lt;%expression%&gt;
				[%parameter_assignment%] )</Template>
			<Template name="parameter_assignment">, &lt;%expression%&gt; </Template>
			<Template name="another_input">, &lt;%input%&gt; [@another_input@]</Template>
			<Template name="another_output">, &lt;%output%&gt; [@another_output@]</Template>
			<Container name="n_input_gate_type">
				<Template name="and">and</Template>
				<Template name="nand">nand</Template>
				<Template name="nor">nor</Template>
				<Template name="or">or</Template>
				<Template name="xnor">xnor</Template>
				<Template name="xor">xor</Template>
			</Container>
			<Container name="n_output_gate_type">
				<Template name="buf">buf</Template>
				<Template name="not">not</Template>
			</Container>
			<Container name="enable_gate_type">
				<Template name="bufif0">bufif0</Template>
				<Template name="bufif1">bufif1</Template>
				<Template name="notif0">notif0</Template>
				<Template name="notif1">notif1</Template>
			</Container>
			<Container name="mos_switch_type">
				<Template name="nmos">nmos</Template>
				<Template name="pmos">pmos</Template>
				<Template name="rnmos">rnmos</Template>
				<Template name="rpmos">rpmos</Template>
			</Container>
			<Container name="cmos_switch_type">
				<Template name="cmos">cmos</Template>
				<Template name="rcmos">rcmos</Template>
			</Container>
			<Container name="pass_switch_type">
				<Template name="tran">tran</Template>
				<Template name="rtran">rtran</Template>
			</Container>
			<Container name="pass_enable_switch_type">
				<Template name="tranif0">tranif0</Template>
				<Template name="tranif1">tranif1</Template>
				<Template name="rtranif0">rtranif0</Template>
				<Template name="rtranif1">rtranif1</Template>
			</Container>
			<Container name="net_type">
				<Template name="wire">wire</Template>
				<Template name="tri">tri</Template>
				<Template name="tri1">tri1</Template>
				<Template name="tri0">tri0</Template>
				<Template name="supply1">supply1</Template>
				<Template name="supply0">supply0</Template>
				<Template name="wand">wand</Template>
				<Template name="triand">triand</Template>
				<Template name="wor">wor</Template>
				<Template name="trior">trior</Template>
			</Container>
			<Container name="diagnostic_message">
				<Template name="Print Nothing">(0)</Template>
				<Template name="Print Simulation Time and Location">(1)</Template>
				<Template name="Print Simulation Time, Location &amp; statistics">(2)</Template>
			</Container>
			<Template name="list_of_ansi_params">#( parameter [@range_or_type@]
				&lt;%param_name%&gt; = &lt;%value%&gt; [@another_ansi_param@] )</Template>
			<Template name="list_of_ansi_ports">( [@io_mode@] [@port_type@] [@sign_range@]
				&lt;%port_name%&gt; [@another_ansi_port@] )</Template>
			<Template name="list_of_ports">( &lt;%port_name%&gt; [@another_port_name@] )</Template>
			<Container name="module_item">
				<TclRef name="module_item_declaration"
					ref="Verilog/Subtemplates/module_item_declaration"/>
				<TclRef name="module_instantiation" ref="Verilog/Subtemplates/module_instantiation"/>
				<TclRef name="gate_instantiation" ref="Verilog/Subtemplates/gate_instantiation"/>
				<TclRef name="generated_instantiation"
					ref="Verilog/Subtemplates/generated_instantiation"/>
				<TclRef name="Blocks" ref="Verilog/Subtemplates/Blocks"/>
			</Container>
			<Container name="generate_item">
				<TclRef name="generate_conditional" ref="Verilog/Subtemplates/generate_conditional"/>
				<TclRef name="generate_case" ref="Verilog/Subtemplates/generate_case"/>
				<TclRef name="generate_loop" ref="Verilog/Subtemplates/generate_loop"/>
				<TclRef name="generate_block" ref="Verilog/Subtemplates/generate_block"/>
				<TclRef name="module_item" ref="Verilog/Subtemplates/module_item"/>
			</Container>
			<Template name="generate_conditional">if ( &lt;%condition%&gt; )
				[@generate_item@] [@generate_else@] </Template>
			<Container name="generate_else">
				<Template name="else">else [@generate_item@] </Template>
				<Template name="else if">else if ( &lt;%condition%&gt; ) [@generate_item@]
					[@generate_else@] </Template>
			</Container>
			<Template name="generate_case">case ( &lt;%expression%&gt; )
				&lt;%value%&gt; : [@generate_item@] [%another_gen_case%]
				[@default_gen_case@] endcase </Template>
			<Template name="another_gen_case">&lt;%value%&gt; : [@generate_item@] </Template>
			<Template name="default_gen_case">default : [@generate_item@]</Template>
			<Template name="generate_loop">for ( &lt;%genvar%&gt; = &lt;%expr1%&gt;
				; &lt;%expr2%&gt; ; &lt;%genvar%&gt; = &lt;%expr3%&gt; )
				begin : &lt;%loop_name%&gt; [%generate_item%] end </Template>
			<Template name="generate_block">begin [@generate_label@] [%generate_item%] end </Template>
			<Template name="generate_label">: &lt;%block_name%&gt;</Template>
			<TclRef name="module_item_declaration" ref="Verilog/Subtemplates/Declarations"/>
			<TclRef name="Port Declaration" ref="Verilog/Subtemplates/Declarations/Port Declaration"/>
			<Container name="task_item_declaration">
				<TclRef name="block_item_declaration"
					ref="Verilog/Subtemplates/block_item_declaration"/>
				<TclRef name="Input Declaration" ref="Verilog/Subtemplates/Input Declaration"/>
				<TclRef name="Output Declaration" ref="Verilog/Subtemplates/Output Declaration"/>
				<TclRef name="Inout Declaration" ref="Verilog/Subtemplates/Inout Declaration"/>
			</Container>
			<Container name="function_item_declaration">
				<TclRef name="block_item_declaration"
					ref="Verilog/Subtemplates/block_item_declaration"/>
				<TclRef name="Input Declaration" ref="Verilog/Subtemplates/Input Declaration"/>
			</Container>
			<Template name="another_port_name">, &lt;%port_name%&gt; [@another_port_name@]</Template>
			<Template name="another_ansi_param">, parameter [@range_or_type@]
				&lt;%param_name%&gt; = &lt;%value%&gt; [@another_ansi_param@]</Template>
			<Template name="another_ansi_port">, [@io_mode@] [@port_type@] [@sign_range@]
				&lt;%port_name%&gt; [@another_ansi_port@]</Template>
			<Template name="another_param">, &lt;%param_name%&gt; = &lt;%value%&gt;
				[@another_param@]</Template>
			<Template name="another_localparam">, &lt;%localparam_name%&gt; =
				&lt;%value%&gt; [@another_localparam@]</Template>
			<Template name="another_genvar">, &lt;%genvar_name%&gt; [@another_genvar@]</Template>
			<Template name="another_net">, &lt;%net_name%&gt; [@another_net@]</Template>
			<Template name="another_reg">, &lt;%reg_name%&gt; [@initial_value@]
				[@another_reg@]</Template>
			<Template name="another_integer">, &lt;%integer_name%&gt; [@initial_value@]
				[@another_integer@]</Template>
			<Template name="another_real">, &lt;%real_name%&gt; [@initial_value@]
				[@another_real@]</Template>
			<Template name="another_time">, &lt;%time_name%&gt; [@initial_value@]
				[@another_time@]</Template>
			<Template name="another_realtime">, &lt;%realtime_name%&gt; [@initial_value@]
				[@another_realtime@]</Template>
			<Template name="another_event">, &lt;%event_name%&gt; [@another_event@]</Template>
			<Container name="sign_range">
				<TclRef name="range" ref="Verilog/Subtemplates/range"> </TclRef>
				<TclRef name="signed range" ref="Verilog/Subtemplates/signed_range"> </TclRef>
			</Container>
			<Template name="automatic">automatic</Template>
			<Template name="signed_range">signed [&lt;%from%&gt; : &lt;%to%&gt;]</Template>
			<Template name="range">[&lt;%from%&gt; : &lt;%to%&gt;]</Template>
			<Template name="module_instance">&lt;%name_of_instance%&gt; (
				[@list_of_module_connections@] ) [%another_module_instance%]</Template>
			<Template name="another_module_instance">, [@module_instance@] </Template>
			<Template name="list_of_module_connections">[@port_connection@]
				[%another_port_connection%]</Template>
			<Template name="another_port_connection">, [@port_connection@] </Template>
			<Container name="port_connection">
				<Template name="ordered_port_connection">&lt;%expression%&gt;</Template>
				<Template name="named_port_connection">. &lt;%port_identifier%&gt; (
					&lt;%expression%&gt; )</Template>
			</Container>
			<Template name="udp_initial_statement" hide="0">initial &lt;%identifier%&gt; =
				&lt;%init_val%&gt; ;</Template>
			<Template name="combinational_entry">&lt;%level_input_list%&gt; :
				&lt;%output_symbol%&gt; ; </Template>
			<Template name="sequential_entry">&lt;%seq_input_list%&gt; :
				&lt;%current_state%&gt; : &lt;%next_state%&gt; ; </Template>
			<Container name="udp_body">
				<Template name="combinational_body">table [%combinational_entry%] endtable</Template>
				<Template name="sequential_body">[@udp_initial_statement@] table
					[%sequential_entry%] endtable</Template>
			</Container>
			<Container name="range_or_type">
				<Template name="range">[&lt;%from%&gt; : &lt;%to%&gt;]</Template>
				<Template name="signed_range">signed [&lt;%from%&gt; : &lt;%to%&gt;]</Template>
				<Template name="integer">integer</Template>
				<Template name="real">real</Template>
				<Template name="time">time</Template>
				<Template name="realtime">realtime</Template>
			</Container>
			<Container name="type">
				<Template name="integer">integer</Template>
				<Template name="real">real</Template>
				<Template name="time">time</Template>
				<Template name="realtime">realtime</Template>
			</Container>
			<Container name="io_mode">
				<Template name="input">input</Template>
				<Template name="output">output</Template>
				<Template name="inout">inout</Template>
			</Container>
			<Container name="port_type">
				<TclRef name="net type" ref="Verilog/Subtemplates/net_type"> </TclRef>
				<Template name="reg">reg</Template>
				<Template name="integer">integer</Template>
				<Template name="time">time</Template>
			</Container>
			<Template name="initial_value">= &lt;%value%&gt;</Template>
			<Container name="delay_or_event_control">
				<TclRef name="event_control" ref="Verilog/Subtemplates/event_control"> </TclRef>
				<TclRef name="delay" ref="Verilog/Subtemplates/delay"> </TclRef>
			</Container>
			<Template name="delay">#&lt;%delay_val%&gt;</Template>
			<Template name="event_control">@([@event_expr@])</Template>
			<Template name="drive_strength">([@strength@],[@strength@])</Template>
			<Container name="pullup_strength">
				<TclRef name="(strength,strength)" ref="Verilog/Subtemplates/drive_strength"> </TclRef>
				<TclRef name="strength1" ref="Verilog/Subtemplates/strength1"> </TclRef>
			</Container>
			<Container name="pulldown_strength">
				<TclRef name="(strength,strength)" ref="Verilog/Subtemplates/drive_strength"> </TclRef>
				<TclRef name="strength0" ref="Verilog/Subtemplates/strength0"> </TclRef>
			</Container>
			<Container name="strength">
				<Template name="strong0">strong0</Template>
				<Template name="strong1">strong1</Template>
				<Template name="weak0">weak0</Template>
				<Template name="weak1">weak1</Template>
				<Template name="pull0">pull0</Template>
				<Template name="pull1">pull1</Template>
				<Template name="supply0">supply0</Template>
				<Template name="supply1">supply1</Template>
				<Template name="highz0">highz0</Template>
				<Template name="highz1">highz1</Template>
			</Container>
			<Container name="strength0">
				<Template name="strong0">strong0</Template>
				<Template name="weak0">weak0</Template>
				<Template name="pull0">pull0</Template>
				<Template name="supply0">supply0</Template>
				<Template name="highz0">highz0</Template>
			</Container>
			<Container name="strength1">
				<Template name="strong1">strong1</Template>
				<Template name="weak1">weak1</Template>
				<Template name="pull1">pull1</Template>
				<Template name="supply1">supply1</Template>
				<Template name="highz1">highz1</Template>
			</Container>
			<Container name="event_expr">
				<Template name="event">(&lt;%event%&gt;)</Template>
				<Template name="posedge">posedge &lt;%net_name%&gt;</Template>
				<Template name="negedge">negedge &lt;%net_name%&gt;</Template>
				<Template name="combinatorial">*</Template>
				<Template name="expr, expr">[@event_expr@], [@event_expr@]</Template>
			</Container>
			<Container name="case_type">
				<Template name="Case">case</Template>
				<Template name="Case X">casex</Template>
				<Template name="Case Z">casez</Template>
			</Container>
			<Template name="another_case">&lt;%value%&gt; : [@statement@] </Template>
			<Template name="default_case">default : [@statement@]</Template>
			<Container name="tick_else_or_elsif">
				<Template name="tick_else"> `else [%construct%] </Template>
				<Template name="tick_elsif"> `elsif &lt;%def_name%&gt; [%construct%]
					[@tick_else_or_elsif@] </Template>
			<Template name="else_clause">else [@statement@]</Template>
			</Container>
			<Container name="time_units">
				<Template name="100 ns">100 ns</Template>
				<Template name="10 ns">10 ns</Template>
				<Template name="1 ns">1 ns</Template>
				<Template name="100 ps">100 ps</Template>
				<Template name="10 ps">10 ps</Template>
				<Template name="1 ps">1 ps</Template>
			</Container>
			<TclRef name="precision" ref="Verilog/Subtemplates/time_units"> </TclRef>
			<Template name="threshold">, &lt;%threshold%&gt;</Template>
			<Template name="notifier">, &lt;%notifier%&gt;</Template>
			<Template name="start_addr">, &lt;%start_addr%&gt;</Template>
			<Template name="finish_addr">, &lt;%finish_addr%&gt;</Template>
			<Template name="another_arg">, &lt;%arg%&gt; [@another_arg@]</Template>
			<Container name="transition_pair">
				<Template name="Transition from 0 to 1">01</Template>
				<Template name="Transition from 0 to x">0x</Template>
				<Template name="Transition from 1 to 0">10</Template>
				<Template name="Transition from 1 to x">1x</Template>
				<Template name="Transition from x to 0">x0</Template>
				<Template name="Transition from x to 1">x1</Template>
			</Container>
			<Template name="another_transition_pair">, [%transition_pair%]</Template>
			<Container name="reference_event">
				<Template name="posedge">posedge &lt;%name%&gt;</Template>
				<Template name="negedge">negedge &lt;%name%&gt;</Template>
				<Template name="edge">edge [ [@transition_pair@] [@another_transition_pair@] ]
					&lt;%name%&gt;</Template>
			</Container>
			<TclRef name="data_event" ref="Verilog/Subtemplates/reference_event"/>
			<Container name="array_type">
				<Template name="Sync">sync</Template>
				<Template name="Async">async</Template>
			</Container>
			<Container name="logic">
				<Template name="and">and</Template>
				<Template name="or">or</Template>
				<Template name="nand">nand</Template>
				<Template name="nor">nor</Template>
			</Container>
			<Container name="format">
				<Template name="Array">array</Template>
				<Template name="Plane">plane</Template>
			</Container>
			<Container name="display_type">
				<Container name="To Screen">
					<Template name="decimal">$display(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$displayb(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$displayh(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$displayo(&lt;%arg%&gt;
					[@another_arg@])</Template>
				</Container>
				<Container name="To File">
					<Template name="decimal">$fdisplay(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$fdisplayb(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$fdisplayh(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$fdisplayo(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
				</Container>
			</Container>
			<Container name="write_type">
				<Container name="To Screen">
					<Template name="decimal">$write(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$writeb(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$writeh(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$writeo(&lt;%arg%&gt; [@another_arg@])</Template>
				</Container>
				<Container name="To File">
					<Template name="decimal">$fwrite(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$fwriteb(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$fwriteh(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$fwriteo(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
				</Container>
			</Container>
			<Container name="monitor_type">
				<Container name="To Screen">
					<Template name="decimal">$monitor(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$monitorb(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$monitorh(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$monitoro(&lt;%arg%&gt;
					[@another_arg@])</Template>
				</Container>
				<Container name="To File">
					<Template name="decimal">$fmonitor(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$fmonitorb(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$fmonitorh(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$fmonitoro(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
				</Container>
			</Container>
			<Container name="strobe_type">
				<Container name="To Screen">
					<Template name="decimal">$strobe(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$strobeb(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$strobeh(&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$strobeo(&lt;%arg%&gt;
					[@another_arg@])</Template>
				</Container>
				<Container name="To File">
					<Template name="decimal">$fstrobe(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="binary">$fstrobeb(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="hex">$fstrobeh(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
					<Template name="octal">$fstrobeo(&lt;%file_descriptor%&gt;,
						&lt;%arg%&gt; [@another_arg@])</Template>
				</Container>
			</Container>
			<Container name="block_item_declaration">
				<TclRef name="Parameter" ref="Verilog/Subtemplates/Parameter"/>
				<TclRef name="Local Parameter" ref="Verilog/Subtemplates/Local Parameter"/>
				<TclRef name="Reg Declaration" ref="Verilog/Subtemplates/Reg Declaration"/>
				<TclRef name="Integer Declaration" ref="Verilog/Subtemplates/Integer Declaration"/>
				<TclRef name="Real Declaration" ref="Verilog/Subtemplates/Real Declaration"/>
				<TclRef name="Time Declaration" ref="Verilog/Subtemplates/Time Declaration"/>
				<TclRef name="Realtime Declaration" ref="Verilog/Subtemplates/Realtime Declaration"/>
				<TclRef name="Event Declaration" ref="Verilog/Subtemplates/Event Declaration"/>
			</Container>
		</Container>
	</Container>

	<!-- ### SystemC ### -->

	<Container name="SystemC">
		<Tcl name="New Design Wizard" icon="newdsn_image"
			>::HTE::Editor::srcWizard::OpenNewDesignWizard</Tcl>
		<Container name="Language Constructs" icon="template_image">
			<TclRef name="SC_MODULE" ref="SystemC/Subtemplates/SC_MODULE"/>
			<TclRef name="SC_METHOD" ref="SystemC/Subtemplates/SC_METHOD"/>
			<TclRef name="SC_THREAD" ref="SystemC/Subtemplates/SC_THREAD"/>
			<TclRef name="SC_CTHREAD" ref="SystemC/Subtemplates/SC_CTHREAD"/>
			<TclRef name="SC_MODULE_EXPORT" ref="SystemC/Subtemplates/SC_MODULE_EXPORT"/>
			<TclRef name="Declarations" ref="SystemC/Subtemplates/Declarations"/>
			<TclRef name="Tracing" ref="SystemC/Subtemplates/Tracing"/>
			<TclRef name="Statements" ref="SystemC/Subtemplates/Statements"/>
			<TclRef name="Compiler Directives" ref="SystemC/Subtemplates/Compiler Directives"/>
			<TclRef name="Simulation Control" ref="SystemC/Subtemplates/Simulation Control"/>
		</Container>

		<!-- ### Start of the Subtemplates Container -->
		<Container name="Subtemplates" hide="1">
			<Template name="SC_MODULE" hide="0">SC_MODULE(&lt;%module_name%&gt;) {
				[@port_kind@] &lt;%port_name%&gt;; [@another_port_declaration@]
				[@channel_kind@] &lt;%channel_name%&gt;; [@another_channel_declaration@]
				[@var_type@] &lt;%var_name%&gt;; [@another_var_declaration@]
				SC_CTOR(&lt;%module_name%&gt;) { } // Destructor
				~&lt;%module_name%&gt;() { } }; </Template>

			<Template name="SC_METHOD" hide="0">SC_METHOD(&lt;%method_name%&gt;); </Template>

			<Template name="SC_THREAD" hide="0">SC_THREAD(&lt;%thread_name%&gt;); </Template>

			<Template name="SC_CTHREAD" hide="0">SC_CTHREAD(&lt;%cthread_name%&gt;); </Template>

			<Template name="SC_MODULE_EXPORT" hide="0"
				>SC_MODULE_EXPORT(&lt;%module_name%&gt;); </Template>

			<Container name="Declarations">
				<TclRef name="Port Declaration" ref="SystemC/Subtemplates/port declaration"/>
				<TclRef name="Channel Declaration" ref="SystemC/Subtemplates/channel declaration"/>
				<TclRef name="Variable Declaration" ref="SystemC/Subtemplates/variable declaration"/>
				<TclRef name="Event Declaration" ref="SystemC/Subtemplates/event declaration"/>
				<TclRef name="Function Declaration" ref="SystemC/Subtemplates/function declaration"/>
				<TclRef name="Type Declaration" ref="SystemC/Subtemplates/type declarations"/>
			</Container>
			<Template name="port declaration">[@port_kind@] &lt;%port_name%&gt;;
				[@another_port_declaration@] </Template>

			<Template name="channel declaration">[@channel_kind@] &lt;%channel_name%&gt;;
				[@another_channel_declaration@] </Template>

			<Template name="variable declaration">[@var_type@] &lt;%var_name%&gt;;
				[@another_var_declaration@] </Template>

			<Template name="event declaration">sc_event &lt;%event_name%&gt;;
				[@another_event_declaration@] </Template>

			<Template name="function declaration">[@function_type@]
				&lt;%function_name%&gt;(&lt;%function_parameters%&gt;) { } </Template>
			<Template name="type declarations">[@type_declaration@] [@another_type_declaration@] </Template>

			<Container name="port_kind">
				<Template name="sc_in&lt;T&gt;" hide="0">sc_in &lt;[@port_type@]
					&gt;</Template>
				<Template name="sc_out&lt;T&gt;" hide="0">sc_out &lt;[@port_type@]
					&gt;</Template>
				<Template name="sc_inout&lt;T&gt;" hide="0">sc_inout &lt;[@port_type@]
					&gt;</Template>
				<Template name="sc_in_clk" hide="0">sc_in_clk&lt;[@port_type@] &gt;</Template>
				<Template name="sc_out_clk" hide="0">sc_out_clk&lt;[@port_type@] &gt;</Template>
				<Template name="sc_inout_clk" hide="0">sc_inout_clk&lt;[@port_type@] &gt;</Template>
				<Template name="sc_fifo_in&lt;T&gt;" hide="0">sc_fifo_in
					&lt;[@port_type@] &gt;</Template>
				<Template name="sc_fifo_out&lt;T&gt;" hide="0">sc_fifo_out
					&lt;[@port_type@] &gt;</Template>
				<Template name="sc_in_resolved" hide="0">sc_in_resolved&lt;[@port_type@]
					&gt;</Template>
				<Template name="sc_inout_resolved" hide="0">sc_inout_resolved&lt;[@port_type@]
					&gt;</Template>
				<Template name="sc_out_resolved" hide="0">sc_out_resolved&lt;[@port_type@]
					&gt;</Template>
				<Template name="sc_in_rv&lt;W&gt;" hide="0"
					>sc_in_rv&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_inout_rv&lt;W&gt;" hide="0"
					>sc_inout_rv&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_out_rv&lt;W&gt;" hide="0"
					>sc_out_rv&lt;&lt;%WIDTH%&gt;&gt;</Template>
			</Container>

			<Container name="port_type">
				<Template name="sc_bit">sc_bit</Template>
				<Template name="sc_logic">sc_logic</Template>
				<Template name="bool">bool</Template>
				<Template name="int">int</Template>
				<Template name="unsigned int">unsigned int</Template>
				<Template name="long">long</Template>
				<Template name="unsigned long">unsigned long</Template>
				<Template name="char">char</Template>
				<Template name="unsigned char">unsigned char</Template>
				<Template name="short">short</Template>
				<Template name="unsigned short">unsigned short</Template>
				<Template name="long long">long long</Template>
				<Template name="unsigned long long">unsigned long long</Template>
				<Template name="float">float</Template>
				<Template name="double">double</Template>
				<Template name="pointer">pointer</Template>
				<Template name="sc_bit&lt;W&gt;"
					>sc_bit&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_lv&lt;W&gt;">sc_lv&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_int&lt;W&gt;"
					>sc_int&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_unint&lt;W&gt;"
					>sc_unint&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_bigint&lt;W&gt;"
					>sc_bigint&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_biguint&lt;W&gt;"
					>sc_biguint&lt;&lt;%WIDTH%&gt;&gt;</Template>
			</Container>

			<Container name="channel_kind">
				<Template name="sc_signal&lt;T&gt;" hide="0"
					>sc_signal&lt;[@channel_type@]&gt;</Template>
				<Template name="sc_signal_resolved" hide="0">sc_signal_resolved</Template>
				<Template name="sc_signal_rv&lt;W&gt;" hide="0"
					>sc_signal_rv&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_fifo&lt;T&gt;" hide="0"
					>sc_fifo&lt;[@channel_type@]&gt;</Template>
				<Template name="sc_buffer&lt;T&gt;" hide="0"
					>sc_buffer&lt;[@channel_type@]&gt;</Template>
				<Template name="sc_semaphore&lt;T&gt;" hide="0"
					>sc_semaphore&lt;[@channel_type@]&gt;</Template>
				<Template name="sc_mutex&lt;T&gt;" hide="0"
					>sc_mutex&lt;[@channel_type@]&gt;</Template>
			</Container>

			<Container name="channel_type">
				<Template name="sc_bit">sc_bit</Template>
				<Template name="sc_logic">sc_logic</Template>
				<Template name="bool">bool</Template>
				<Template name="int">int</Template>
				<Template name="unsigned int">unsigned int</Template>
				<Template name="long">long</Template>
				<Template name="unsigned long">unsigned long</Template>
				<Template name="char">char</Template>
				<Template name="unsigned char">unsigned char</Template>
				<Template name="short">short</Template>
				<Template name="unsigned short">unsigned short</Template>
				<Template name="long long">long long</Template>
				<Template name="unsigned long long">unsigned long long</Template>
				<Template name="float">float</Template>
				<Template name="double">double</Template>
				<Template name="pointer">pointer</Template>
				<Template name="sc_bit&lt;W&gt;"
					>sc_bit&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_lv&lt;W&gt;">sc_lv&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_int&lt;W&gt;"
					>sc_int&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_unint&lt;W&gt;"
					>sc_unint&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_bigint&lt;W&gt;"
					>sc_bigint&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_biguint&lt;W&gt;"
					>sc_biguint&lt;&lt;%WIDTH%&gt;&gt;</Template>
			</Container>

			<Container name="var_type">
				<Template name="sc_bit">sc_bit</Template>
				<Template name="sc_logic">sc_logic</Template>
				<Template name="bool">bool</Template>
				<Template name="int">int</Template>
				<Template name="unsigned int">unsigned int</Template>
				<Template name="long">long</Template>
				<Template name="unsigned long">unsigned long</Template>
				<Template name="char">char</Template>
				<Template name="unsigned char">unsigned char</Template>
				<Template name="short">short</Template>
				<Template name="unsigned short">unsigned short</Template>
				<Template name="long long">long long</Template>
				<Template name="unsigned long long">unsigned long long</Template>
				<Template name="float">float</Template>
				<Template name="double">double</Template>
				<Template name="pointer">pointer</Template>
				<Template name="sc_fixed">sc_fixed</Template>
				<Template name="sc_ufixed">sc_ufixed</Template>
				<Template name="sc_fix">sc_fix</Template>
				<Template name="sc_ufix">sc_ufix</Template>
				<Template name="sc_fixed_fast">sc_fixed_fast</Template>
				<Template name="sc_ufixed_fast">sc_ufixed_fast</Template>
				<Template name="sc_fix_fast">sc_fix_fast</Template>
				<Template name="sc_ufix_fast">sc_ufix_fast</Template>
				<Template name="sc_bit&lt;W&gt;"
					>sc_bit&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_lv&lt;W&gt;">sc_lv&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_int&lt;W&gt;"
					>sc_int&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_unint&lt;W&gt;"
					>sc_unint&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_bigint&lt;W&gt;"
					>sc_bigint&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_biguint&lt;W&gt;"
					>sc_biguint&lt;&lt;%WIDTH%&gt;&gt;</Template>
			</Container>

			<Container name="function_type">
				<Template name="return function">[@function_return_type@]</Template>
				<Template name="inline function" hide="0">inline [@function_return_type@]</Template>
				<Template name="static function" hide="0">static [@function_return_type@]</Template>
			</Container>

			<Container name="function_return_type">
				<Template name="sc_bit">sc_bit</Template>
				<Template name="sc_logic">sc_logic</Template>
				<Template name="bool">bool</Template>
				<Template name="int">int</Template>
				<Template name="unsigned int">unsigned int</Template>
				<Template name="long">long</Template>
				<Template name="unsigned long">unsigned long</Template>
				<Template name="char">char</Template>
				<Template name="unsigned char">unsigned char</Template>
				<Template name="short">short</Template>
				<Template name="unsigned short">unsigned short</Template>
				<Template name="long long">long long</Template>
				<Template name="unsigned long long">unsigned long long</Template>
				<Template name="float">float</Template>
				<Template name="double">double</Template>
				<Template name="pointer">pointer</Template>
				<Template name="sc_bit&lt;W&gt;"
					>sc_bit&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_lv&lt;W&gt;">sc_lv&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_int&lt;W&gt;"
					>sc_int&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_unint&lt;W&gt;"
					>sc_unint&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_bigint&lt;W&gt;"
					>sc_bigint&lt;&lt;%WIDTH%&gt;&gt;</Template>
				<Template name="sc_biguint&lt;W&gt;"
					>sc_biguint&lt;&lt;%WIDTH%&gt;&gt;</Template>
			</Container>

			<Container name="type_declaration">
				<Template name="struct" hide="0">struct &lt;%struct_name%&gt; { // Members
					of the struct };[@another_struct_declaration@] </Template>

				<Template name="enum" hide="0">enum &lt;%var_name%&gt;
					{...};[@another_enum_declaration@]</Template>

				<Template name="class" hide="0">class &lt;%class_name%&gt; { // Members of
					the class private: public:
					&lt;%class_name%&gt;(&lt;%constructor_parameters%&gt;);
					~&lt;%class_name%&gt;(); };[@another_class_declaration@]</Template>

				<Template name="union" hide="0">union &lt;%union_name%&gt; {
					};[@another_union_declaration@]</Template>

				<Template name="array">[@var_type@] &lt;%var_name%&gt;
					[];[@another_array_declaration@]</Template>

				<Template name="typedef" hide="0">typedef [@var_type@]
					&lt;%var_name%&gt;;[@another_typedef_declaration@]</Template>
			</Container>

			<!-- Start Tracing Container-->
			<Container name="Tracing">
				<TclRef name="sc_trace" ref="SystemC/Subtemplates/sc trace"/>
			</Container>
			<Template name="sc trace">[@sc_trace_types@] </Template>

			<!-- End Tracing Container -->

			<!-- Start Statements Container -->
			<Container name="Statements">
				<TclRef name="if" ref="SystemC/Subtemplates/if"/>
				<TclRef name="switch-case" ref="SystemC/Subtemplates/switch-case"/>
				<TclRef name="for" ref="SystemC/Subtemplates/for"/>
				<TclRef name="while" ref="SystemC/Subtemplates/while"/>
				<TclRef name="do while" ref="SystemC/Subtemplates/do while"/>
				<TclRef name="wait" ref="SystemC/Subtemplates/wait"/>
				<TclRef name="sensitive" ref="SystemC/Subtemplates/sensitive"/>
				<TclRef name="notify" ref="SystemC/Subtemplates/notify"/>
				<TclRef name="cancel" ref="SystemC/Subtemplates/cancel"/>
				<TclRef name="notify_delayed" ref="SystemC/Subtemplates/notify_delayed"/>
				<TclRef name="return" ref="SystemC/Subtemplates/return"/>
				<TclRef name="continue" ref="SystemC/Subtemplates/continue"/>
				<TclRef name="exit" ref="SystemC/Subtemplates/exit"/>
				<TclRef name="assert" ref="SystemC/Subtemplates/assert"/>
			</Container>
			<Template name="if" hide="0">if (&lt;%if_expression%&gt;) { // statements
				[@else_if_statement@] [@else_statement@] </Template>

			<Template name="switch-case" hide="0">switch (&lt;%expression%&gt;) { case
				&lt;%choice%&gt;: // expression break; [@another_case_statement@]
				[@default_case_statement@] } </Template>

			<Template name="for" hide="0">for
				(&lt;%initialization%&gt;;&lt;%test_condition%&gt;;&lt;%change_or_update%&gt;)
				{ // statements } </Template>
			<Template name="while" hide="0">while (&lt;%expression%&gt;) { // statements } </Template>
			<Template name="do while" hide="0">do { // statements } while
				(&lt;%expression%&gt;) </Template>

			<Template name="wait">[@wait_types@] </Template>

			<Template name="sensitive">[@sensitive_types@] </Template>

			<Template name="notify">[@notify_types@] </Template>

			<Template name="cancel" hide="0">&lt;%event%&gt;.cancel(); </Template>

			<Template name="notify_delayed" hide="0">&lt;%event%&gt;.notify_delayed(); </Template>

			<Template name="return" hide="0">return(&lt;%return_value%&gt;); </Template>

			<Template name="continue" hide="0">continue; </Template>

			<Template name="exit" hide="0">exit(&lt;%exit_value%&gt;); </Template>

			<Template name="assert" hide="0">assert(&lt;%assert_condition%&gt;); </Template>
			<!-- End Statements Container -->

			<Container name="wait_types">
				<Template name="wait()" hide="0">wait();</Template>
				<Template name="wait(event)" hide="0">wait(&lt;%event%&gt;);</Template>
				<Template name="wait(event list)" hide="0">wait(&lt;%event_list%&gt;);</Template>
				<Template name="wait(time value, time unit)" hide="0"
					>wait(&lt;%time_value%&gt;[@time_units@]);</Template>
			</Container>

			<Container name="sensitive_types">
				<Template name="sensitive(sensitivity list)" hide="0"
					>sensitive(&lt;%sensitivity_list%&gt;);</Template>
				<Template name="sensitive &lt;&lt; sensitivity list" hide="0">sensitive
					&lt;&lt; &lt;%sensitivity_list%&gt;;</Template>
			</Container>

			<Container name="notify_types">
				<Template name="event.notify()" hide="0">&lt;%event%&gt;.notify();</Template>
				<Template name="event.notify(time value, time unit)" hide="0"
					>&lt;%event%&gt;.notify(&lt;%time_value%&gt;[@time_units@]);</Template>
			</Container>

			<Template name="else_if_statement" hide="0">} else if
				(&lt;%else_if_expression%&gt;) { // statements [@another_else_if_statement@] </Template>

			<Template name="else_statement" hide="0">} else { // statements } </Template>

			<Template name="default_case_statement" hide="0"> default: // statements break; </Template>

			<!-- Start Compiler Directives Container -->
			<Container name="Compiler Directives">
				<TclRef name="#include" ref="SystemC/Subtemplates/#include"/>
				<TclRef name="#define" ref="SystemC/Subtemplates/#define"/>
				<TclRef name="#if" ref="SystemC/Subtemplates/#if"/>
				<TclRef name="#ifndef" ref="SystemC/Subtemplates/#ifndef"/>
				<TclRef name="#ifdef" ref="SystemC/Subtemplates/#ifdef"/>
				<TclRef name="#ifdefined" ref="SystemC/Subtemplates/#ifdefined"/>
			</Container>
			<Template name="#include">[@include_statement@] [@another_include_statement@] </Template>

			<Template name="#define">#define &lt;%var_name%&gt; &lt;%value%&gt; </Template>

			<Template name="#if">#if &lt;%expression%&gt; </Template>

			<Template name="#ifndef">#ifndef &lt;%expression%&gt; // statements
				[@else_definition@] #endif </Template>

			<Template name="#ifdef">#ifdef &lt;%expression%&gt; // statements
				[@else_definition@] #endif </Template>

			<Template name="#ifdefined">#ifdefined (&lt;%expression%&gt;) // statements
				[@else_definition@] #endif </Template>

			<!-- End Compiler Directives Container -->
			<!-- Start Simulation Control Container -->
			<Container name="Simulation Control">
				<TclRef name="sc_clock" ref="SystemC/Subtemplates/sc_clock"/>
				<TclRef name="sc_stop" ref="SystemC/Subtemplates/sc_stop"/>
				<TclRef name="sc_time_stamp" ref="SystemC/Subtemplates/sc_time_stamp"/>
				<TclRef name="sc_time" ref="SystemC/Subtemplates/sc_time"/>
			</Container>
			<Template name="sc_clock">[@sc_clock_types@] </Template>

			<Template name="sc_stop" hide="0">sc_stop() </Template>

			<Template name="sc_time_stamp" hide="0">sc_time_stamp() </Template>

			<Template name="sc_simulation_time" hide="0">sc_simulation_time() </Template>

			<Template name="sc_time" hide="0">sc_time &lt;%time_variable%&gt;
				(&lt;%time_value%&gt;, [@time_units@]); </Template>
			<!-- End Simulation Control Container -->
			<Container name="include_statement">
				<Template name="#include&lt;file&gt;"
					>#include&lt;&lt;%file%&gt;&gt; </Template>
				<Template name="#include &quot;file&quot;">#include "&lt;%file%&gt;"
				</Template>
			</Container>

			<Template name="else_definition">#else // statements</Template>

			<Container name="sc_clock_types">
				<Template name="sc_clock clock_var(&quot;clock_var&quot;)">sc_clock
					&lt;%clock_var%&gt;("&lt;%clock_var%&gt;");</Template>
				<Template name="sc_clock clock_var(&quot;clock_var&quot;, time_period, time_unit)"
					>sc_clock &lt;%clock_var%&gt;("&lt;%clock_var%&gt;",
					&lt;%time_period%&gt;, [@time_units@]);</Template>
				<Template
					name="sc_clock clock_var(&quot;clock_var&quot;, time_period, time_unit, %duty_cycle, first edge occurance after time period, time_unit, true|false)"
					>sc_clock &lt;%clock_var%&gt;("&lt;%clock_var%&gt;",
					&lt;%time_period%&gt;, [@time_units@],
					&lt;%percent_duty_cycle%&gt;,
					&lt;%first_edge_occurance_after_time_period%&gt;, [@time_units@],
					&lt;%true_or_false%&gt;);</Template>
			</Container>

			<Container name="time_units">
				<Template name="SC_FS">SC_FS</Template>
				<Template name="SC_PS">SC_PS</Template>
				<Template name="SC_NS">SC_NS</Template>
				<Template name="SC_US">SC_US</Template>
				<Template name="SC_MS">SC_MS</Template>
				<Template name="SC_SEC">SC_SEC</Template>
			</Container>

			<Container name="sc_trace_types">
				<Template name="Create VCD trace file" hide="0">sc_trace_file
					*&lt;%pointer_to_trace_file%&gt; =
					sc_create_vcd_trace_file("&lt;%vcd_dump_file%&gt;");</Template>
				<Template name="Close VCD trace file" hide="0"
					>sc_close_vcd_trace_file(&lt;%pointer_to_trace_file%&gt;);</Template>
				<Template name="Create WIF trace file" hide="0">sc_trace_file
					*&lt;%pointer_to_trace_file%&gt; =
					sc_create_wif_trace_file("&lt;%wif_dump_file%&gt;");</Template>
				<Template name="Close WIF trace file" hide="0"
					>sc_close_wif_trace_file(&lt;%pointer_to_trace_file%&gt;);</Template>
				<Template name="Create ISDB trace file" hide="0">sc_trace_file
					*&lt;%pointer_to_trace_file%&gt; =
					sc_create_isdb_trace_file("&lt;%isdb_dump_file%&gt;");</Template>
				<Template name="Close ISDB trace file" hide="0"
					>sc_close_isdb_trace_file(&lt;%pointer_to_trace_file%&gt;);</Template>
				<Template
					name="Function call-sc_trace(pointer_to_trace_file, signal_name, &quot;signal_name&quot;)"
					hide="0">sc_trace(&lt;%pointer_to_trace_file%&gt;,
					&lt;%signal_name%&gt;, "&lt;%signal_name%&gt;");</Template>
			</Container>

			<!-- Another declarations for SystemC start here -->
			<Template name="another_port_declaration"> [@port_kind@] &lt;%port_name%&gt;;
				[@another_port_declaration@] </Template>
			<Template name="another_channel_declaration"> [@channel_kind@]
				&lt;%channel_name%&gt;; [@another_channel_declaration@] </Template>
			<Template name="another_var_declaration"> [@var_type@] &lt;%var_name%&gt;;
				[@another_var_declaration@] </Template>
			<Template name="another_event_declaration"> sc_event &lt;%event_name%&gt;;
				[@another_event_declaration@] </Template>
			<Template name="another_case_statement"> case &lt;%choice%&gt;: // expression
				break; [@another_case_statement@] </Template>
			<Template name="another_include_statement"> [@include_statement@]
				[@another_include_statement@] </Template>

			<Template name="another_else_if_statement">} else if
				(&lt;%else_if_expression%&gt;) { // statements [@another_else_if_statement@]</Template>

			<Template name="another_struct_declaration"> struct &lt;%struct_name%&gt; { //
				Members of the struct };[@another_struct_declaration@]</Template>

			<Template name="another_enum_declaration"> enum &lt;%var_name%&gt;
				{...};[@another_enum_declaration@]</Template>

			<Template name="another_class_declaration"> class &lt;%class_name%&gt; { //
				Members of the class private: public:
				&lt;%class_name%&gt;(&lt;%constructor_parameters%&gt;);
				~&lt;%class_name%&gt;(); };[@another_class_declaration@]</Template>

			<Template name="another_union_declaration"> union &lt;%union_name%&gt; {
				};[@another_union_declaration@]</Template>

			<Template name="another_array_declaration"> [@var_type@] &lt;%var_name%&gt;
				[];[@another_array_declaration@]</Template>

			<Template name="another_typedef_declaration"> typedef [@var_type@]
				&lt;%var_name%&gt;;[@another_typedef_declaration@]</Template>

			<Template name="another_type_declaration"> [@type_declaration@]
				[@another_type_declaration@]</Template>

			<!-- Another declarations for SystemC end here -->

			<!-- ### End of the Subtemplates Container -->
		</Container>
		<!-- ### End of the SystemC Container -->
	</Container>

	<!-- ### THE NEXT LANGUAGE ### -->

<!-- ### SystemVerilog ### -->

<Container name="SystemVerilog">
	<Tcl name="New Design Wizard" icon="newdsn_image">::HTE::Editor::srcWizard::OpenNewDesignWizard</Tcl>
	<Tcl name="Create Testbench" icon="newdsn_image">::HTE::Editor::srcWizard::CreateTestbenchWizard</Tcl>
	<Container name="Language Constructs" icon="template_image">
		<TclRef name="Module" icon="module_image" ref="SystemVerilog/Subtemplates/Module"/>
		<TclRef name="Primitive" icon="udp_image" ref="SystemVerilog/Subtemplates/Primitive"/>
		<TclRef name="Interface" icon="udp_image" ref="SystemVerilog/Subtemplates/Interface Declaration"/>
		<TclRef name="Package" icon="udp_image" ref="SystemVerilog/Subtemplates/Package Declaration"/>
		<TclRef name="Program" icon="udp_image" ref="SystemVerilog/Subtemplates/Program Declaration"/>
		<TclRef name="Declarations" icon="declaration_image" ref="SystemVerilog/Subtemplates/Declarations"/>
		<TclRef name="Statements" icon="statement_image" ref="SystemVerilog/Subtemplates/Statements"/>
		<TclRef name="Instantiations" icon="Instance" ref="SystemVerilog/Subtemplates/Instantiations"/>
		<TclRef name="Compiler Directives" ref="SystemVerilog/Subtemplates/Compiler Directives"/>
		<TclRef name="Blocks" icon="blocks_image" ref="SystemVerilog/Subtemplates/Blocks"/>
		<TclRef name="System Tasks and Functions" icon="statement_image" ref="SystemVerilog/Subtemplates/System Tasks and Functions"/>
	</Container>

	<Container name="Stimulus Generators" icon="stimulus_image">
		<Tcl name="Clock" icon="clock_image">::HTE::Editor::srcWizard::OpenClockWizard</Tcl>
		<Tcl name="Counter" icon="count_image">::HTE::Editor::srcWizard::OpenCountWizard</Tcl>
		<Tcl name="Stop Simulation" icon="stop_image">::HTE::Editor::srcWizard::OpenStopWizard</Tcl>
	</Container>


	<Container name="Subtemplates" hide="1">
		<Template name="Module">
module &lt;%module_name%&gt; [@list_of_ansi_params@] [@list_of_ansi_ports@];

[%module_item%]

endmodule
</Template>
		<Template name="Primitive">
primitive &lt;%primitive_name%&gt; [@list_of_ansi_ports@];
[%Port_Declaration%]
[@udp_body@]
endprimitive
</Template>

		<Container name="Declarations">
			<TclRef name="Parameter" icon="VerilogParameterDecl" ref="SystemVerilog/Subtemplates/Parameter"/>
			<Container name="Port Declaration" icon="declaration_image">
				<TclRef name="Input Declaration" icon="PortIn" ref="SystemVerilog/Subtemplates/Input Declaration"/>
				<TclRef name="Output Declaration" icon="PortOut" ref="SystemVerilog/Subtemplates/Output Declaration"/>
				<TclRef name="Inout Declaration" icon="PortIO" ref="SystemVerilog/Subtemplates/Inout Declaration"/>
			</Container>
			<Container name="Data Declaration" icon="declaration_image">
				<TclRef name="Variable Declaration" icon="declaration_image" ref="SystemVerilog/Subtemplates/Variable Declaration"/>
				<TclRef name="Type Declaration" icon="declaration_image" ref="SystemVerilog/Subtemplates/Type Declaration"/>
				<TclRef name="Package Import Declaration" icon="declaration_image" ref="SystemVerilog/Subtemplates/Package Import Declaration"/>
				<TclRef name="Virtual Interface Declaration" icon="declaration_image" ref="SystemVerilog/Subtemplates/Virtual Interface Declaration"/>
			</Container>
			<TclRef name="Local Parameter" icon="declaration_image" ref="SystemVerilog/Subtemplates/Local Parameter"/>
			<TclRef name="Generate Variable" icon="declaration_image" ref="SystemVerilog/Subtemplates/Generate Variable"/>
			<TclRef name="Net Declaration" icon="declaration_image" ref="SystemVerilog/Subtemplates/Net Declaration"/>
			<TclRef name="Task Declaration" icon="declaration_image" ref="SystemVerilog/Subtemplates/Task Declaration"/>
			<TclRef name="Function Declaration" icon="declaration_image" ref="SystemVerilog/Subtemplates/Function Declaration"/>
			<TclRef name="Class Declaration" icon="declaration_image" ref="SystemVerilog/Subtemplates/Class Declaration"/>
		</Container>
		<Template name="Variable Declaration">[@const@] [@lifetime@] [@data_type@] &lt;%var_name%&gt; [@range@] [@initial_value@] [@another_var@];
</Template>
		<Container name="data_type">
			<TclRef name="Integer Vector Type" ref="SystemVerilog/Subtemplates/Integer Vector"> </TclRef>
			<TclRef name="Integer Atom Type" ref="SystemVerilog/Subtemplates/Integer Atom"> </TclRef>
			<TclRef name="Real Type" ref="SystemVerilog/Subtemplates/Real"> </TclRef>
			<TclRef name="Structure Type" ref="SystemVerilog/Subtemplates/Structure"> </TclRef>
			<TclRef name="Union Type" ref="SystemVerilog/Subtemplates/Union"> </TclRef>
			<TclRef name="Enum Type" ref="SystemVerilog/Subtemplates/Enum"> </TclRef>
			<TclRef name="String Type" ref="SystemVerilog/Subtemplates/String"> </TclRef>
			<TclRef name="Chandle Type" ref="SystemVerilog/Subtemplates/Chandle"> </TclRef>
			<TclRef name="Virtual Interface Type" ref="SystemVerilog/Subtemplates/Virtual Interface"> </TclRef>
			<TclRef name="Event Type" ref="SystemVerilog/Subtemplates/Event"> </TclRef>
		</Container>
		<Template name="Type Declaration">typedef &lt;%type_identifier%&gt; [@range@];
</Template>
		<Template name="Package Import Declaration">import [@package_import_item@] [@another_package_import_item@];
</Template>
		<Template name="Virtual Interface Declaration">virtual [@interface@] &lt;%interface_ident%&gt; [@list_virtual_interface_decl@];
</Template>
		<Template name="Input Declaration">input [@range@] &lt;%input_name%&gt;;
</Template>
		<Template name="Output Declaration">output [@range@] &lt;%output_name%&gt;;
</Template>
		<Template name="Inout Declaration">inout [@range@] &lt;%inout_name%&gt;;
</Template>
		<Template name="Parameter">parameter [@data_type@] &lt;%param_name%&gt; = &lt;%value%&gt; [@another_param@];
</Template>
		<Template name="Local Parameter">localparam [@data_type@] &lt;%localparam_name%&gt; = &lt;%value%&gt; [@another_localparam@];
</Template>
		<Template name="Generate Variable">genvar &lt;%genvar_name%&gt; [@another_genvar@];
</Template>
		<Template name="Net Declaration">[@net_type@] [@drive_or_charge_strength@] [@vectord_scalared@] [@signing@] [@range@] &lt;%net_name%&gt; [@another_net@];
</Template>
		<Template name="Integer Vector">[@integerv@] [@signing@] [@range@] </Template>
		<Template name="Integer Atom">[@integer@] [@signing@] </Template>
		<Template name="Real">[@real@] </Template>
		<Template name="Structure">struct [@packed_signing@] {
[%struct_union_member%]
} [@range@] </Template>
		<Template name="Union">union [@tagged@] [@packed_signing@] {
[%struct_union_member%]
} [@range@] </Template>
		<Template name="struct_union_member">[@data_type_or_void@] &lt;%var_name%&gt; [@range@] [@another_var_ident@];</Template>
		<Template name="Event">event</Template>
		<Template name="String">string</Template>
		<Template name="Chandle">chandle</Template>
		<Template name="Virtual Interface">virtual [@interface@] &lt;%interface_ident%&gt;</Template>
		<Template name="Enum">enum &lt;%enum_base_type%&gt; {&lt;%enum_name_decl%&gt; [@another_enum_name_decl@]} </Template>
		<Template name="package_import_item"> &lt;%package_ident%&gt;::[@ident_or_*@] </Template>
		<Template name="Package Declaration">[@attribute_instance@] package &lt;%package_identifier%&gt;
[%package_item%]
endpackage
</Template>
		<Template name="Program Declaration">[@attribute_instance@] program [@lifetime@] &lt;%program_identifier%&gt; [@list_of_ansi_params@] [@list_of_ansi_ports@];
[%program_item%]
endprogram
</Template>
		<Template name="Interface Declaration">[@attribute_instance@] interface [@lifetime@] &lt;%interface_identifier%&gt; [@list_of_ansi_params@] [@list_of_ansi_ports@];
[%interface_item%]
endclass
</Template>
		<Template name="Class Declaration">[@virtual@] class [@lifetime@] &lt;%class_identifier%&gt; [@list_of_ansi_params@] [@extends class_type@];
[%class_item%]
endclass
</Template>
		<Template name="Task Declaration">
task [@lifetime@] &lt;%task_name%&gt; [@list_of_ansi_ports@];
[%task_item_declaration%]
[%statement%]
endtask
</Template>
		<Template name="Function Declaration">
function [@lifetime@] [@data_type_or_void@] &lt;%function_name%&gt; [@list_of_ansi_ports@];
[%function_item_declaration%]
[%statement%]
&lt;%function_name%&gt; = &lt;%expression%&gt;;
endfunction
</Template>
		<Container name="Statements">
			<TclRef name="Begin-End Block" icon="statement_image" ref="SystemVerilog/Subtemplates/Begin-End Block"/>
			<Container name="Assignment Statement" icon="statement_image">
				<TclRef name="Blocking Assignment" icon="statement_image" ref="SystemVerilog/Subtemplates/Blocking Assignment"/>
				<TclRef name="Non-Blocking Assignment" icon="statement_image" ref="SystemVerilog/Subtemplates/Non-Blocking Assignment"/>
				<Container name="Procedural Continuous Statement" icon="statement_image">
					<TclRef name="assign" icon="statement_image" ref="SystemVerilog/Subtemplates/assign"/>
					<TclRef name="deassign" icon="statement_image" ref="SystemVerilog/Subtemplates/deassign"/>
					<TclRef name="force" icon="statement_image" ref="SystemVerilog/Subtemplates/force"/>
					<TclRef name="release" icon="statement_image" ref="SystemVerilog/Subtemplates/release"/>
				</Container>
			</Container>
			<TclRef name="Repeat" icon="statement_image" ref="SystemVerilog/Subtemplates/Repeat"/>
			<TclRef name="Forever" icon="statement_image" ref="SystemVerilog/Subtemplates/Forever"/>
			<TclRef name="For" icon="statement_image" ref="SystemVerilog/Subtemplates/For"/>
			<TclRef name="While" icon="statement_image" ref="SystemVerilog/Subtemplates/While"/>
			<TclRef name="Do" icon="statement_image" ref="SystemVerilog/Subtemplates/Do"/>
			<Container name="Jump" icon="statement_image">
					<TclRef name="return" icon="statement_image" ref="SystemVerilog/Subtemplates/return"/>
					<TclRef name="break" icon="statement_image" ref="SystemVerilog/Subtemplates/break"/>
					<TclRef name="continue" icon="statement_image" ref="SystemVerilog/Subtemplates/continue"/>
 			</Container>
			<TclRef name="If" icon="statement_image" ref="SystemVerilog/Subtemplates/If"/>
			<TclRef name="Case" icon="statement_image" ref="SystemVerilog/Subtemplates/Case"/>
			<TclRef name="Fork-Join Block" icon="statement_image" ref="SystemVerilog/Subtemplates/Fork-Join Block"/>
			<TclRef name="Named Begin-End Block" icon="statement_image" ref="SystemVerilog/Subtemplates/Named Begin-End Block"/>
			<TclRef name="Named Fork-Join Block" icon="statement_image" ref="SystemVerilog/Subtemplates/Named Fork-Join Block"/>
		</Container>
		<Template name="Begin-End Block">begin
[%statement%]
end
</Template>
		<Template name="return">return &lt;%expression%&gt;;
</Template>
		<Template name="break">break;
</Template>
		<Template name="continue">continue;
</Template>
		<Template name="Blocking Assignment">&lt;%reg_var%&gt; = [@delay_or_event_control@] &lt;%expression%&gt; ;
</Template>
		<Template name="Non-Blocking Assignment">&lt;%reg_var%&gt; &lt;= [@delay_or_event_control@] &lt;%expression%&gt; ;
</Template>
		<Template name="assign">assign &lt;%reg_var%&gt; = &lt;%expression%&gt; ;
</Template>
		<Template name="deassign">deassign &lt;%reg_var%&gt;;
</Template>
		<Template name="force">force &lt;%reg_var%&gt; = &lt;%expression%&gt; ;
</Template>
		<Template name="release">release &lt;%reg_var%&gt;;
</Template>
		<Template name="Repeat">repeat (&lt;%count%&gt;) [@statement@]
</Template>
		<Template name="Forever">forever [@statement@]
</Template>
		<Template name="While">while (&lt;%expression%&gt;) [@statement@]
</Template>
		<Template name="Do">do [@statement@] while (&lt;%expression%&gt;);
</Template>
		<Template name="For">for (&lt;%for_initialization%&gt; ; &lt;%expression%&gt; ; &lt;%for_step%&gt;) [@statement@]
</Template>
		<Template name="Foreach">forach (&lt;%array_identifier%&gt;[&lt;%loop_variables%&gt;]) [@statement@]
</Template>
		<Template name="If">if ( &lt;%condition%&gt; ) [@statement@] 
[@else_clause@]
</Template>
		<Template name="Case">[@case_type@] ( &lt;%expression%&gt; )
[%case_item%]
[@default_case@]
endcase
</Template>
		<Template name="Fork-Join Block">fork
[%statement%]
join
</Template>
		<Template name="Named Begin-End Block">begin: &lt;%blockname%&gt;
[%block_item_declaration%]
[%statement%]
end
</Template>
		<Template name="Named Fork-Join Block">fork: &lt;%blockname%&gt;
[%block_item_declaration%]
[%statement%]
join
</Template>

		<Container name="Instantiations">
			<TclRef name="Module" icon="VerilogModule" ref="SystemVerilog/Subtemplates/module_instantiation"/>
			<TclRef name="Gate" icon="Instance" ref="SystemVerilog/Subtemplates/gate_instantiation"/>
			<TclRef name="Generated" icon="Instance" ref="SystemVerilog/Subtemplates/generated_instantiation"/>
			<TclRef name="Interface" icon="Instance" ref="SystemVerilog/Subtemplates/interface_instantiation"/>
			<TclRef name="Program" icon="Instance" ref="SystemVerilog/Subtemplates/program_instantiation"/>
		</Container>
		<Template name="module_instantiation">&lt;%module_name%&gt; [@parameter_value_assignment@] [@hier_instance@];
</Template>
		<Template name="interface_instantiation">&lt;%interface_name%&gt; [@parameter_value_assignment@] [@hier_instance@];
</Template>
		<Template name="program_instantiation">&lt;%program_name%&gt; [@parameter_value_assignment@] [@hier_instance@];
</Template>
		<Container name="gate_instantiation" icon="Instance">
			<TclRef name="n_input_gate" icon="Instance" ref="SystemVerilog/Subtemplates/n_input_gate"/>
			<TclRef name="n_output_gate" icon="Instance" ref="SystemVerilog/Subtemplates/n_output_gate"/>
			<TclRef name="enable_gate" icon="Instance" ref="SystemVerilog/Subtemplates/enable_gate"/>
			<TclRef name="pullup" icon="Instance" ref="SystemVerilog/Subtemplates/pullup"/>
			<TclRef name="pulldown" icon="Instance" ref="SystemVerilog/Subtemplates/pulldown"/>
			<TclRef name="mos_switch" icon="Instance" ref="SystemVerilog/Subtemplates/mos_switch"/>
			<TclRef name="cmos_switch" icon="Instance" ref="SystemVerilog/Subtemplates/cmos_switch"/>
			<TclRef name="pass_switch" icon="Instance" ref="SystemVerilog/Subtemplates/pass_switch"/>
			<TclRef name="pass_enable_switch" icon="Instance" ref="SystemVerilog/Subtemplates/pass_enable_switch"/>
		</Container>
		<Template name="n_input_gate">[@n_input_gate_type@] [@drive_strength@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;, &lt;%input%&gt; [@another_input@]);
</Template>
		<Template name="n_output_gate">[@n_output_gate_type@] [@drive_strength@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%output%&gt; [@another_output@], &lt;%input%&gt;);
</Template>
		<Template name="enable_gate">[@enable_gate_type@] [@drive_strength@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;, &lt;%input%&gt;, &lt;%enable%&gt;);
</Template>
		<Template name="pullup">pullup [@pullup_strength@] &lt;%instance_name%&gt; [@delay@] (&lt;%output%&gt;);
</Template>
		<Template name="pulldown">pulldown [@pulldown_strength@] &lt;%instance_name%&gt; [@delay@] (&lt;%output%&gt;);
</Template>
		<Template name="mos_switch">[@mos_switch_type@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;, &lt;%input%&gt;, &lt;%enable%&gt;);
</Template>
		<Template name="cmos_switch">[@cmos_switch_type@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%output%&gt;, &lt;%input%&gt;, &lt;%ncontrol%&gt;, &lt;%pcontrol%&gt;);
</Template>
		<Template name="pass_switch">[@pass_switch_type@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%inout%&gt;, &lt;%inout%&gt;);
</Template>
		<Template name="pass_enable_switch">[@pass_enable_switch_type@] [@delay@] &lt;%instance_name%&gt; [@range@] (&lt;%inout%&gt;, &lt;%inout%&gt;, &lt;%enable%&gt;);
</Template>
		<Template name="generated_instantiation">generate
[%generate_item%]
endgenerate
</Template>

		<Container name="Compiler Directives">
			<TclRef name="`define" ref="SystemVerilog/Subtemplates/`define"/>
			<TclRef name="`ifdef" ref="SystemVerilog/Subtemplates/`ifdef"/>
			<TclRef name="`ifndef" ref="SystemVerilog/Subtemplates/`ifndef"/>
			<TclRef name="`include" ref="SystemVerilog/Subtemplates/`include"/>
			<TclRef name="`timescale" ref="SystemVerilog/Subtemplates/`timescale"/>
			<TclRef name="`celldefine" ref="SystemVerilog/Subtemplates/`celldefine"/>
		</Container>
		<Template name="`define">`define &lt;%def_name%&gt; &lt;%value%&gt; 
</Template>
		<Template name="`ifdef">`ifdef &lt;%def_name%&gt;
[%construct%]
[@tick_else_or_elsif@]
`endif
</Template>
		<Template name="`ifndef">`ifndef &lt;%def_name%&gt;
[%construct%]
[@tick_else_or_elsif@]
`endif
</Template>
		<Template name="`include">`include &quot;&lt;%filename%&gt;&quot;
</Template>
		<Template name="`timescale">`timescale [@time_units@] / [@precision@]
</Template>
		<Template name="`celldefine">
`celldefine
module &lt;%module_name%&gt; [@list_of_ansi_params@] [@list_of_ansi_ports@];

[%module_item%]

endmodule
`endcelldefine
</Template>
		<Container name="Blocks">
			<TclRef name="Always" icon="VerilogAlways" ref="SystemVerilog/Subtemplates/Always"/>
			<TclRef name="Initial" icon="VerilogInitial" ref="SystemVerilog/Subtemplates/Initial"/>
			<TclRef name="Final" icon="VerilogInitial" ref="SystemVerilog/Subtemplates/Final"/>
		</Container>
		<Template name="Always">[@always_keyword@] [@event_control@] [@statement@]
</Template>
		<Template name="Initial">initial [@statement@]
</Template>
		<Template name="Final">final [@statement@]
</Template>

		<Container name="System Tasks and Functions">
			<Container name="Display and I/O Tasks" icon="VerilogTask">
				<TclRef name="File Open" icon="VerilogTask" ref="SystemVerilog/Subtemplates/File Open"/>
				<TclRef name="File Close" icon="VerilogTask" ref="SystemVerilog/Subtemplates/File Close"/>
				<TclRef name="$display" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$display"/>
				<TclRef name="$write" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$write"/>
				<TclRef name="$monitor" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$monitor"/>
				<TclRef name="$strobe" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$strobe"/>
				<TclRef name="Enable Monitors" icon="VerilogTask" ref="SystemVerilog/Subtemplates/Enable Monitors"/>
				<TclRef name="Disable Monitors" icon="VerilogTask" ref="SystemVerilog/Subtemplates/Disable Monitors"/>
				<Container name="Read Memory from File" icon="VerilogTask">
					<TclRef name="binary" icon="VerilogTask" ref="SystemVerilog/Subtemplates/rmf_binary"/>
					<TclRef name="hex" icon="VerilogTask" ref="SystemVerilog/Subtemplates/rmf_hex"/>
				</Container>
			</Container>
			<Container name="Timing Check Tasks" icon="VerilogTask">
				<TclRef name="$setup" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$setup"/>
				<TclRef name="$hold" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$hold"/>
				<TclRef name="$setuphold" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$setuphold"/>
				<TclRef name="$width" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$width"/>
				<TclRef name="$period" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$period"/>
				<TclRef name="$skew" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$skew"/>
				<TclRef name="$timeskew" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$timeskew"/>
				<TclRef name="$fullskew" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$fullskew"/>
				<TclRef name="$recovery" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$recovery"/>
				<TclRef name="$removal" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$removal"/>
				<TclRef name="$recrem" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$recrem"/>
				<TclRef name="$nochange" icon="VerilogTask" ref="SystemVerilog/Subtemplates/$nochange"/>
			</Container>
			<Container name="Simulation Control" icon="VerilogTask">
				<TclRef name="Finish Simulation (and exit)" icon="VerilogTask" ref="SystemVerilog/Subtemplates/Finish Simulation"/>
				<TclRef name="Stop Simulation" icon="VerilogTask" ref="SystemVerilog/Subtemplates/Stop Simulation"/>
			</Container>
			<Container name="Simulation Time Functions" icon="VerilogFunction">
				<TclRef name="Print TimeScale" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Print TimeScale"/>
				<TclRef name="Format Time" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Format Time"/>
				<TclRef name="Get Time as Real Number" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Get Time as Real Number"/>
				<TclRef name="Get Time as 64-bit Integer" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Get Time as 64-bit Integer"/>
				<TclRef name="Get Time as 32-bit Integer" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Get Time as 32-bit Integer"/>
			</Container>
			<Container name="Conversion Functions for Reals" icon="VerilogFunction">
				<TclRef name="Real to Integer" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Real to Integer"/>
				<TclRef name="Integer to Real" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Integer to Real"/>
				<TclRef name="Real to Bits" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Real to Bits"/>
				<TclRef name="Bits to Real" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Bits to Real"/>
			</Container>
			<Container name="Probabilistic Distribution Functions" icon="VerilogFunction">
				<TclRef name="Random" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Random"/>
				<TclRef name="Uniform" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Uniform"/>
				<TclRef name="Normal" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Normal"/>
				<TclRef name="Exponential" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Exponential"/>
				<TclRef name="Poisson" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Poisson"/>
				<TclRef name="Chi Square" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Chi Square"/>
				<TclRef name="T" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/T"/>
				<TclRef name="Erlang" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Erlang"/>
			</Container>
			<Container name="Stochastic Analysis Functions" icon="VerilogFunction">
				<TclRef name="Q Initialize" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Q Initialize"/>
				<TclRef name="Q Add" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Q Add"/>
				<TclRef name="Q Remove" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Q Remove"/>
				<TclRef name="Q Full" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Q Full"/>
				<TclRef name="Q Exam" icon="VerilogFunction" ref="SystemVerilog/Subtemplates/Q Exam"/>
			</Container>
			<TclRef name="PLA Modeling Tasks" icon="VerilogTask" ref="SystemVerilog/Subtemplates/PLA Modeling Tasks"/>
		</Container>
		<Template name="File Open">$fopen(&quot;&lt;%file_name%&gt;&quot;);
</Template>
		<Template name="File Close">$fclose(&lt;%file_descriptor%&gt;);
</Template>
		<Template name="$display">[@display_type@];
</Template>
		<Template name="$write">[@write_type@];
</Template>
		<Template name="$monitor">[@monitor_type@];
</Template>
		<Template name="$strobe">[@strobe_type@];
</Template>
		<Template name="Enable Monitors">$monitoron();
</Template>
		<Template name="Disable Monitors">$monitoroff();
</Template>
		<Template name="rmf_binary">$readmemb(&quot;&lt;%file_name%&gt;&quot;, &lt;%memory_name%&gt; [@start_addr@] [@finish_addr@]);
</Template>
		<Template name="rmf_hex">$readmemh(&quot;&lt;%file_name%&gt;&quot;, &lt;%memory_name%&gt; [@start_addr@] [@finish_addr@]);
</Template>
		<Template name="$setup">$setup([@data_event@], [@reference_event@], &lt;%limit%&gt; [@notifier@]);
</Template>
		<Template name="$hold">$hold([@reference_event@], [@data_event@], &lt;%limit%&gt; [@notifier@]);
</Template>
		<Template name="$setuphold">$setuphold([@reference_event@], [@data_event@], &lt;%setup_limit%&gt;, &lt;%hold_limit%&gt; [@notifier@]);
</Template>
		<Template name="$width">$width([@reference_event@], &lt;%limit%&gt; [@threshold@] [@notifier@]);
</Template>
		<Template name="$period">$period([@reference_event@], &lt;%limit%&gt; [@notifier@]);
</Template>
		<Template name="$skew">$skew([@reference_event@], [@data_event@], &lt;%limit%&gt; [@notifier@]);
</Template>
		<Template name="$timeskew">$timeskew([@reference_event@], [@data_event@], &lt;%limit%&gt; [@notifier@]);
</Template>
		<Template name="$fullskew">$fullskew([@reference_event@], [@data_event@], &lt;%limit%&gt; [@notifier@]);
</Template>
		<Template name="$recovery">$recovery([@reference_event@], [@data_event@], &lt;%limit%&gt; [@notifier@]);
</Template>
		<Template name="$removal">$removal([@reference_event@], [@data_event@], &lt;%limit%&gt; [@notifier@]);
</Template>
		<Template name="$recrem">$recrem([@reference_event@], [@data_event@], &lt;%rec_limit%&gt;, &lt;%rem_limit%&gt; [@notifier@]);
</Template>
		<Template name="$nochange">$nochange([@reference_event@], [@data_event@], &lt;%start_edge_offset%&gt;, &lt;%end_edge_offset%&gt; [@notifier@]);
</Template>
		<Template name="Finish Simulation">$finish [@diagnostic_message@];
</Template>
		<Template name="Stop Simulation">$stop [@diagnostic_message@];
</Template>
		<Template name="Print TimeScale">$printtimescale(&lt;%hierarchical_name%&gt;);
</Template>
		<Template name="Format Time">$timeformat[@time_format_args@];
</Template>
		<Template name="Get Time as Real Number">$realtime;</Template>
		<Template name="Get Time as 64-bit Integer">$time;</Template>
		<Template name="Get Time as 32-bit Integer">$stime;</Template>
		<Template name="Real to Integer">$rtoi(&lt;%real_val%&gt;);</Template>
		<Template name="Integer to Real">$itor(&lt;%int_val%&gt;);</Template>
		<Template name="Real to Bits">$realtobits(&lt;%real_val%&gt;);</Template>
		<Template name="Bits to Real">$bitstoreal(&lt;%bit_val%&gt;);</Template>
		<Template name="Random">$random [@seed_arg@];</Template>
		<Template name="Uniform">$dist_uniform(&lt;%seed%&gt;, &lt;%start%&gt;, &lt;%end%&gt;);</Template>
		<Template name="Normal">$dist_normal(&lt;%seed%&gt;, &lt;%mean%&gt;, &lt;%std_deviation%&gt;);</Template>
		<Template name="Exponential">$dist_exponential(&lt;%seed%&gt;, &lt;%mean%&gt;);</Template>
		<Template name="Poisson">$dist_poisson(&lt;%seed%&gt;, &lt;%mean%&gt;);</Template>
		<Template name="Chi Square">$dist_chi_square(&lt;%seed%&gt;, &lt;%degree_of_freedom%&gt;);</Template>
		<Template name="T">$dist_t(&lt;%seed%&gt;, &lt;%degree_of_freedom%&gt;);</Template>
		<Template name="Erlang">$dist_erlang(&lt;%seed%&gt;, &lt;%k_stage%&gt;, &lt;%mean%&gt;);</Template>
		<Template name="Q Initialize">$q_initialize(&lt;%q_id%&gt;, [@q_type@], &lt;%max_length%&gt;, &lt;%q_status%&gt;);</Template>
		<Template name="Q Add">$q_add(&lt;%q_id%&gt;, &lt;%job_id%&gt;, &lt;%uniform_id%&gt;, &lt;%q_status%&gt;);</Template>
		<Template name="Q Remove">$q_remove(&lt;%q_id%&gt;, &lt;%job_id%&gt;, &lt;%uniform_id%&gt;, &lt;%q_status%&gt;);</Template>
		<Template name="Q Full">$q_full(&lt;%q_id%&gt; &lt;%q_status%&gt;);</Template>
		<Template name="Q Exam">$q_exam(&lt;%q_id%&gt;, [@q_stat_code@], &lt;%q_stat_value%&gt;, &lt;%q_status%&gt;);</Template>
		<Template name="PLA Modeling Tasks">$[@array_type@]$[@logic@]$[@format@](&lt;%memory_name%&gt;, &lt;%input_terms%&gt;, &lt;%output_terms%&gt;);</Template>

		<Container name="construct">
			<TclRef name="module" ref="SystemVerilog/Subtemplates/Module"> </TclRef>
			<TclRef name="primitive" ref="SystemVerilog/Subtemplates/Primitive"> </TclRef>
			<TclRef name="declaration" ref="SystemVerilog/Subtemplates/Declarations"> </TclRef>
			<TclRef name="statement" ref="SystemVerilog/Subtemplates/Statements"> </TclRef>
			<TclRef name="instantiation" ref="SystemVerilog/Subtemplates/Instantiations"> </TclRef>
			<TclRef name="compiler directive" ref="SystemVerilog/Subtemplates/Compiler Directives"> </TclRef>
			<TclRef name="block" ref="SystemVerilog/Subtemplates/Blocks"> </TclRef>
		</Container>
		<TclRef name="statement" ref="SystemVerilog/Subtemplates/Statements"> </TclRef>

		<Template name="time_format_args">([@unit_number@], [@precision_number@], &lt;%suffix_string%&gt;, &lt;%min_field_width%&gt;)</Template>
		<Container name="unit_number">
			<Template name="1 s">0</Template>
			<Template name="100 ms">-1</Template>
			<Template name="10 ms">-2</Template>
			<Template name="1 ms">-3</Template>
			<Template name="100 us">-4</Template>
			<Template name="10 us">-5</Template>
			<Template name="1 us">-6</Template>
			<Template name="100 ns">-7</Template>
			<Template name="10 ns">-8</Template>
			<Template name="1 ns">-9</Template>
			<Template name="100 ps">-10</Template>
			<Template name="10 ps">-11</Template>
			<Template name="1 ps">-12</Template>
			<Template name="100 fs">-13</Template>
			<Template name="10 fs">-14</Template>
			<Template name="1 fs">-15</Template>
		</Container>
		<TclRef name="precision_number" ref="SystemVerilog/Subtemplates/unit_number"/>
		<Container name="q_type">
			<Template name="First-In,First-Out">1</Template>
			<Template name="Last-In,First-Out">2</Template>
		</Container>
		<Container name="q_stat_code">
			<Template name="Get Current Queue Length">1</Template>
			<Template name="Get Mean Interarrival Time">2</Template>
			<Template name="Get Maximum Queue Length">3</Template>
			<Template name="Get Shortest Wait Time Ever">4</Template>
			<Template name="Get Longest Wait Time for Jobs Still In the Queue">5</Template>
			<Template name="Get Average Wait Time in Queue">6</Template>
		</Container>
		<Template name="seed_arg">(&lt;%seed%&gt;)</Template>
		<Template name="parameter_value_assignment">#( &lt;%expression%&gt; [%parameter_assignment%] )</Template>
		<Template name="parameter_assignment">, &lt;%expression%&gt; </Template>
		<Template name="another_input">, &lt;%input%&gt; [@another_input@]</Template>
		<Template name="another_output">, &lt;%output%&gt; [@another_output@]</Template>
		<Container name="n_input_gate_type">
			<Template name="and">and</Template>
			<Template name="nand">nand</Template>
			<Template name="nor">nor</Template>
			<Template name="or">or</Template>
			<Template name="xnor">xnor</Template>
			<Template name="xor">xor</Template>
		</Container>
		<Container name="n_output_gate_type">
			<Template name="buf">buf</Template>
			<Template name="not">not</Template>
		</Container>
		<Container name="enable_gate_type">
			<Template name="bufif0">bufif0</Template>
			<Template name="bufif1">bufif1</Template>
			<Template name="notif0">notif0</Template>
			<Template name="notif1">notif1</Template>
		</Container>
		<Container name="mos_switch_type">
			<Template name="nmos">nmos</Template>
			<Template name="pmos">pmos</Template>
			<Template name="rnmos">rnmos</Template>
			<Template name="rpmos">rpmos</Template>
		</Container>
		<Container name="cmos_switch_type">
			<Template name="cmos">cmos</Template>
			<Template name="rcmos">rcmos</Template>
		</Container>
		<Container name="pass_switch_type">
			<Template name="tran">tran</Template>
			<Template name="rtran">rtran</Template>
		</Container>
		<Container name="pass_enable_switch_type">
			<Template name="tranif0">tranif0</Template>
			<Template name="tranif1">tranif1</Template>
			<Template name="rtranif0">rtranif0</Template>
			<Template name="rtranif1">rtranif1</Template>
		</Container>
		<Container name="net_type">
			<Template name="wire">wire</Template>
			<Template name="tri">tri</Template>
			<Template name="tri1">tri1</Template>
			<Template name="tri0">tri0</Template>
			<Template name="supply1">supply1</Template>
			<Template name="supply0">supply0</Template>
			<Template name="wand">wand</Template>
			<Template name="triand">triand</Template>
			<Template name="wor">wor</Template>
			<Template name="trior">trior</Template>
			<Template name="trireg">trireg</Template>
		</Container>
		<Container name="diagnostic_message">
			<Template name="Print Nothing">(0)</Template>
			<Template name="Print Simulation Time and Location">(1)</Template>
			<Template name="Print Simulation Time, Location &amp; statistics">(2)</Template>
		</Container>
		<Container name="signing">
			<Template name="signed">signed</Template>
			<Template name="unsigned">unsigned</Template>
		</Container>
		<Container name="integerv">
			<Template name="bit">bit</Template>
			<Template name="logic">logic</Template>
			<Template name="reg">reg</Template>
		</Container>
		<Container name="integer">
			<Template name="byet">byte</Template>
			<Template name="shortint">shortint</Template>
			<Template name="longint">longint</Template>
			<Template name="int">int</Template>
			<Template name="integer">integer</Template>
			<Template name="time">time</Template>
		</Container>
		<Container name="real">
			<Template name="real">real</Template>
			<Template name="shortreal">shortreal</Template>
			<Template name="realtime">realtime</Template>
		</Container>
		<Container name="data_type_or_void">
			<TclRef name="data_type" ref="SystemVerilog/Subtemplates/data_type"/>
			<Template name="void">void</Template>
		</Container>
		<Template name="packed_signing">packed [@signing@]</Template>
		<Template name="tagged">tagged</Template>
		<Template name="attribute_instance">(*&lt;%attribute_name%&gt; [@attr_expr@] [@another_attr@]*) </Template>
		<Template name="attr_expr">= &lt;%expression%&gt;</Template>
		<Template name="interface">interface</Template>
		<Container name="vectord_scalared">
			<Template name="vectored">vectored</Template>
			<Template name="scalared">scalared</Template>
		</Container>
		<Template name="list_of_ansi_params">#(
parameter [@data_type@] &lt;%param_name%&gt; = &lt;%value%&gt; [@another_ansi_param@]
)</Template>
		<Template name="list_of_ansi_ports">(
[@io_mode@] [@port_type@] [@sign_range@] &lt;%port_name%&gt; [@another_ansi_port@]
)</Template>
		<Template name="list_of_ports">( &lt;%port_name%&gt; [@another_port_name@] )</Template>
		<Container name="module_item">
			<TclRef name="module_item_declaration" ref="SystemVerilog/Subtemplates/module_item_declaration"/>
			<TclRef name="module_instantiation" ref="SystemVerilog/Subtemplates/module_instantiation"/>
			<TclRef name="gate_instantiation" ref="SystemVerilog/Subtemplates/gate_instantiation"/>
			<TclRef name="generated_instantiation" ref="SystemVerilog/Subtemplates/generated_instantiation"/>
			<TclRef name="Blocks" ref="SystemVerilog/Subtemplates/Blocks"/>
			<TclRef name="module_declaration" ref="SystemVerilog/Subtemplates/Module"/>
			<TclRef name="program_declaration" ref="SystemVerilog/Subtemplates/Program Declaration"/>
		</Container>
		<Container name="generate_item">
			<TclRef name="generate_conditional" ref="SystemVerilog/Subtemplates/generate_conditional"/>
			<TclRef name="generate_case" ref="SystemVerilog/Subtemplates/generate_case"/>
			<TclRef name="generate_loop" ref="SystemVerilog/Subtemplates/generate_loop"/>
			<TclRef name="generate_block" ref="SystemVerilog/Subtemplates/generate_block"/>
			<TclRef name="module_item" ref="SystemVerilog/Subtemplates/module_item"/>
		</Container>
		<Template name="generate_conditional">if ( &lt;%condition%&gt; ) [@generate_item@]
[@generate_else@]
</Template>
		<Container name="generate_else">
			<Template name="else">else [@generate_item@]
</Template>
			<Template name="else if">else if ( &lt;%condition%&gt; ) [@generate_item@]
[@generate_else@]
</Template>
		</Container>
		<Template name="generate_case">case ( &lt;%expression%&gt; )
&lt;%value%&gt; : [@generate_item@]
[%another_gen_case%]
[@default_gen_case@]
endcase
</Template>
		<Template name="another_gen_case">&lt;%value%&gt; : [@generate_item@]
</Template>
		<Template name="default_gen_case">default : [@generate_item@]</Template>
		<Template name="generate_loop">for ( &lt;%genvar%&gt; = &lt;%expr1%&gt; ; &lt;%expr2%&gt; ; &lt;%genvar%&gt; = &lt;%expr3%&gt; ) begin : &lt;%loop_name%&gt;
[%generate_item%]
end
</Template>
		<Template name="generate_block">begin [@generate_label@]
[%generate_item%]
end
</Template>
		<Template name="generate_label">: &lt;%block_name%&gt;</Template>
		<TclRef name="module_item_declaration" ref="SystemVerilog/Subtemplates/Declarations"/>
		<TclRef name="Port Declaration" ref="SystemVerilog/Subtemplates/Declarations/Port Declaration"/>
		<Container name="task_item_declaration">
			<TclRef name="block_item_declaration" ref="SystemVerilog/Subtemplates/block_item_declaration"/>
			<TclRef name="Input Declaration" ref="SystemVerilog/Subtemplates/Input Declaration"/>
			<TclRef name="Output Declaration" ref="SystemVerilog/Subtemplates/Output Declaration"/>
			<TclRef name="Inout Declaration" ref="SystemVerilog/Subtemplates/Inout Declaration"/>
		</Container>
		<Container name="function_item_declaration">
			<TclRef name="block_item_declaration" ref="SystemVerilog/Subtemplates/block_item_declaration"/>
			<TclRef name="Input Declaration" ref="SystemVerilog/Subtemplates/Input Declaration"/>
		</Container>
		<Template name="another_port_name">, &lt;%port_name%&gt; [@another_port_name@]</Template>
		<Template name="another_ansi_param">,
parameter [@data_type@] &lt;%param_name%&gt; = &lt;%value%&gt; [@another_ansi_param@]</Template>
		<Template name="another_ansi_port">,
[@io_mode@] [@port_type@] [@sign_range@] &lt;%port_name%&gt; [@another_ansi_port@]</Template>
		<Template name="another_param">,
&lt;%param_name%&gt; = &lt;%value%&gt; [@another_param@]</Template>
		<Template name="another_localparam">,
&lt;%localparam_name%&gt; = &lt;%value%&gt; [@another_localparam@]</Template>
		<Template name="another_genvar">, &lt;%genvar_name%&gt; [@another_genvar@]</Template>
		<Template name="another_net">, &lt;%net_name%&gt; [@another_net@]</Template>
		<Template name="another_reg">, &lt;%reg_name%&gt; [@initial_value@] [@another_reg@]</Template>
		<Template name="another_integer">, &lt;%integer_name%&gt; [@initial_value@] [@another_integer@]</Template>
		<Template name="another_real">, &lt;%real_name%&gt; [@initial_value@] [@another_real@]</Template>
		<Template name="another_time">, &lt;%time_name%&gt; [@initial_value@] [@another_time@]</Template>
		<Template name="another_realtime">, &lt;%realtime_name%&gt; [@initial_value@] [@another_realtime@]</Template>
		<Template name="another_event">, &lt;%event_name%&gt; [@another_event@]</Template>
		<Template name="another_var">, &lt;%var_name%&gt; [@range@] [@initial_value@] [@another_var@]</Template>
		<Template name="another_var_ident">, &lt;%var_name%&gt; [@range@] [@another_var_ident@]</Template>
		<Template name="another_attr">, &lt;%attribute_name%&gt; [@attr_expr@] [@another_attr@]</Template>
		<Template name="another_enum_name_decl">, &lt;%enum_name_decl%&gt; [@another_enum_name_decl@]</Template>
		<Template name="another_package_import_item">, &lt;%package_ident%&gt;::[@ident_or_*@] [@another_package_import_item@]</Template>
		<Template name="interface_ident">= &lt;%variable_ident%&gt; </Template>
		<Template name="another_interface_decl">, &lt;%variable_ident%&gt;[@interface_ident@] [@another_interface_decl@]</Template>
		<Template name="list_virtual_interface_decl">&lt;%variable_ident%&gt;[@interface_ident@] [@another_interface_decl@]</Template>
		<Container name="lifetime">
			<TclRef name="automatic" ref="SystemVerilog/Subtemplates/automatic"> </TclRef>
			<TclRef name="static" ref="SystemVerilog/Subtemplates/static"> </TclRef>
		</Container>
		<Container name="sign_range">
			<TclRef name="range" ref="SystemVerilog/Subtemplates/range"> </TclRef>
			<TclRef name="signed range" ref="SystemVerilog/Subtemplates/signed_range"> </TclRef>
		</Container>
		<Container name="always_keyword">
			<Template name="always">always</Template>
			<Template name="always_comb">always_comb</Template>
			<Template name="always_latch">always_latch</Template>
			<Template name="always_ff">always_ff</Template>
		</Container>
		<Container name="class_item">
			<TclRef name="Class Property" ref="SystemVerilog/Subtemplates/Class Property"> </TclRef>
			<TclRef name="Class Declaration" ref="SystemVerilog/Subtemplates/Class Declaration"> </TclRef>
			<TclRef name="Class Method" ref="SystemVerilog/Subtemplates/Class Method"> </TclRef>
			<Template name=";">;</Template>
		</Container>
		<Container name="interface_item">
			<TclRef name="module_or_generate_item_declaration" ref="SystemVerilog/Subtemplates/module_item_declaration"/>
			<TclRef name="initial_construct" ref="SystemVerilog/Subtemplates/Initial"/>
			<TclRef name="always_construct" ref="SystemVerilog/Subtemplates/Always"/>
			<TclRef name="final_construct" ref="SystemVerilog/Subtemplates/Final"/>
			<TclRef name="continuous_assign" ref="SystemVerilog/Subtemplates/assign"/>
			<TclRef name="instantiation" ref="SystemVerilog/Subtemplates/Instantiations"/>
			<TclRef name="interface_declaration" ref="SystemVerilog/Subtemplates/Interface Declaration"/>
			<TclRef name="program_declaration" ref="SystemVerilog/Subtemplates/Program Declaration"/>
		</Container>
		<Container name="program_item">
			<TclRef name="module_item_declaration" ref="SystemVerilog/Subtemplates/module_item_declaration"/>
			<TclRef name="initial_construct" ref="SystemVerilog/Subtemplates/Initial"/>
			<TclRef name="continuous_assign" ref="SystemVerilog/Subtemplates/assign"/>
		</Container>
		<Container name="package_item">
			<TclRef name="package_item_declaration" ref="SystemVerilog/Subtemplates/module_item_declaration"/>
			<Template name=";">;</Template>
		</Container>
		<Container name="data_declaration">
			<TclRef name="Data Declaration" ref="SystemVerilog/Subtemplates/Data Declaration"> </TclRef>
		</Container>
		<Container name="method_declaration">
			<TclRef name="Task Declaration" ref="SystemVerilog/Subtemplates/Task Declaration"> </TclRef>
			<TclRef name="Function Declaration" ref="SystemVerilog/Subtemplates/Function Declaration"> </TclRef>
		</Container>
		<Container name="method_prototype">
			<Template name="task_prototype">task &lt;%task_name%&gt; [@list_of_ansi_ports@] </Template>
			<Template name="function_prototype">function [@data_type_or_void@] &lt;%functiont_name%&gt; [@list_of_ansi_ports@] </Template>
		</Container>
		<Container name="Class Property">
			<Template name="class data declaration">[@property_qualifier@] [@data_declaration@]</Template>
			<Template name="const data declaration">[@class_item_qualifier@] [@data_type@] &lt;%const_name%&gt;;</Template>
		</Container>
		<Container name="Class Method">
			<Template name="class method declaration">[@method_qualifier@] [@method_declaration@]</Template>
			<Template name="class method prototype">extern [@method_qualifier@] [@method_prototype@];</Template>
		</Container>
		<Container name="class_item_qualifier">
			<Template name="static">static</Template>
			<Template name="protected">static</Template>
			<Template name="local">static</Template>
		</Container>
		<Container name="property_qualifier">
			<Template name="rand">static</Template>
			<Template name="randc">static</Template>
			<Template name="static">static</Template>
			<Template name="protected">static</Template>
			<Template name="local">static</Template>
		</Container>
		<Container name="method_qualifier">
			<Template name="virtual">static</Template>
			<Template name="static">static</Template>
			<Template name="protected">static</Template>
			<Template name="local">static</Template>
		</Container>
		<Template name="virtual">virtual</Template>
		<Template name="const">const</Template>
		<Template name="automatic">automatic</Template>
		<Template name="static">static</Template>
		<Template name="signed_range">signed [&lt;%from%&gt; : &lt;%to%&gt;]</Template>
		<Template name="range">[&lt;%from%&gt; : &lt;%to%&gt;]</Template>
		<Template name="hier_instance">&lt;%name_of_instance%&gt; ( [@list_of_port_connections@] ) [%anotherhier_instance%]</Template>
		<Template name="another_hier_instance">, [@hier_instance@] </Template>
		<Template name="list_of_port_connections">[@port_connection@] [%another_port_connection%]</Template>
		<Template name="another_port_connection">, [@port_connection@] </Template>
		<Container name="port_connection">
			<Template name="ordered_port_connection">&lt;%expression%&gt;</Template>
			<Template name="named_port_connection">. &lt;%port_identifier%&gt; ( &lt;%expression%&gt; )</Template>
		</Container>
		<Template name="udp_initial_statement">initial &lt;%identifier%&gt; = &lt;%init_val%&gt; ;</Template>
		<Template name="combinational_entry">&lt;%level_input_list%&gt; : &lt;%output_symbol%&gt; ;
</Template>
		<Template name="sequential_entry">&lt;%seq_input_list%&gt; : &lt;%current_state%&gt; : &lt;%next_state%&gt; ;
</Template>
		<Container name="udp_body">
			<Template name="combinational_body">table
[%combinational_entry%]
endtable</Template>
			<Template name="sequential_body">[@udp_initial_statement@]
table
[%sequential_entry%]
endtable</Template>
		</Container>
		<Container name="io_mode">
			<Template name="input">input</Template>
			<Template name="output">output</Template>
			<Template name="inout">inout</Template>
		</Container>
		<Container name="port_type">
			<TclRef name="net type" ref="SystemVerilog/Subtemplates/net_type"> </TclRef>
			<TclRef name="data type" ref="SystemVerilog/Subtemplates/data_type"> </TclRef>
		</Container>
		<Template name="initial_value">= &lt;%value%&gt;</Template>
		<Container name="delay_or_event_control">
			<TclRef name="event_control" ref="SystemVerilog/Subtemplates/event_control"> </TclRef>
			<TclRef name="delay" ref="SystemVerilog/Subtemplates/delay"> </TclRef>
		</Container>
		<Template name="delay">#&lt;%delay_val%&gt;</Template>
		<Template name="event_control">@([@event_expr@])</Template>
		<Container name="drive_or_charge_strength">
			<TclRef name="drive" ref="SystemVerilog/Subtemplates/drive_strength"> </TclRef>
			<TclRef name="charge" ref="SystemVerilog/Subtemplates/charge_strength"> </TclRef>
		</Container>
		<Template name="drive_strength">([@strength@],[@strength@])</Template>
		<Container name="charge_strength">
			<Template name="small">small</Template>
			<Template name="medium">medium</Template>
			<Template name="large">large</Template>
		</Container>
		<Container name="pullup_strength">
			<TclRef name="(strength,strength)" ref="SystemVerilog/Subtemplates/drive_strength"> </TclRef>
			<TclRef name="strength1" ref="SystemVerilog/Subtemplates/strength1"> </TclRef>
		</Container>
		<Container name="pulldown_strength">
			<TclRef name="(strength,strength)" ref="SystemVerilog/Subtemplates/drive_strength"> </TclRef>
			<TclRef name="strength0" ref="SystemVerilog/Subtemplates/strength0"> </TclRef>
		</Container>
		<Container name="strength">
			<Template name="strong0">strong0</Template>
			<Template name="strong1">strong1</Template>
			<Template name="weak0">weak0</Template>
			<Template name="weak1">weak1</Template>
			<Template name="pull0">pull0</Template>
			<Template name="pull1">pull1</Template>
			<Template name="supply0">supply0</Template>
			<Template name="supply1">supply1</Template>
			<Template name="highz0">highz0</Template>
			<Template name="highz1">highz1</Template>
		</Container>
		<Container name="strength0">
			<Template name="strong0">strong0</Template>
			<Template name="weak0">weak0</Template>
			<Template name="pull0">pull0</Template>
			<Template name="supply0">supply0</Template>
			<Template name="highz0">highz0</Template>
		</Container>
		<Container name="strength1">
			<Template name="strong1">strong1</Template>
			<Template name="weak1">weak1</Template>
			<Template name="pull1">pull1</Template>
			<Template name="supply1">supply1</Template>
			<Template name="highz1">highz1</Template>
		</Container>
		<Container name="event_expr">
			<Template name="event">(&lt;%event%&gt;)</Template>
			<Template name="posedge">posedge &lt;%net_name%&gt;</Template>
			<Template name="negedge">negedge &lt;%net_name%&gt;</Template>
			<Template name="combinatorial">*</Template>
			<Template name="expr, expr">[@event_expr@], [@event_expr@]</Template>
		</Container>
		<Container name="case_type">
			<Template name="Case">case</Template>
			<Template name="Case X">casex</Template>
			<Template name="Case Z">casez</Template>
		</Container>
		<Template name="another_case">&lt;%value%&gt; : [@statement@]
</Template>
		<Template name="default_case">default : [@statement@]</Template>
		<Template name="else_clause">else [@statement@]</Template>
		<Container name="tick_else_or_elsif">
			<Template name="tick_else">
`else
[%construct%]
</Template>
			<Template name="tick_elsif">
`elsif  &lt;%def_name%&gt;
[%construct%]
[@tick_else_or_elsif@]
</Template>
		</Container>
		<Container name="time_units">
			<Template name="100 ns">100 ns</Template>
			<Template name="10 ns">10 ns</Template>
			<Template name="1 ns">1 ns</Template>
			<Template name="100 ps">100 ps</Template>
			<Template name="10 ps">10 ps</Template>
			<Template name="1 ps">1 ps</Template>
		</Container>
		<TclRef name="precision" ref="SystemVerilog/Subtemplates/time_units"> </TclRef>
		<Template name="threshold">, &lt;%threshold%&gt;</Template>
		<Template name="notifier">, &lt;%notifier%&gt;</Template>
		<Template name="start_addr">, &lt;%start_addr%&gt;</Template>
		<Template name="finish_addr">, &lt;%finish_addr%&gt;</Template>
		<Template name="another_arg">, &lt;%arg%&gt; [@another_arg@]</Template>
		<Container name="transition_pair">
			<Template name="Transition from 0 to 1">01</Template>
			<Template name="Transition from 0 to x">0x</Template>
			<Template name="Transition from 1 to 0">10</Template>
			<Template name="Transition from 1 to x">1x</Template>
			<Template name="Transition from x to 0">x0</Template>
			<Template name="Transition from x to 1">x1</Template>
		</Container>
		<Template name="another_transition_pair">, [%transition_pair%]</Template>
		<Container name="reference_event">
			<Template name="posedge">posedge &lt;%name%&gt;</Template>
			<Template name="negedge">negedge &lt;%name%&gt;</Template>
			<Template name="edge">edge [ [@transition_pair@] [@another_transition_pair@] ] &lt;%name%&gt;</Template>
		</Container>
		<TclRef name="data_event" ref="SystemVerilog/Subtemplates/reference_event"/>
		<Container name="array_type">
			<Template name="Sync">sync</Template>
			<Template name="Async">async</Template>
		</Container>
		<Container name="logic">
			<Template name="and">and</Template>
			<Template name="or">or</Template>
			<Template name="nand">nand</Template>
			<Template name="nor">nor</Template>
		</Container>
		<Container name="format">
			<Template name="Array">array</Template>
			<Template name="Plane">plane</Template>
		</Container>
		<Container name="display_type">
			<Container name="To Screen">
				<Template name="decimal">$display(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="binary">$displayb(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="hex">$displayh(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="octal">$displayo(&lt;%arg%&gt; [@another_arg@])</Template>
			</Container>
			<Container name="To File">
				<Template name="decimal">$fdisplay(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="binary">$fdisplayb(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="hex">$fdisplayh(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="octal">$fdisplayo(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
			</Container>
		</Container>
		<Container name="write_type">
			<Container name="To Screen">
				<Template name="decimal">$write(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="binary">$writeb(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="hex">$writeh(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="octal">$writeo(&lt;%arg%&gt; [@another_arg@])</Template>
			</Container>
			<Container name="To File">
				<Template name="decimal">$fwrite(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="binary">$fwriteb(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="hex">$fwriteh(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="octal">$fwriteo(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
			</Container>
		</Container>
		<Container name="monitor_type">
			<Container name="To Screen">
				<Template name="decimal">$monitor(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="binary">$monitorb(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="hex">$monitorh(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="octal">$monitoro(&lt;%arg%&gt; [@another_arg@])</Template>
			</Container>
			<Container name="To File">
				<Template name="decimal">$fmonitor(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="binary">$fmonitorb(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="hex">$fmonitorh(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="octal">$fmonitoro(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
			</Container>
		</Container>
		<Container name="strobe_type">
			<Container name="To Screen">
				<Template name="decimal">$strobe(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="binary">$strobeb(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="hex">$strobeh(&lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="octal">$strobeo(&lt;%arg%&gt; [@another_arg@])</Template>
			</Container>
			<Container name="To File">
				<Template name="decimal">$fstrobe(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="binary">$fstrobeb(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="hex">$fstrobeh(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
				<Template name="octal">$fstrobeo(&lt;%file_descriptor%&gt;, &lt;%arg%&gt; [@another_arg@])</Template>
			</Container>
		</Container>
		<Container name="block_item_declaration">
			<TclRef name="Parameter" ref="SystemVerilog/Subtemplates/Parameter"/>
			<TclRef name="Local Parameter" ref="SystemVerilog/Subtemplates/Local Parameter"/>
		</Container>
	</Container>
</Container>


</Container>
