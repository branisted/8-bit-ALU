#!/usr/local/bin/perl
#
# (c) 2005 Mentor Graphics Corporation.                            
#     All rights reserved.                                                       
#                                                                       
# THIS SOFTWARE AND (ON-LINE) DOCUMENTATION CONTAIN CONFIDENTIAL        
# INFORMATION AND TRADE SECRETS OF Mentor Graphics Corporation.  USE,   
# DISCLOSURE, OR REPRODUCTION IS PROHIBITED WITHOUT THE PRIOR EXPRESS   
# WRITTEN PERMISSION OF Mentor Graphics Corporation.                    
#
# Purpose: Build database by parsing the db file
#
# $Revision: #1 $

# mtifc_parse_db version="5.0"

require 5.005;

############################################################
=head1 NAME

mtifc_parse_db - Package that parses db builds a database. 
=cut

############################################################

package mtifc_parse_db;

use strict;
use warnings;
use Env;
use XML::SAX;
use mtifc_sax_handler;

## The bin kind
*BIN_NORMAL   = \1;
*BIN_IGNORE   = \2;
*BIN_ILLEGAL  = \4;
*BIN_ALL      = \7;

## The kind of bin rhs
*SINGLE		= \1;
*RANGE		= \2;
*TRANSITION = \3;
*CROSSBIN   = \4;

## Constants
*NONE = \"";
*NA   = \-9999;

#############################################################
=head2 Public Method

Subroutine: new

Purpose: Create an object and return the handle.

Usage: my $buildObj = mtifc_parse_db->new();

=cut

#############################################################

sub new
{
  # Get class name
  my $class = shift;

  # Make anonymous hash reference
  my $class_ref = {};
  my $this_database;
  $class_ref->{THIS_DATABASE} = $this_database;

  # Return blessed object
  return bless($class_ref, $class);
}

##==========================================================
##
## Define class globals
##
##==========================================================

my $dblistfiletmp = "mtifc_parse_db.dblist.tmp";
my $design_focus_index = 0;
my $cvgreport_focus_index = 0;
my $covertype_focus_index = 0;         ### covertype focus index ONLY (redundant)
my $coveritem_focus_index = 0;         ### either covertype or coverinstance focus index
my $coveritem_focus_kind = "";
my $covergroupitem_focus_index = 0;
my $covergroupitem_focus_kind = "";

##==========================================================
##    Functions: parsing methods
##==========================================================

############################################################
##
## Parse all report files gathering report_statistics and info
##
############################################################

sub parse_report_files {
    my ($class, @Files) = @_;

	my $report_filename = " ";
	my $parser;
	my $sax_handler;

	$sax_handler = mtifc_sax_handler->new(\$class->{THIS_DATABASE}, \$report_filename);

	$parser = XML::SAX::ParserFactory->parser(Handler => $sax_handler);
	
	# loop thru files and parse

    PARSE_REPORT_FILES_LOOP: foreach $report_filename (@Files) {

		chomp $report_filename;

		next PARSE_REPORT_FILES_LOOP if (! -e $report_filename);
		next PARSE_REPORT_FILES_LOOP if (-z $report_filename);

		$parser->parse_uri($report_filename);

    } # foreach $report_filename (@Files)
}

############################################################
##    Function: mtifc_parse_db_filelist_real
##          in:  filename containing list of db files
##         out:  nothing - sets up data structures for access functions
##
## Description: given a file that contains a list of XML db files
##              (generated by the "fcover report" command)
##              parse the list of db files and set up the data structures
##              for the access functions
############################################################

sub mtifc_parse_db_filelist_real {

    my ($class, $dblistfile) = @_;

    my @Files = ();

    open(DBLISTPTR, "<$dblistfile") || die "Can not open $dblistfile: $!\n";
		while(<DBLISTPTR>) {
			push @Files, $_;
		}
	close(DBLISTPTR);    

    parse_report_files($class, @Files);

} # sub mtifc_parse_db_filelist_real


############################################################
##    Function: mtifc_parse_db_file
##          in:  db filename
##         out:  nothing - sets up data structures for access functions
##
## Description: given a db file parse the db file and set up 
##              the data structures for the access functions
##
## Note: The db file must be an XML file created by the 
##       "fcover -xml" command. 
##       EXAMPLE:
##           fcover report -r / -directive -cvg -xml -output report.xml
##       For additional information on using the "fcover report" command,
##       please consult the QuestaSim user's manual 
##       (i.e. fcover report , CommandReference).
############################################################

sub mtifc_parse_db_file {

    my ($class, $dbfile) = @_;
  
    open(DBLISTPTR, ">$dblistfiletmp") || die "Can not open $dblistfiletmp: $!\n";
    print DBLISTPTR "$dbfile\n";
    close(DBLISTPTR);    

    print "## Processing Database....\n";

    mtifc_parse_db_filelist_real($class, $dblistfiletmp);

    unlink($dblistfiletmp);

} # sub mtifc_parse_db_file 
    
  
############################################################
##    Function: mtifc_parse_db_filelist
##          in:  filename containing list of db files
##         out:  nothing - sets up data structures for access functions
##
## Description: given a file that contains a list of db files
##              parse the list of db files and set up the data structures
##              for the access functions
##
## Note: The db files must be XML files created by the 
##       "fcover -xml" command. 
##       EXAMPLE:
##           fcover report -r / -directive -cvg -xml -output report.xml
##       For additional information on using the "fcover report" command,
##       please consult the QuestaSim user's manual 
##       (i.e. fcover report , CommandReference).
############################################################

sub mtifc_parse_db_filelist {

    my ($class, $dblistfile) = @_;

    print "## Processing Databases....\n";

    mtifc_parse_db_filelist_real($class, $dblistfile);

} # sub mtifc_parse_db_filelist
    
##==========================================================
##
## Define fcover directive access methods
##
##==========================================================

############################################################
##    Function: mtifc_get_num_designs
##          in:  none
##         out:  number of fcover directive designs
##
## Description: return the number all fcover directive design instances
##              in the accumulated database
############################################################

sub mtifc_get_num_designs {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	return $#{ $this_database->{DESIGNS}} + 1;
} # mtifc_get_num_designs

############################################################
##    Function: mtifc_get_ith_design_comment
##          in:  integer index into design list
##         out:  value of the ith design comment text
##
## Description: given the design index 
##              return the ith design comment text
############################################################

sub mtifc_get_ith_design_comment {
    my ($class, $dIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;
    
	$return_value = $this_database->{DESIGNS}[$dIndexNum]->{COMMENT};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_design_comment

############################################################
##    Function: mtifc_get_ith_design_name
##          in:  integer index into design list
##         out:  value of the ith design name
##
## Description: given the design index 
##              return the ith design name
############################################################

sub mtifc_get_ith_design_name {
    my ($class, $dIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;
    
	$return_value = $this_database->{DESIGNS}[$dIndexNum]->{NAME};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_design_name

############################################################
##    Function: mtifc_get_ith_design_fcoverage
##          in:  integer index into design list
##         out:  value of the ith design fcoverage value
##
## Description: given the design index 
##              return the ith design fcoverage value
############################################################

sub mtifc_get_ith_design_fcoverage {
    my ($class, $dIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;
    
	$return_value = $this_database->{DESIGNS}[$dIndexNum]->{FCOVERAGE};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_design_fcoverage
	
############################################################
##    Function: mtifc_get_ith_design_numfcovers
##          in:  integer index into design list
##         out:  number of fcover directives
##
## Description: given the design index 
##              return the number fcover directive instances
##              in the ith design
############################################################

sub mtifc_get_ith_design_numfcovers {
    my ($class, $dIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value_theory;
	my $return_value;
    
	$return_value = $this_database->{DESIGNS}[$dIndexNum]->{FCOVERS_INDEX_COUNT};
	if (!defined $return_value) { return 0 };
	$return_value_theory = $this_database->{DESIGNS}[$dIndexNum]->{NUMFCOVERS};
	if (!defined $return_value_theory) { return $return_value };
	if ($return_value_theory != $return_value) { return 0 }; ## Inconsistent data
    return $return_value;
} # mtifc_get_ith_design_numfcovers

############################################################
##    Function: mtifc_set_design_focus_to_ith_design
##          in:  integer index into design list
##         out:  none
##
## Description: given the design index 
##              set the design_focus to the ith design
############################################################

sub mtifc_set_design_focus_to_ith_design {
    my ($class, $dIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	$design_focus_index = $dIndexNum;
} # mtifc_set_design_focus_to_ith_design

############################################################
##    Function: mtifc_get_ith_fcover_name
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover name
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover name
############################################################

sub mtifc_get_ith_fcover_name {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;

	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{NAME};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_name

############################################################
##    Function: mtifc_get_ith_fcover_du
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover du
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover du
############################################################

sub mtifc_get_ith_fcover_du {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{DU};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_du

############################################################
##    Function: mtifc_get_ith_fcover_dutype
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover dutype
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover dutype
############################################################

sub mtifc_get_ith_fcover_dutype {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{DUTYPE};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_dutype

############################################################
##    Function: mtifc_get_ith_fcover_dirtype
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover dirtype
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover dirtype
############################################################

sub mtifc_get_ith_fcover_dirtype {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{DIRTYPE};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_dirtype

############################################################
##    Function: mtifc_get_ith_fcover_source
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover source
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover source
############################################################

sub mtifc_get_ith_fcover_source {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{SOURCE};
	if (!defined $return_value) { return "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_source

############################################################
##    Function: mtifc_get_ith_fcover_file_path
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover full file pathname
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover full hierarchical path
##              to the file which contains the directive
############################################################

sub mtifc_get_ith_fcover_file_path {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{SOURCE};
	if (!defined $return_value) { return "<UNKNOWN>" };
	if (!($return_value =~ /(.*)\(\d+\).*/)) { return "<UNKNOWN>" };
    return $1;
} # mtifc_get_ith_fcover_file_path

############################################################
##    Function: mtifc_get_ith_fcover_linenum
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover line number
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover line number in the file
##              which contains the directive
############################################################

sub mtifc_get_ith_fcover_linenum {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{SOURCE};
	if (!defined $return_value) { return "<UNKNOWN>" };
	if (!($return_value =~ /.*\((\d+)\).*/)) { return "<UNKNOWN>" };
    return $1;
} # mtifc_get_ith_fcover_linenum

############################################################
##    Function: mtifc_get_ith_fcover_enabled
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover enabled
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover enabled
############################################################

sub mtifc_get_ith_fcover_enabled {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{ENABLED};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_enabled

############################################################
##    Function: mtifc_get_ith_fcover_count
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover count
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover count
##              (i.e. the number of times this cover was hit in this design)
############################################################

sub mtifc_get_ith_fcover_count {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{COUNT};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_count

############################################################
##    Function: mtifc_get_ith_fcover_is_fired
##          in:  integer index into fcover list slice
##         out:  1 if the ith fcover was fired
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return 1 if the ith fcover was fired at least once
############################################################

sub mtifc_get_ith_fcover_is_fired {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{STATUS};
	if (!defined $return_value) { return 0 };
	if ($return_value ne "ZERO") {
		return 1;
	}
    return 0;
} # mtifc_get_ith_fcover_is_fired

############################################################
##    Function: mtifc_get_ith_fcover_is_covered
##          in:  integer index into fcover list slice
##         out:  1 if the ith fcover was covered
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return 1 if the ith fcover count >= atleast
############################################################

sub mtifc_get_ith_fcover_is_covered {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{STATUS};
	if (!defined $return_value) { return 0 };
	if ($return_value eq "Covered") {
		return 1;
	}
    return 0;
} # mtifc_get_ith_fcover_is_covered

############################################################
##    Function: mtifc_get_ith_fcover_atleast
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover atleast
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover atleast
############################################################

sub mtifc_get_ith_fcover_atleast {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{ATLEAST};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_atleast

############################################################
##    Function: mtifc_get_ith_fcover_limit
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover limit
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover limit
############################################################

sub mtifc_get_ith_fcover_limit {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{LIMIT};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_limit

############################################################
##    Function: mtifc_get_ith_fcover_weight
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover weight
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover weight
############################################################

sub mtifc_get_ith_fcover_weight {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{WEIGHT};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_weight

############################################################
##    Function: mtifc_get_ith_fcover_status
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover status
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover status
############################################################

sub mtifc_get_ith_fcover_status {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{STATUS};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_status

############################################################
##    Function: mtifc_get_ith_fcover_log
##          in:  integer index into fcover list slice
##         out:  value of the ith fcover log
##
## implicit in:  $design_focus_index (integer index into design list)
##
## Description: given the fcover index (and the implicit $design_focus_index) 
##              return the ith fcover log
############################################################

sub mtifc_get_ith_fcover_log {
    my ($class, $fcIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $fcIndex;
	my $return_value;
    
	$fcIndex = $this_database->{DESIGNS}[$design_focus_index]->{FCOVERS_INDEX_BEGIN} + $fcIndexNum;
	$return_value = $this_database->{FCOVERS}[$fcIndex]->{LOG};
	if (!defined $return_value) { $return_value = "<UNKNOWN>" };
    return $return_value;
} # mtifc_get_ith_fcover_log

##==========================================================
##
## Define fcover covergroup access methods
##
##==========================================================

############################################################
##    Function: mtifc_get_num_cvgreports
##          in:  none
##         out:  number of covergroup reports
##
## Description: return the number all fcover covergroup reports
##              in the accumulated database
############################################################

sub mtifc_get_num_cvgreports {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	return $#{ $this_database->{COVERGROUPREPORTS}} + 1;
} # mtifc_get_num_cvgreports

############################################################
##    Function: mtifc_set_cvgreport_focus_to_ith_report
##          in:  integer index into cvgreport list
##         out:  none
##
## Description: given the cvgreport index 
##              set the cvgreport_focus to the ith report
############################################################

sub mtifc_set_cvgreport_focus_to_ith_report {
    my ($class, $rIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	$cvgreport_focus_index = $rIndexNum;
} # mtifc_set_cvgreport_focus_to_ith_report

############################################################
##    Function: mtifc_get_ith_cvgreport_numcovertypes
##          in:  integer index into cvgreport list
##         out:  number of covertypes in this report
##
## Description: given the cvgreport index 
##				return the number of covertypes
##              in the ith cvgreport
############################################################

sub mtifc_get_ith_cvgreport_numcovertypes {
    my ($class, $rIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;
    
	$return_value = $this_database->{COVERGROUPREPORTS}[$rIndexNum]->{COVERTYPES_INDEX_COUNT};
	if (!defined $return_value) { return 0 };
    return $return_value;
} # mtifc_get_ith_cvgreport_numcovertypes

############################################################
##    Function: mtifc_set_coveritem_focus_to_ith_covertype
##          in:  integer index into covertype list
##         out:  none
##
## implicit in:  $cvgreport_focus_index (integer index into cvgreport list)
##
## Description: given the covertype index (and the implicit $cvgreport_focus_index) 
##              set the coveritem_focus to the ith covertype
############################################################

sub mtifc_set_coveritem_focus_to_ith_covertype {
    my ($class, $ctIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $ciIndexNum;

	$ciIndexNum = $this_database->{COVERGROUPREPORTS}[$cvgreport_focus_index]->{COVERTYPES_INDEX_BEGIN} + $ctIndexNum;
	$coveritem_focus_index = $ciIndexNum;
    $covertype_focus_index = $ciIndexNum;
	$coveritem_focus_kind = "COVERTYPES";
} # mtifc_set_coveritem_focus_to_ith_covertype

############################################################
##    Function: mtifc_get_covertype_numcoverinstances
##          in:  none
##         out:  number of coverinstances in this covertype
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Description: given the $coveritem_focus_index
##				return the number of coverinstances
##              for the covertype (i.e. $coveritem_focus_index)
############################################################

sub mtifc_get_ith_covertype_numcoverinstances {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;
    
	$return_value = $this_database->{$coveritem_focus_kind}[$covertype_focus_index]->{COVERINSTANCES_INDEX_COUNT};
	if (!defined $return_value) { return 0 };
    return $return_value;
} # mtifc_get_ith_covertype_numcoverinstances

################## DEPRECATED ##############################
##    Function: mtifc_get_ith_cvgreport_numcovergroups
##          in:  integer index into cvgreport list
##         out:  number of covergroups in this report
##
## Description: given the cvgreport index 
##				return the number of covergroups
##              in the ith cvgreport
################## DEPRECATED ##############################

sub mtifc_get_ith_cvgreport_numcovergroups {
    my ($class, $rIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;
    
	$return_value = $this_database->{COVERGROUPREPORTS}[$rIndexNum]->{COVERGROUPS_INDEX_COUNT};
	if (!defined $return_value) { return 0 };
    return $return_value;
} # mtifc_get_ith_cvgreport_numcovergroups

############################################################
##    Function: mtifc_set_coveritem_focus_to_ith_coverinstance
##          in:  integer index into coverinstance list
##         out:  none
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Description: given the coverinstance index (and the implicit $coveritem_focus_index) 
##              set the coveritem_focus to the ith coverinstance
############################################################

sub mtifc_set_coveritem_focus_to_ith_coverinstance {
    my ($class, $ciIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $cgiIndexNum;
    
    $cgiIndexNum = $this_database->{"COVERTYPES"}[$covertype_focus_index]->{COVERINSTANCES_INDEX_BEGIN} + $ciIndexNum;
	$coveritem_focus_index = $cgiIndexNum;
	$coveritem_focus_kind = "COVERINSTANCES";
} # mtifc_set_coveritem_focus_to_ith_coverinstance

################## DEPRECATED ##############################
##    Function: mtifc_set_coveritem_focus_to_ith_covergroup
##          in:  integer index into covergroup list
##         out:  none
##
## implicit in:  $cvgreport_focus_index (integer index into cvgreport list)
##
## Description: given the covergroup index (and the implicit $cvgreport_focus_index) 
##              set the coveritem_focus to the ith covergroup
################## DEPRECATED ##############################

sub mtifc_set_coveritem_focus_to_ith_covergroup {
    my ($class, $cgIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $ciIndexNum;
    
	$ciIndexNum = $this_database->{COVERGROUPREPORTS}[$cvgreport_focus_index]->{COVERGROUPS_INDEX_BEGIN} + $cgIndexNum;
	$coveritem_focus_index = $ciIndexNum;
	$coveritem_focus_kind = "COVERGROUPS";
} # mtifc_set_coveritem_focus_to_ith_covergroup

############################################################
##    Function: mtifc_get_coverinstance_covertype_index
##          in:  none
##         out:  index of associated covertype
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Note: A coveritem must be "coverinstances"
##
## Description: (given the  implicit $coveritem_focus_index) 
##              return the index of associated covertype
############################################################

sub mtifc_get_coverinstance_covertype_index {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    ## Note: $coveritem_focus_kind must be "COVERINSTANCES"
	if ($coveritem_focus_kind eq "COVERINSTANCES") {
        return $this_database->{"COVERINSTANCES"}[$coveritem_focus_index]->{COVERTYPE_INDEX};
	}
	return -1;
} # mtifc_get_coverinstance_covertype_index

############################################################
##    Function: mtifc_get_coveritem_path
##          in:  none
##         out:  path of the coveritem
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Note: A coveritem is either "covertype" or "coverinstance" (DEPRECATED:"covergroup")
##
## Description: (given the  implicit $coveritem_focus_index) 
##              return the path of the coveritem
############################################################

sub mtifc_get_coveritem_path {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    ## Note: $coveritem_focus_kind is either "COVERTYPES" or "COVERINSTANCES" (DEPRECATED:"COVERGROUPS")
    return $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{PATH};
} # mtifc_get_coveritem_path

############################################################
##    Function: mtifc_get_coveritem_aggregate_bin_handle
##          in:  none
##         out:  aggregate bin handle
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Note: A coveritem is either "covertype" or "coverinstance" (DEPRECATED:"covergroup")
##
## Description: (given the  implicit $coveritem_focus_index) 
##              return a handle to the coveritem aggregate bin handle
############################################################

sub mtifc_get_coveritem_aggregate_bin_handle {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    ## Note: $coveritem_focus_kind is either "COVERTYPES" or "COVERINSTANCES" (DEPRECATED:"COVERGROUPS")
    return $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{AGGREGATION};
} # mtifc_get_coveritem_aggregate_bin_handle

############################################################
##    Function: mtifc_get_coveritem_type_option_handle
##          in:  none
##         out:  type_option handle of the coveritem
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Note: A coveritem is either "covertype" or "coverinstance" (DEPRECATED:"covergroup")
##
## Description: (given the  implicit $coveritem_focus_index) 
##              return the type_option handle of the coveritem
############################################################

sub mtifc_get_coveritem_type_option_handle {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    ## Note: $coveritem_focus_kind is either "COVERTYPES" or "COVERINSTANCES" (DEPRECATED:"COVERGROUPS")
	if (!defined $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{TYPE_OPTION}) {
		return 0;
	}
    return $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{TYPE_OPTION};
} # mtifc_get_coveritem_type_option_handle

############################################################
##    Function: mtifc_get_coveritem_option_handle
##          in:  none
##         out:  option handel of the coveritem
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Note: A coveritem is either "covertype" or "coverinstance" (DEPRECATED:"covergroup")
##
## Description: (given the  implicit $coveritem_focus_index) 
##              return the option handle of the coveritem
############################################################

sub mtifc_get_coveritem_option_handle {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    ## Note: $coveritem_focus_kind is either "COVERTYPES" or "COVERINSTANCES" (DEPRECATED:"COVERGROUPS")
	if (!defined $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{OPTION}) {
		return 0;
	}
    return $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{OPTION};
} # mtifc_get_coveritem_option_handle

############################################################
##    Function: mtifc_get_coveritem_numcoverpoints
##          in:  none
##         out:  number of coverpoints in this coveritem
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Note: A coveritem is either "covertype" or "coverinstance" (DEPRECATED:"covergroup")
##
## Description: return the number of coverpoints
##              in the ith coveritem
############################################################

sub mtifc_get_coveritem_numcoverpoints {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;
    
    ## Note: $coveritem_focus_kind is either "COVERTYPES" or "COVERINSTANCES" (DEPRECATED:"COVERGROUPS")
	$return_value = $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{COVERPOINTS_INDEX_COUNT};
	if (!defined $return_value) { return 0 };
    return $return_value;
} # mtifc_get_coveritem_numcoverpoints

############################################################
##    Function: mtifc_set_covergroupitem_focus_to_ith_coverpoint
##          in:  integer index into coverpoint list
##         out:  none
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Note: A coveritem is either "covertype" or "coverinstance" (DEPRECATED:"covergroup")
##
## Description: given the coverpoint index (and the implicit $coveritem_focus_index) 
##              set the covergroupitem_focus to the ith coverpoint
############################################################

sub mtifc_set_covergroupitem_focus_to_ith_coverpoint {
    my ($class, $cpIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $cgiIndexNum;
    
    ## Note: $coveritem_focus_kind is either "COVERTYPES" or "COVERINSTANCES" (DEPRECATED:"COVERGROUPS")
    $cgiIndexNum = $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{COVERPOINTS_INDEX_BEGIN} + $cpIndexNum;
	$covergroupitem_focus_index = $cgiIndexNum;
	$covergroupitem_focus_kind = "COVERPOINTS";
} # mtifc_set_covergroupitem_focus_to_ith_coverpoint

############################################################
##    Function: mtifc_get_coveritem_numcrosses
##          in:  none
##         out:  number of crosses in this coveritem
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Note: A coveritem is either "covertype" or "coverinstance" (DEPRECATED:"covergroup")
##
## Description: return the number of crosses
##              in the ith coveritem
############################################################

sub mtifc_get_coveritem_numcrosses {
    my ($class, $rIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;
    
    ## Note: $coveritem_focus_kind is either "COVERTYPES" or "COVERINSTANCES" (DEPRECATED:"COVERGROUPS")
	$return_value = $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{CROSSES_INDEX_COUNT};
	if (!defined $return_value) { return 0 };
    return $return_value;
} # mtifc_get_coveritem_numcrosses

############################################################
##    Function: mtifc_set_covergroupitem_focus_to_ith_cross
##          in:  integer index into cross list
##         out:  none
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
##
## Note: A coveritem is either "covertype" or "coverinstance" (DEPRECATED:"covergroup")
##
## Description: given the cross index (and the implicit $coveritem_focus_index) 
##              set the covergroupitem_focus to the ith cross
############################################################

sub mtifc_set_covergroupitem_focus_to_ith_cross {
    my ($class, $cIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $cgiIndexNum;
    
    ## Note: $coveritem_focus_kind is either "COVERTYPES" or "COVERINSTANCES" (DEPRECATED:"COVERGROUPS")
	$cgiIndexNum = $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{CROSSES_INDEX_BEGIN} + $cIndexNum;
	$covergroupitem_focus_index = $cgiIndexNum;
	$covergroupitem_focus_kind = "CROSSS";
} # mtifc_set_covergroupitem_focus_to_ith_cross

############################################################
##    Function: mtifc_get_cross_num_coverpoints
##          in:  none
##         out:  number of coverpoints used to construct this cross.
##
## implicit in:  $covergroupitem_focus_index (integer index into cross list)
##
## Note: covergroupitem is "cross"
##
## Description: given the focus of a cross item, return the 
##              number of coverpoints used to construct this cross.
############################################################

sub mtifc_get_cross_num_coverpoints {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;

	$return_value = $#{ $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{CROSS_COVERPOINTS} } + 1;
	if (defined $return_value) { return $return_value; }
	## Error! mtifc_get_cross_num_coverpoints called with a BAD cross focus!!!
    print "## ERROR: mtifc_get_cross_num_coverpoints called with a BAD cross focus!\n";
	return 0;
    
} # mtifc_get_cross_num_coverpoints

############################################################
##    Function: mtifc_get_ith_cross_coverpoint_name
##          in:  integer index into the cross's coverpoint coverpoint list
##         out:  the ith coverpoint index used to construct this cross.
##
## implicit in:  $covergroupitem_focus_index (integer index into cross list)
##
## Note: covergroupitem is "cross"
##
## Description: given the cross coverpoint index 
##              (and the implicit $coveritem_focus_index), 
##              return the ith coverpoint name used to construct this cross.
############################################################

sub mtifc_get_ith_cross_coverpoint_name {
    my ($class, $cIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $cgiIndexNum;
	my $return_value;

	$return_value = $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{CROSS_COVERPOINTS}[$cIndexNum];
	if (defined $return_value) { return $return_value; }
	## Error! mtifc_get_ith_cross_coverpoint_name called with a BAD cross focus!!!
    print "## ERROR: mtifc_get_ith_cross_coverpoint_name called with a BAD cross focus!\n";
	return 0;

} # mtifc_get_ith_cross_coverpoint_name

############################################################
##    Function: mtifc_get_ith_cross_coverpoint_index
##          in:  integer index into the cross's coverpoint coverpoint list
##         out:  the ith coverpoint index used to construct this cross.
##
## implicit in:  $covergroupitem_focus_index (integer index into cross list)
##
## Note: covergroupitem is "cross"
##
## Description: given the cross coverpoint index 
##              (and the implicit $coveritem_focus_index), 
##              return the ith coverpoint index used to construct this cross.
############################################################

sub mtifc_get_ith_cross_coverpoint_index {
    my ($class, $cIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $cgiIndexNum;
	my $return_name;
	my $return_index;

	$return_name = mtifc_get_ith_cross_coverpoint_name($class, $cIndexNum);
	if (defined $return_name) {
	    if ($return_name =~ /^\d+$/) { return $return_name; } ## This is the OLD style -- the index number itself!
        # For each <coverpoint> get the "index" by which it can be referenced (i.e. $coverpoint_index).
		# This index value can be retrieved by hashing on the name of the <coverpoint>.
        ## Note: $coveritem_focus_kind is either "COVERTYPES" or "COVERINSTANCES" (DEPRECATED:"COVERGROUPS")
        $return_index = $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{COVERPOINT_LOOKUP_BY_NAME}->{$return_name};
		if (defined $return_index) { return $return_index; }
	}
	## Error! mtifc_get_ith_cross_coverpoint_index called with a BAD cross focus!!!
    print "## ERROR: mtifc_get_ith_cross_coverpoint_index called with a BAD cross focus!\n";
	return 0;

} # mtifc_get_ith_cross_coverpoint_index

############################################################
##    Function: mtifc_get_ith_cross_coverpoint_handle
##          in:  integer index into the cross's coverpoint coverpoint list
##         out:  the ith coverpoint handle used to construct this cross.
##
## implicit in:  $coveritem_focus_index (integer index into coveritem list)
## implicit in:  $covergroupitem_focus_index (integer index into cross list)
##
## Note: covergroupitem is "cross"
## Note: A coveritem is either "covertype" or "coverinstance" (DEPRECATED:"covergroup")
##
## Note: This function is similar to the following code sequence:
##              $index = $this_database->mtifc_get_ith_cross_coverpoint_index($cIndexNum);
##				$this_database->mtifc_set_covergroupitem_focus_to_ith_coverpoint($index);
##				$handle = $this_database->mtifc_get_covergroupitem_aggregate_bin_handle();
##              return $handle;
##
## Description: given the cross coverpoint index 
##              (and the implicit $coveritem_focus_index),
##              return the ith coverpoint handle used to construct this cross.
############################################################

sub mtifc_get_ith_cross_coverpoint_handle {
    my ($class, $cIndexNum) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $cpIndexNum;
	my $cgiIndexNum;

	$cpIndexNum = mtifc_get_ith_cross_coverpoint_index($class, $cIndexNum);
    ## Note: $coveritem_focus_kind is either "COVERTYPES" or "COVERINSTANCES" (DEPRECATED:"COVERGROUPS")
    $cgiIndexNum = $this_database->{$coveritem_focus_kind}[$coveritem_focus_index]->{COVERPOINTS_INDEX_BEGIN} + $cpIndexNum;
    return $this_database->{"COVERPOINTS"}[$cgiIndexNum]->{AGGREGATION};
    
} # mtifc_get_ith_cross_coverpoint_handle

############################################################
##    Function: mtifc_get_covergroupitem_aggregate_bin_handle
##          in:  none
##         out:  aggregate bin handle
##
## implicit in:  $covergroupitem_focus_index (integer index into covergroupitem list)
##
## Note: A covergroupitem is either "coverpoint" or "cross"
##
## Description: (given the  implicit $covergroupitem_focus_index) 
##              return a handle to the covergroupitem aggregate bin handle
############################################################

sub mtifc_get_covergroupitem_aggregate_bin_handle {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    ## Note: $covergroupitem_focus_kind is either "COVERPOINTS" or "CROSSS"
    return $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{AGGREGATION};
} # mtifc_get_covergroupitem_aggregate_bin_handle

############################################################
##    Function: mtifc_get_covergroupitem_coveredbins
##          in:  none
##         out:  coveredbins value
##
## implicit in:  $covergroupitem_focus_index (integer index into covergroupitem list)
##
## Note: A covergroupitem is either "coverpoint" or "cross"
##
## Description: (given the  implicit $covergroupitem_focus_index) 
##              return the coveredbins value
############################################################

sub mtifc_get_covergroupitem_coveredbins {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    ## Note: $covergroupitem_focus_kind is either "COVERPOINTS" or "CROSSS"
    return $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{COVEREDBINS};
} # mtifc_get_covergroupitem_coveredbins

############################################################
##    Function: mtifc_get_covergroupitem_totalbins
##          in:  none
##         out:  totalbins value
##
## implicit in:  $covergroupitem_focus_index (integer index into covergroupitem list)
##
## Note: A covergroupitem is either "coverpoint" or "cross"
##
## Description: (given the  implicit $covergroupitem_focus_index) 
##              return the totalbins value
############################################################

sub mtifc_get_covergroupitem_totalbins {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    ## Note: $covergroupitem_focus_kind is either "COVERPOINTS" or "CROSSS"
    return $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{TOTALBINS};
} # mtifc_get_covergroupitem_totalbins

############################################################
##    Function: mtifc_get_covergroupitem_type_option_handle
##          in:  none
##         out:  type_option handle of the covergroupitem
##
## implicit in:  $covergroupitem_focus_index (integer index into covergroupitem list)
##
## Note: A covergroupitem is either "coverpoint" or "cross"
##
## Description: (given the  implicit $covergroupitem_focus_index) 
##              return the type_option handle of the covergroupitem
############################################################

sub mtifc_get_covergroupitem_type_option_handle {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    ## Note: $covergroupitem_focus_kind is either "COVERPOINTS" or "CROSSS"
	if (!defined $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{TYPE_OPTION}) {
		return 0;
	}
    return $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{TYPE_OPTION};
} # mtifc_get_covergroupitem_type_option_handle

############################################################
##    Function: mtifc_get_covergroupitem_option_handle
##          in:  none
##         out:  option handel of the covergroupitem
##
## implicit in:  $covergroupitem_focus_index (integer index into covergroupitem list)
##
## Note: A covergroupitem is either "coverpoint" or "cross"
##
## Description: (given the  implicit $covergroupitem_focus_index) 
##              return the option handle of the covergroupitem
############################################################

sub mtifc_get_covergroupitem_option_handle {
    my ($class) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    ## Note: $covergroupitem_focus_kind is either "COVERPOINTS" or "CROSSS"
	if (!defined $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{OPTION}) {
		return 0;
	}
    return $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{OPTION};
} # mtifc_get_covergroupitem_option_handle

############################################################
##    Function: mtifc_get_covergroupitem_numbins
##          in:  mode (a logical combination of $BIN_NORMAL, $BIN_IGNORE and/or $BIN_ILLEGAL)
##         out:  number of bins in this covergroupitem
##
## implicit in:  $covergroupitem_focus_index (integer index into covergroupitem list)
##
## Note: A covergroupitem is either "coverpoint" or "cross"
##
## Description: return the number of bins
##              in the ith covergroupitem
##              whose bin kind is a member of the "mode" set
############################################################

sub mtifc_get_covergroupitem_numbins {
    my ($class, $mode) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;
	my $add_value;
    
    ## Note: $covergroupitem_focus_kind is either "COVERPOINTS" or "CROSSS"
	$return_value = 0;
	if ($mode & $mtifc_parse_db::BIN_ILLEGAL) {
		$add_value = $#{ $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{BINS_ILLEGAL} } + 1;
		if (defined $add_value) { 
			$return_value = $return_value + $add_value; 
		};
	}
	if ($mode & $mtifc_parse_db::BIN_IGNORE) {
		$add_value = $#{ $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{BINS_IGNORE} } + 1;
		if (defined $add_value) { 
			$return_value = $return_value + $add_value; 
		};
	}
	if ($mode & $mtifc_parse_db::BIN_NORMAL) {
		$add_value = $#{ $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{BINS_NORMAL} } + 1;
		if (defined $add_value) { 
			$return_value = $return_value + $add_value; 
		};
	}
    return $return_value;
} # mtifc_get_covergroupitem_numbins

############################################################
##    Function: mtifc_get_ith_bin_handle
##          in:  integer index into bin list
##          in:  mode (a logical combination of $BIN_NORMAL, $BIN_IGNORE and/or $BIN_ILLEGAL)
##         out:  bin handle
##
## implicit in:  $covergroupitem_focus_index (integer index into covergroupitem list)
##
## Note: A covergroupitem is either "coverpoint" or "cross"
##
## Description: given the bin index (and the implicit $covergroupitem_focus_index) 
##              return a handle to the ith bin
##              whose bin kind is a member of the "mode" set
############################################################

sub mtifc_get_ith_bin_handle {
    my ($class, $bIndexNum, $mode) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $index_boundary;
    
    ## Note: $covergroupitem_focus_kind is either "COVERPOINTS" or "CROSSS"
	if ($mode & $mtifc_parse_db::BIN_ILLEGAL) {
		$index_boundary = $#{ $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{BINS_ILLEGAL} } + 1;
		if (defined $index_boundary) { 
			if ($bIndexNum < $index_boundary ) {
				return $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{BINS_ILLEGAL}[$bIndexNum];
			}
			$bIndexNum = $bIndexNum - $index_boundary
		}
	}
	if ($mode & $mtifc_parse_db::BIN_IGNORE) {
		$index_boundary = $#{ $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{BINS_IGNORE} } + 1;
		if (defined $index_boundary) { 
			if ($bIndexNum < $index_boundary ) {
				return $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{BINS_IGNORE}[$bIndexNum];
			}
			$bIndexNum = $bIndexNum - $index_boundary
		}
	}
	if ($mode & $mtifc_parse_db::BIN_NORMAL) {
		$index_boundary = $#{ $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{BINS_NORMAL} } + 1;
		if (defined $index_boundary) { 
			if ($bIndexNum < $index_boundary ) {
				return $this_database->{$covergroupitem_focus_kind}[$covergroupitem_focus_index]->{BINS_NORMAL}[$bIndexNum];
			}
			$bIndexNum = $bIndexNum - $index_boundary
		}
	}
	## Error! Index out of range!!!
    print "## ERROR: Index out of range for given 'bin mode'!\n";
    return 0;
} # mtifc_get_ith_bin_handle

############################################################
##    Function: mtifc_get_handle_name
##          in:  none
##         out:  bin handle name
##
## Description: given a bin handle 
##              return the name
############################################################

sub mtifc_get_handle_name {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    return $handle->{NAME};
} # mtifc_get_handle_name

############################################################
##    Function: mtifc_get_handle_metric
##          in:  none
##         out:  bin handle metric value
##
## Description: given a bin handle 
##              return the metric
############################################################

sub mtifc_get_handle_metric {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    return $handle->{METRIC};
} # mtifc_get_handle_metric

############################################################
##    Function: mtifc_get_handle_goal
##          in:  none
##         out:  bin handle goal value
##
## Description: given a bin handle 
##              return the goal
############################################################

sub mtifc_get_handle_goal {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    return $handle->{GOAL};
} # mtifc_get_handle_goal

############################################################
##    Function: mtifc_get_handle_status
##          in:  none
##         out:  bin handle status value
##
## Description: given a bin handle 
##              return the status
############################################################

sub mtifc_get_handle_status {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    return $handle->{STATUS};
} # mtifc_get_handle_status

############################################################
##    Function: mtifc_get_handle_kind
##          in:  bin handle
##         out:  $BIN_NORMAL, $BIN_IGNORE or $BIN_ILLEGAL
##
## Description: given a bin handle 
##              return the bin kind
############################################################

sub mtifc_get_handle_kind {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
    return $handle->{BIN_KIND};
} # mtifc_get_handle_kind

############################################################
##    Function: mtifc_get_bin_num_rhs
##          in:  bin handle
##         out:  number of RHS in this bin
##
## Description: return the number of RHS
##              in the bin associated with the given handle
############################################################

sub mtifc_get_bin_num_rhs {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle->{BIN_RHS_STR}) { return 0 };
    return $#{ $handle->{BIN_RHS}} + 1;
} # mtifc_get_bin_num_rhs

############################################################
##    Function: mtifc_get_ith_bin_rhs_value
##          in:  bin handle
##          in:  integer index into bin RHS list
##		   out:  the ith RHS of this bin
##
## Example values:
##     $SINGLE example values:
##          1
##          600
##          default_sequence
##          default
##     $RANGE example values:
##          1:2
##          300:302
##     $TRANSITION example values:
##          1=>3=>4=>5
##          2[->1:4]=>3[->1:4]=>4
##     $CROSSBIN example values:
##          <y3[2], z1, x2[4]> 
##          <y3[3], z1, x2[4]>
## Description: return the ith RHS
##              for the bin associated with the given handle
############################################################

sub mtifc_get_ith_bin_rhs_value {
    my ($class, $handle, $bcIndex) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;

	if (!defined $handle->{BIN_RHS_STR}) { return "" };
	$return_value = $handle->{BIN_RHS}[$bcIndex];
	return $return_value;
} # mtifc_get_ith_bin_rhs_value

############################################################
##    Function: mtifc_get_bin_rhs_values
##          in:  bin handle
##		   out:  the RHS list of this bin
##
## Example values:
##     Standard example values:
##          1;1:2;600;300:302
##     $TRANSITION example values:
##          1=>3=>4=>5;2[->1:4]=>3[->1:4]=>4
##     $CROSSBIN example values:
##          <y3[2], z1, x2[4]>;<y3[3], z1, x2[4]>
## Description: return the RHS list
##              for the bin associated with the given handle
############################################################

sub mtifc_get_bin_rhs_values {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;

	if (!defined $handle->{BIN_RHS_STR}) { return "" };
	$return_value = $handle->{BIN_RHS_STR};
	return $return_value;
} # mtifc_get_bin_rhs_values

############################################################
##    Function: mtifc_get_bin_rhs_kind
##          in:  bin RHS value
##         out:  $SINGLE, $RANGE, $TRANSITION or $CROSSBIN
##
## Description: given a bin RHS value 
##              return the RHS kind
############################################################

sub mtifc_get_bin_rhs_kind {
    my ($class, $bin_rhs_value) = @_;
    my $this_database = $class->{THIS_DATABASE};
	my $return_value;

	$return_value = $mtifc_parse_db::SINGLE;
	if ($bin_rhs_value =~ m/:/) {
		$return_value = $mtifc_parse_db::RANGE;
	}
	if ($bin_rhs_value =~ m/=>/) {
		$return_value = $mtifc_parse_db::TRANSITION;
	}
	if ($bin_rhs_value =~ m/</) {
		$return_value = $mtifc_parse_db::CROSSBIN;
	}

	return $return_value;    
} # mtifc_get_bin_rhs_kind

############################################################
##    Function: mtifc_get_instance_name
##          in:  covergroup option handle
##         out:  instance name
##
## Description: return the instance name
##              given a covergroup option handle
############################################################

sub mtifc_get_instance_name {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle) { return $mtifc_parse_db::NONE };
	if ($handle == 0) { return $mtifc_parse_db::NONE };
	if (!defined $handle->{NAME}) { return $mtifc_parse_db::NONE };
    return $handle->{NAME};
} # mtifc_get_instance_name

############################################################
##    Function: mtifc_get_weight
##          in:  option or type_option handle
##         out:  "weight" value
##
## Description: return the "weight" value
##              given an option or type_option handle
############################################################

sub mtifc_get_weight {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle) { return $mtifc_parse_db::NA };
	if ($handle == 0) { return $mtifc_parse_db::NA };
	if (!defined $handle->{WEIGHT}) { return $mtifc_parse_db::NA };
    return $handle->{WEIGHT};
} # mtifc_get_weight

############################################################
##    Function: mtifc_get_goal
##          in:  option or type_option handle
##         out:  "goal" value
##
## Description: return the "goal" value
##              given an option or type_option handle
############################################################

sub mtifc_get_goal {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle) { return $mtifc_parse_db::NA };
	if ($handle == 0) { return $mtifc_parse_db::NA };
	if (!defined $handle->{GOAL}) { return $mtifc_parse_db::NA };
    return $handle->{GOAL};
} # mtifc_get_goal

############################################################
##    Function: mtifc_get_comment
##          in:  option or type_option handle
##         out:  "comment" value
##
## Description: return the "comment" value
##              given an option or type_option handle
############################################################

sub mtifc_get_comment {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle) { return $mtifc_parse_db::NONE };
	if ($handle == 0) { return $mtifc_parse_db::NONE };
	if (!defined $handle->{COMMENT}) { return $mtifc_parse_db::NONE };
    return $handle->{COMMENT};
} # mtifc_get_comment

############################################################
##    Function: mtifc_get_strobe
##          in:  type_option handle
##         out:  "strobe" value
##
## Description: return the "strobe" value
##              given a type_option handle
############################################################

sub mtifc_get_strobe {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle) { return $mtifc_parse_db::NA };
	if ($handle == 0) { return $mtifc_parse_db::NA };
	if (!defined $handle->{STROBE}) { return $mtifc_parse_db::NA };
    return $handle->{STROBE};
} # mtifc_get_strobe

############################################################
##    Function: mtifc_get_at_least
##          in:  option handle
##         out:  "at least" value
##
## Description: return the "at least" value
##              given a option handle
############################################################

sub mtifc_get_at_least {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle) { return $mtifc_parse_db::NA };
	if ($handle == 0) { return $mtifc_parse_db::NA };
	if (!defined $handle->{AT_LEAST}) { return $mtifc_parse_db::NA };
    return $handle->{AT_LEAST};
} # mtifc_get_at_least

############################################################
##    Function: mtifc_get_auto_bin_max
##          in:  option handle
##         out:  "auto bin max" value
##
## Description: return the "auto bin max" value
##              given a option handle
############################################################

sub mtifc_get_auto_bin_max {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle) { return $mtifc_parse_db::NA };
	if ($handle == 0) { return $mtifc_parse_db::NA };
	if (!defined $handle->{AUTO_BIN_MAX}) { return $mtifc_parse_db::NA };
    return $handle->{AUTO_BIN_MAX};
} # mtifc_get_auto_bin_max

############################################################
##    Function: mtifc_get_cross_num_print_missing
##          in:  option handle
##         out:  "cross num print missing" value
##
## Description: return the "cross num print missing" value
##              given a option handle
############################################################

sub mtifc_get_cross_num_print_missing {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle) { return $mtifc_parse_db::NA };
	if ($handle == 0) { return $mtifc_parse_db::NA };
	if (!defined $handle->{CROSS_NUM_PRINT_MISSING}) { return $mtifc_parse_db::NA };
    return $handle->{CROSS_NUM_PRINT_MISSING};
} # mtifc_get_cross_num_print_missing

############################################################
##    Function: mtifc_get_detect_overlap
##          in:  option handle
##         out:  detect overlap value
##
## Description: return the detect overlap value
##              given a option handle
############################################################

sub mtifc_get_detect_overlap {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle) { return $mtifc_parse_db::NA };
	if ($handle == 0) { return $mtifc_parse_db::NA };
	if (!defined $handle->{DETECT_OVERLAP}) { return $mtifc_parse_db::NA };
    return $handle->{DETECT_OVERLAP};
} # mtifc_get_detect_overlap

############################################################
##    Function: mtifc_get_per_instance
##          in:  covergroup option handle
##         out:  per-instance value
##
## Description: return the per-instance value
##              given a covergroup option handle
############################################################

sub mtifc_get_per_instance {
    my ($class, $handle) = @_;
    my $this_database = $class->{THIS_DATABASE};
    
	if (!defined $handle) { return $mtifc_parse_db::NA };
	if ($handle == 0) { return $mtifc_parse_db::NA };
	if (!defined $handle->{PER_INSTANCE}) { return $mtifc_parse_db::NA };
    return $handle->{PER_INSTANCE};
} # mtifc_get_per_instance

##########
## DONE ##
##########

1;
