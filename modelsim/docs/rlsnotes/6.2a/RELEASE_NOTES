
                   Release Notes For ModelSim Altera 6.2a

                 Copyright 2006 Mentor Graphics Corporation
                            All rights reserved.
  This document contains information that is proprietary to Mentor Graphics
                                Corporation.
    The original recipient of this document may duplicate this document in
                                whole or in
  part for internal business purposes only, provided that this entire notice
                               appears in all
  copies. In duplicating any part of this document, the recipient agrees to
                                 make every
  reasonable effort to prevent the unauthorized use and distribution of the
                                proprietary
                                information.



                                Jun 16 2006
   ______________________________________________________________________

     Product Installation and Licensing Information
   For  brief  instructions  about  product installation please visit the
   "install_notes" file in www.model.com. The install_notes file can be viewed
   at:
   [1]http://www.model.com/products/release.asp
   For detailed information about product installation and licensing see the
   ModelSim Start Here Guide. The manual can be downloaded from:
   [2]http://www.model.com/support/documentation.asp


     Release Notes Archives
   For release notes of previous versions visit the release notes archive at:
   [3]http://www.model.com/support/default.asp
   or  find  them  in  the installed modeltech tree in <path to modeltech
   installation>/docs/rlsnotes


     How to get Support

   This OEM product is supported by Altera Corporation
     * World-Wide-Web Support
       [4]http://www.altera.com/mySupport


   ______________________________________________________________________

  Index to Release Notes

     [5]Key Information

     [6]User Interface Defects Repaired in 6.2a

     [7]Verilog Defects Repaired in 6.2a

     [8]PLI Defects Repaired in 6.2a

     [9]VHDL Defects Repaired in 6.2a

     [10]FLI Defects Repaired in 6.2a

     [11]VITAL Defects Repaired in 6.2a

     [12]SystemC Defects Repaired in 6.2a

     [13]Assertion Defects Repaired in 6.2a

     [14]Mixed Language Defects Repaired in 6.2a

     [15]General Defects Repaired in 6.2a

     [16]Mentor Graphics DRs Repaired in 6.2a

     [17]Known Defects in 6.2a

     [18]Product Changes to 6.2a

     [19]New Features Added to 6.2a
   ______________________________________________________________________

   Key Information
     * The automatic invocation of the design-wide performance optimization
       tool "vopt" has been enabled. Upon invocation, the simulator determines
       if vopt has been run on the top-level module(s) you supplied; if not,
       the simulator invokes vopt and outputs a message similar to:
       # ** Note: (vsim-3812) Design is being optimized...
       The optimization step will improve run time performance and affect the
       visibility of objects in the design. To enable debug visibility it is
       recommended you add additional options to vopt on the vsim invocation
       via the -voptargs argument. For example: vsim -voptargs="+acc" which
       enables  full  debug access to objects in the optimized design. To
       understand the full usage of +acc and -voptargs, please refer to the
       chapter "Optimizing Designs with vopt" in the User's Manual for more
       information.
       If required you may obtain the previous behavior of vsim, where it does
       not perform performance optimizations, by setting the modelsim.ini
       variable "VoptFlow" to 0 (zero). An alternative to setting VoptFlow to
       zero, where interactive debug compile throughput is required you can use
       the -novopt option on the vsim and compilation command line (vcom/vlog).
     * The RedHat Enterprise Linux 4 is supported as of the 6.1b release.
       The support includes the following platforms:
          + 32-bit linux
          + 64-bit linux_x86_64
       For a complete list of supported platforms see the Install Guide under
       the section Supported platforms.
     * The following platforms will be discontinued as of the 6.3 release:
          + HPUX Platforms - hp700, hppa64
          + AIX Platforms - rs6000, rs64
       The following platforms are discontinued as of the 6.2 release:
          + Windows 98
          + Windows ME
          + Windows NT 4.0
          + Solaris 2.6
          + Solaris 7
          + AIX 4.3
     * Solaris OS 10 is supported as of the 6.1a release. Solaris OS 10 support
       includes SystemC. However, cdebug is not supported.
        Solaris 10 has the following limitations:
          + In the OS, vt alarm is producing irregular and random beats between
            20ms  and 100ms. As a result, the profiler produces the error
            message, "Too few samples." To workaround this problem, add the
            following line to the file /etc/system and reboot the system:
            set hires_tick=1
            This will produce consistent sample times. The minimum sample time
            will be 20ms. This problem has been filed as Sun CR 6290459 and
            will be fixed in a coming kernel patch. With the patch, the minimum
            sample time will be approximately 10ms, as in previous Solaris
            releases.
          + In rare cases, simulations using sockets via the FLI may hang the
            system  and  produce  a  messages  like "nfs server array not
            responding" may be produced. This problem has been filed as Sun CR
            6296698.
          + In Solaris 10, g7 is always reserved. Any PLI/FLI/DPI using g7 will
            break under Solaris 10.
     * The following platform changes are effective as of the 6.0 release.
          + The 64-bit simulator is supported on the AMD Opteron and compatible
            processors  running 64-bit Linux (SuSE 9.0 (x86-64) or RedHat
            Enterprise Linux WS release 3) as the linux_x86_64 platform. The
            profiling feature is not supported in 64-bit mode. The 32-bit
            simulator for the linux platform may also be installed and used
            concurrently on these systems.
          + RedHat 6.0 through 7.1 are no longer supported.
     * You must recompile or refresh your models if you are moving forward from
       6.0x  or  earlier  release versions. See "Regenerating your design
       libraries" in the User's Manual for more information on refreshing your
       models.
     * Acrobat reader version 4.0 or greater must be used to read any .pdf file
       contained in version 5.5c or greater.
     * The HP-UX 10.20 platform is no longer supported as of the 5.7 release.
       The hp700 platform executables are built on HP-UX 11.0. Please note that
       in  order  for  FLI/PLI shared libraries to be loaded and executed
       correctly by the hp700 version of vsim, they must be compiled and linked
       on HP-UX 11.0.
     * Beginning with the 5.6 release (on Windows platforms only), attempts to
       link in libvsim.lib or tk83.lib using the Microsoft Visual C++ linker
       version 5.0 will fail with a message similar to "Invalid file or disk
       full: cannot seek to 0xaa77b00". Microsoft Visual C++ version 6.0 should
       be used.
     * Beginning in the 5.8 release, SDF files compressed in the Unix compress
       format (.Z) are no longer supported, but the GNU zip format (.gz)is
       supported. Therefore, we only read in compressed SDF files that are
       created with the GNU zip (gzip) extension. A file is not require to have
       a .gz extension, but it will error on files that have a .Z extension.
     * As of release 6.3, the linux versions of gcc 3.2.3 and 3.3 compilers
       will be replaced with version 4.0.2. This means that gcc 3.2.X and 3.3
       will  not  be supported or distributed as of release 6.3. Only the
       following versions will be supported in 6.3:
          + gcc-3.3.1-mingw32
          + gcc-4.0.2-linux_x86_64
          + gcc-4.0.2-rhe21
          + gcc-3.3-sunos58
          + gcc-3.3-sunos59
          + gcc-3.3-sunos510
       In order to facilitate an easy transition for users, both gcc 3 and gcc
       4 will be supported and distributed in release 6.2. Since support for
       64-bit SystemC on linux_x86_64 was added in release 6.2, linux_x86_64
       will  only  be supported with the gcc 4.0.2 release. The following
       versions are supported in 6.2:
          + gcc-3.3.1-mingw32
          + gcc-4.0.2-linux_x86_64
          + gcc-3.2.3-rhe21
          + gcc-4.0.2-rhe21
          + gcc-3.3-sunos58
          + gcc-3.3-sunos59
          + gcc-3.3-sunos510
       The  is no change on the hp700 platform and it will continue to be
       supported with aCC 3.45.
       Support of SystemC has dependencies on both operating system versions
       and C++ compiler versions.
       OS dependencies are slightly different for designs with and without
       SystemC content.
       Supported Operating Systems for designs with SystemC content:
          + RedHat 7.3 and greater
          + RedHat EWS2.1/7.2 and greater (simulation environment version 5.8b
            and greater)
          + Solaris 8, 9, and 10
          + HP-UX 11.0 and greater
          + Win32 XP and 2000 (Simulation environment versions 6.0 and greater)
     * The LE product does not support VHDL. However, it does support Verilog
       and SystemC.
     * CDEBUG compatibility information by platform.
          + On HP-UX 11.0, the built-in HP wdb 3.3 program is used as the
            underlying C/C++ debugger. In order to run wdb successfully, you
            must have installed HP-UX PHSS_23842, or a superseding patch.
            Without this patch installed, error messages will occur during
            CDEBUG startup.
          + On rs6000, gdb-6.0 works with gcc-3.2. Additionally, when creating
            shared objects, 'ld' (/bin/ld) should be used, not 'gcc'. This
            combination works with AIX-5.1. On AIX-5.1 use gcc-3.2-aix51. The
            native compiler /bin/cc is not compatible with gdb-6.0.
     * The vcom compiler default language has been changed from VHDL-1987 to
       VHDL-2002. To choose a specific language version:
          + select the appropriate version from the compiler options menu in
            the GUI,
          + invoke vcom using switches -87, -93, or -2002, or
          + set the VHDL93 variable in the [vcom] section of modelsim.ini.
            Appropriate values for VHDL93 are:
               o 0, 87, or 1987 for VHDL-1987;
               o 1, 93, or 1993 for VHDL-1993;
               o 2, 02, or 2002 for VHDL-2002.
     * Although  the  vlog compiler currently supports some SystemVerilog
       features, these extensions are not enabled by default because they
       require new language keywords that may conflict with identifiers in
       existing code. There are two ways to enable SystemVerilog features: the
       first is by using the -sv command line option and the second is by
       naming the source file with a ".sv" suffix.
     * The EM64T platform is supported as of the 6.0b release.
       The support includes EM64T machines loaded with Suse 9.1 OS or RedHat
       Enterprise Linux 3 Update 3 OS and the following linux configurations.
          + 32-bit linux
          + 64-bit linux_x86_64
       FlexLM v8.2a (which is currently shipped in 6.0x) is not supported on an
       EM64T machine loaded with Suse 9.1 OS.
     * The 6.1 release will use the following licensing versions: FLEXlm v9.5;
       Mentor Graphics Licensing MGLS v2004.2 and PCLS 2004.328.
       CRITICAL LICENSING INFORMATION:
       For this release of the product, the FLEXlm licensing software being
       used is version 9.5. For floating licenses it will be necessary to
       verify that the vendor daemon (i.e., mgcld) and the license server
       (i.e., lmgrd) have FLEXlm versions equal to or greater than 9.5. The
       vendor daemons and lmgrd that are shipped with this release will be
       FLEXlm version 9.5. If the current FLEXlm version of your vendor daemon
       and lmgrd are less than 9.5 then it will be necessary to stop your
       license  server  and  restart it using the vendor daemon and lmgrd
       contained in this release. If you use node locked licenses you don't
       need to do anything.
     * SystemVerilog Program blocks are now supported except for the $exit()
       task.
     * The default time unit for SystemC can be set using the "ScTimeUnit"
       variable in the modelsim.ini file. By default ScTimeUnit is set to 1 ns.
       The  default  time  unit  in  SystemC  can  also  be set using the
       sc_set_default_time_unit() function before any time based object like
       sc_clock or sc_time is created.
     * vlog,vcom and vopt command line options will be case sensitive similar
       to the vsim command line options.
     * Starting in the 6.1 release, the vsim -dpiexportobj option has changed
       behavior somewhat. This primarily affects win32 and rs6000 users.
         1. You shouldn't put an extension on the object filename. That will be
            done for you automatically now.
         2. There is no longer a need to add "-c -do 'quit -f'" to the vsim
            -dpiexportobj command line.
       The examples/systemverilog/dpi/simple_calls runtest.bat files have been
       modified to show the correct flow now.
     * Due to some bug fixes, some VHDL models compiled with 6.1b or higher
       will not run under 6.1 and 6.1a. These models will generate the error:
       # ** Fatal: (vsim-3274) Empty built-in function pointer (511).
       # Either this version of vsim is not compatible with the compiled
       # version of the libraries that were loaded or a required shared library
       # was not loaded. Please recompile the libraries with -refresh or make
       # sure you specify the required shared library to vsim.
     * The product documentation contains a new look and feel for this release.
       You will find links to the documentation in your Help dropdown menu. PDF
       documentation is available from the PDF Bookcase menu item and HTML
       documentation (if shipped with the product) is available from the Help &
       Manuals menu item.
       The following browsers are unsupported for the HTML documentation:
          + Netscape versions 4.x and 6.x
          + Opera versions 6.x and 7.x
       We  regret  we cannot support these browsers for use with the HTML
       documentation. We recommend upgrading to a new browser:
       Sun Solaris: Upgrade to Mozilla:
          + http://www.mozilla.org/
          + http://wwws.sun.com/software/solaris/browser/index.html
       HPUX: Upgrade to Mozilla:
          + http://www.mozilla.org/
          + http://www.hp.com/products1/unix/java/mozilla/index.html
       Linux: Upgrade to Mozilla:
          + http://www.mozilla.org/
       Windows:  Upgrade  to Netscape 7.2 or newer, Internet Explorer, or
       Mozilla:
          + http://browser.netscape.com/ns8/download/default.jsp
          + http://www.microsoft.com/windows/ie/default.mspx/
          + http://www.mozilla.org/
     * This release includes a new dongle driver installer for Windows. The new
       dongle driver versions that will be installed are as follows:
          + Aladdin (FLEXID=9-) driver version 4.96
          + Dallas (FLEXID=8-) driver version 3.2.1.11
          + Sentinel (FLEXID=6-)/(FLEXID=7-) driver version 5.41
       The new dongle driver installer will install these drivers only if they
       are newer than the currently installed dongle drivers on your Windows
       system.
     * The following lists the supported platforms:
          + win32aloem - Windows 2000, XP
          + sunos5aloem - Solaris 8, 9
          + hp700aloem - HP-UX 11
          + linuxaloem - RedHat 7.2 and higher.
   ______________________________________________________________________

   User Interface Defects Repaired in 6.2a
     * When  the automatic loading of a project failed at invocation, the
       registry was not cleared and on subsequent invocations the simulator
       attempted and failed to load the same project again. The registry is now
       reset after a failed project load.
     * The command examine can index into an associative array using key.
       Here is an example: "examine days(september)"
     * Rarely, virtual glitches in the Wave window disappeared when greatly
       zoomed out while viewing or simulating very large wlf files.
     * The GUI crashed after loading and running for 1ns if in the loaded
       design Coverpoints had no user bins left to be crossed.
     * There were two problems with searching in the Wave and List window for
       signal values on vectors. First, if the radix was set by the radix
       command, rather than directly clicking on the signal, the search failed
       to properly interpret the target value. Secondly, if the radix were set
       to decimal or unsigned, the initial target value was shown in double
       quotes, which caused the evaluator to fail.
     * An invalid object path name as a command argument sometimes resulted in
       an unexpected match because Verilog "upwards searching" rules were
       applied to each element of the path name.
     * The Toggle tab within the Missed Coverage pane now follows the selection
       of the Instance Coverage pane, just as the Statement, Branch, Expression
       and Condition tabs.
     * Under some circumstances, setting breakpoints using the GUI source
       viewer did not work.
     * Radix binary waveforms for integer signals were displayed incorrectly.
     * The toolbar icons were not updated appropriately after selections in the
       Wave window.
     * If a window pane was undocked and minimized when ModelSim was shut down,
       the next time ModelSim was run, the window was withdrawn with no way to
       make it reappear without reseting all the window layouts.
     * The automatic saving of virtuals when a simulation session was quit in
       certain  cases  hung  the GUI if the virtuals.do file (or the file
       specified by the preference setting Main DefaultVirtualFileName) was not
       writeable.
     * The -height option was ignored when adding wave groups.
     * The behavior of drag-N-drop into a Dataflow window had formerly caused
       the display update operation to be done immediately, effectively locking
       the  user interface until the operation was complete. Now the drop
       operation causes an add dataflow command to be executed; this command
       will be seen in the Transcript pane.
     * The user could not change the display name of signals within a group.
     * ModelSim crashed when using the virtual delete command with a wildcard
       pattern and there was a match with non-virtual items.
     * The Wave Mouse Mode toolbar did not update correctly when the Wave
       window was undocked.
     * The gdb output radix is now in sync with the global default radix in the
       current  simulation.  Refer to the radix command documentation for
       changing the global default radix.
     * Display  of  data  from  a  WLF  file  was  incorrect  for Verilog
       multi-dimensional bit arrays of the form: "bit [K:0] L0 [P]".
     * The "compile to" field (and other sccom compiler options) for SystemC
       objects in the project manager were ignored.
     * Clocking  block  signals are now visible in the user interface and
       available for waveform logging.
     * Waveform printing now handles labels too large to fit into the waveform
       by replacing characters in the label with '...' or removing the label
       instead of scaling down the font for the label.
     * The  waveform  printing interface no handles sizes specified in cm
       correctly.
     * Dynamic items displayed in the Object window (e.g. class instances,
       dynamic arrays, etc.), when expanded, collapsed after a step or run
       command, or when resizing a column.
     * The Tcl command "validTime" did not correctly identify invalid time
       values in all cases. Also, the Tcl command "divTime" caused a crash when
       dividing by 0 (zero).
     * The [formatTime] command controls the formating of time values displayed
       in some locations in the U/I windows and the return values of the *Time
       commands (e.g. addTime). The [+|-]bestunits option did not work in most
       cases. The +nodefunit (no default unit) option and the +bestunits, when
       combined, resulted in incorrect time values.
     * The Source window cursor shape changed to an arrow after a drag and drop
       operation.
     * The font in the memory contents pane can now be changed through "Tools"
       -> "Edit Preference",
          + select "By Name" Tab,
          + select "Memory" in the window list,
          + then select "contentsFont" from the preference list.
     * If a create wave was mapped to an assertion the simulator crashed.
     * If the simulator U/I could not find a source file when viewing coverage
       results, error messages were generated and the coverage windows did not
       update. Now, the windows will show the coverage information without the
       corresponding source statements.
     * A WLF writer bug caused optimizations to inadvertently be disabled, in
       some cases, if a large number of signals (>50,000) was logged after time
       0. This resulted in slower than expected wave window drawing speed and
       potentially a vsim assertion.
     * The coverage report -toggles command prints alias nodes and the coverage
       report -totals command prints counts of alias nodes. The node count was
       incorrect.
   ______________________________________________________________________

   Verilog Defects Repaired in 6.2a
     * Forcing a net with a "Z" value now forces a value of HiZ. Previously a
       value of StX was incorrectly forced.
     * SystemVerilog DPI now functions correctly on designs that have default
       top level libraries named something other than "work".
     * Verilog 2001 has a keyword "unsigned" that was not used in the syntax. A
       compiler warning is now produced if this keyword is encountered in
       Verilog 2001 source.
     * Unpacked unions are now initialized using the type of the first member,
       as specified in Section 4.11 of the P1800 SystemVerilog LRM. Previously,
       unpacked unions were initialized to all 0's.
     * SystemVerilog designs may now use reg-type variables (e.g. 'buf') as
       outputs in primitive gates.
     * If code coverage was turned on within a SystemVerilog package or global
       declaration region, the simulator crashed in certain cases.
     * In order to use SystemVerilog "std" package types such as "semaphore",
       "process" and "mailbox" or the function std::randomize() the default
       modelsim.ini now contains a mapping for the sv_std library. If the
       compiler or simulator report an error message like:
       ** Error: (vlog-19) Failed to access library 'sv_std' at "sv_std".
       Then most likely there is a local copy of the modelsim.ini file that
       needs  a  mapping for sv_std. To update the local copy execute the
       command:
       vmap sv_std \$MODEL_TECH/../sv_std
     * I/O Paths of X outputs due to notifier toggles (timing check violations)
       were sometimes incorrectly scheduled in zero delay.
     * Previously, some "sv_seed" values yielded non-unique sequences of random
       numbers (affecting SystemVerilog $urandom, randcase, randsequence,
       randomize). Now no two "sv_seed" values will generate the same sequence
       of random numbers.
     * Unconnected ports of gate-level optimized cells were not visible to the
       GUI.
     * Hierarchical name resolution for upwards name referencing has been
       refined to match the clarifications in the IEEE 1364-2005 specification.
     * The tcheck_stat command did not display the same status for optimized
       and unoptimized cells when the timing checks had negative limits.
     * In some situations the simulator would not resolve references involving
       mixes of static path qualifiers ('::') and method or property selection
       ('.').
     * When using a hierarchical path to access an array which was a class
       property the simulator encountered a fatal error.
     * SDF annotation of Verilog in a mixed design caused a simulation crash in
       some cases.
     * When used in a package, nested parameterized class specializations or
       specializations within another class caused an elaboration failure.
     * Always_comb is now more compliant with the LRM. It will no longer be
       sensitive  to  class  references,  and  it will attempt to use the
       longest-static-prefix of each operand referenced inside.
     * The SystemVerilog literals '1, 'x, and 'z were incorrectly zero extended
       in some contexts.
     * An associative array within a class could not be read using $readmem.
     * Vopt was incorrectly optimizing away assignments to SystemVerilog class
       variables in some cases where no fields of the class were being directly
       referenced.
     * The vlog compiler incorrectly reported circular type dependency errors
       in some cases with forward definitions of class types. These definitions
       are now accepted.
     * SystemVerilog packages were not being compiled into libraries specified
       in a map file.
     * An out-of-bounds bit-select of a vector net in the context of an rhs
       expression resulted in an elaboration error in some cases rather than
       the appropriate evaluation to 1'bx.
     * Type-checking for unpacked array assignments is now stricter, matching
       the requirements of LRM section 5.7. Previously, we were not checking
       packed elements of the arrays for type-equivalence. Example:
       reg [3:0] a[1:0];
       reg [4:0] b[1:0];
       bit [3:0] c[1:0];
       initial
       begin
       a = b; // Illegal now, as elements are different sizes.
       a = c; // Illegal now, as a's elem. is 4-state, c's is 2-state.
     * SystemVerilog variables having non-X initial values failed to have the
       initial value propagated through continuous assignments in some cases.
     * In some cases vopt generated an internal error for assignment statements
       using the SystemVerilog "iff" qualifier. For example:
       wdata <= @(posedge clk iff ready) 1'b1;
       These errors only occurred if the variable being assigned to was unused
       in the design.
     * In some cases SystemVerilog code with multiple packages generated the
       following an internal error:
       Internal         error:         ../../../src/vlog/vallocate.c(607)
       vl_current_nesting_level <= save_current_nesting_level
     * Setuphold or recrem timing checks with limit sums less than zero where
       not always having their negative limits zeroed.
     * Using class members or field selects as actuals to an output or ref task
       or function formal in certain cases resulted in incorrect results. This
       directly impacted the use of the mailbox "get" method.
     * X-generation due to $width or $period timing check violations in certain
       cases caused an optimized cell instance to produce incorrect result on
       the next active clock.
     * The  simulator did not recognize a replication with a non-constant
       multiplier as a 'string' replication, as required in Table 4.2 of the
       LRM.
     * Blocking  assignments  to members of classes inside program blocks
       reported incorrect hierarchical assignment errors.
     * When  setuphold  or  recrem  timingchecks are coded with ambiguous
       conditions (descriptions with both event conditions and check or stamp
       condition arguments) the event conditions are ignored and the check or
       stamp  condition arguments used. The old default was to ignore the
       check/stamp condition arguments and use the event conditions. The old
       method can be selected by using the vlog +no_ambig_checkstamp_conds
       command line option.
     * If a call to $display system task contains a function call which also
       called $display, the simulator crashed.
     * vlog placed design units dependent on $unit declarations in the current
       work library rather than the library designated in a libmap file. In
       certain cases this resulted in an export_lookup() failure messages and
       crash within vsim when the design was subsequently loaded.
     * Using SystemVerilog with condition coverage in certain cases resulted in
       corrupted simulation data if the condition of a ternary expression was
       2-state.
     * Out of bounds part-selects failed to return X in the out of bounds bit
       positions.
     * The simulator failed to make port connections for unpacked arrays if
       they were used with arrays of instances and issued illegal unpacked to
       packed type port connection error messages.
     * There was a problem in which toggle coverage failed to work for Verilog
       modules in vopt mode, when compiled with the -cover t option.
     * In some cases, a vopt optimization incorrectly removed an "initial" or
       "always" construct that wrote to a variable that was also read inside a
       called task or function.
     * The SystemVerilog "string" type referenced as a class member in the
       format string argument of the $display family of system tasks resulted
       in a crash during elaboration.
     * In some cases, always_comb and always_latch blocks produced incorrect
       results during initialization. A common symptom was that $monitor()
       displayed  multiple  values  for  the  outputs  of always_comb and
       always_latch blocks at time zero.
     * Function calls, from Verilog HDL, to
       $enable_signal_spy()/$disable_signal_spy() were not accepted when the
       3rd argument was specified.
     * When a register (non-wire) was used as an input to a UDP, the UDP did
       not activate properly if compiled as SystemVerilog.
     * A hierarchical reference to a primitive instance resulted in a vopt
       internal error.
     * In certain cases, vopt crashed when optimizing cells with conditional
       timing checks.
     * Use of the tcheck_status command with the +delayed_timing_checks option
       caused a segmentation violation in certain cases.
     * System tasks, such as the scanf family, failed to write to complex
       output   arguments   such   as  part-selects,  field-selects,  and
       concatenations.
     * ModelSim  could produce incorrect values for nets in SystemVerilog
       designs when the Verilog "force" was used with a constant value.
     * Task and function formals of modes ref would not accept user defined
       and/or packed types. Invalid associations with ref formals were not
       being reported as errors.
     * Hierarchical  references  from packages were not being reported as
       illegal.
     * SVA action blocks incorrectly accepted a null statement followed by a
       ';' preceding the 'else' portion of an assert statement. The 'else'
       portion of the block could be incorrectly associated with the assert
       statement instead of the surrounding if/else statement.
     * In  some  cases,  particularly involving 2state bit selects, index
       expressions could produce an incorrect index value.
     * Designs containing generate case statements with nested procedural
       blocks containing case statements could encounter fatal errors during
       elaboration.
     * The $fwrite and $fdisplay system tasks failed to write NUL characters to
       the  output file with the %c format specifier. Previously, the NUL
       character terminated the format string and neither the NUL character nor
       the rest of the format string was written to the file.
     * Optimization could take a long time for larger designs when modules were
       compiled with +incdir options.
     * An optimization of a "repeat (1)" statement under the default label of a
       case statement resulted in an internal error during compilation.
     * An  inversion  of  an or-reduction expression (and other reduction
       operators) evaluated to incorrect results in some cases.
     * A  reference to a package enum value such as pkg::enum_value could
       incorrectly report an error about being an invalid LHS when used as a
       function or task actual argument.
     * From a derived class, calling a virtual function method of the form
       "super.f" without parenthesis could lead to an infinite recursion and
       cause a fatal error.
     * The [formatTime] command controls the formating of time values displayed
       in some locations in the U/I windows and the return values of the *Time
       commands (e.g. addTime). The [+|-]bestunits option did not work in most
       cases. The +nodefunit (no default unit) option and the +bestunits, when
       combined, would result in incorrect time values. These issues have been
       resolved.
     * Elaboration  errors  resulted  for  modules  that contained both a
       parameterized class specialization and a VHDL instantiation where the
       VHDL instantiation had a Verilog or SystemVerilog descendent.
     * Parameterized class specializations with type parameters would not
       differentiate between specializations with different enum types.
     * The  tcheck_set  command  did  not  properly  process timing check
       descriptions containing vector slices.
     * Notifier toggles generated in always blocks were not evaluated correctly
       in all cases when the module was cell optimized.
     * Compilation of a scalar bitwise-and or bitwise-or expression with many
       terms consumed excessive CPU time and memory.
     * Randomize failed (return 0) if requested to randomize a 'randc' variable
       greater than 32-bits.
     * Associative arrays with a class type for the key did not allow subclass
       types to be used for the key.
     * Event triggers on automatic variables and non-static class fields missed
       some events if more than one process blocked on the same variable.
     * Breaking  and  continuing  in  a  parameterized  class  method  or
       single-stepping through parameterized class methods sometimes crashed
       the simulator.
     * Variable  declarations in SystemVerilog packages that contained an
       initialization assignment using a system function caused an internal
       error.
     * SystemVerilog incorrectly handled memory initialization on a restart.
       This resulted in a crash when running a SV design, after the restart had
       completed successfully. The initialization of memory during restart is
       now handled correctly.
     * The $itor system function produced incorrect results for arguments
       greater than 32-bits wide and signed arguments less than 32-bits wide.
   ______________________________________________________________________

   PLI Defects Repaired in 6.2a
     * There were some minor defects in the case where VPI requests should
       return NULL. The simulator crashed if vpi_iterate or vpi_scan were used
       with vpiMemory and returned no elements. Also, when vpi_handle requested
       a timing check notifier on a vpiTchk object which had no notifier.
     * The simulator crashed if vpiType was queried on a vpiArgument of a
       user-defined systf that was an Array of Real.
     * It is now possible to pass automatic arrays as user-defined system
       task/function arguments, without generating a compile error.
     * vpiMemory, vpiMemoryWord and vpiRegArray handling has been changed to
       align it with the IEEE P1364-2005 Object Model. In particular, vpiMemory
       and  vpiMemoryWord  are now tags only, not object types. Using the
       vpiMemory  tag  in  a  vpi_iterate process returns objects of type
       vpiRegArray that have one dimension. The vpiMemoryWord tag returns
       objects of type vpiReg, and is only valid on one-dimensional Reg Arrays.
       Previously these accesses returned objects that were typed vpiMemory and
       vpiMemoryWord respectively. Using vpiRegArray with vpi_iterate finds all
       appropriate  Reg Arrays, including both one- and multi-dimensional
       arrays. Previously this method found only multi-dimensional Reg Arrays.
       There  are  also  special-case  vpi_handle accesses with vpiIndex,
       vpiLeftRange and vpiRightRange tags that are valid on one-dimensional
       but not multi-dimensional Reg Arrays. These accesses are generalized for
       the multi-dimensional case with vpi_iterate using vpiIndex and vpiRange
       as appropriate.
     * There is a new version of the SystemVerilog user file, sv_vpi_user.h,
       with corrections and additions. The affected definitions are:
          + vpiClassObj
          + vpiLogicVar
          + vpiAssert
          + vpiAssume
          + vpiCover
          + vpiDisableCondition
          + vpiClockingEvent
          + vpiAlwaysComb
          + vpiAlwaysFF
          + vpiAlwaysLatch
          + vpiConstraintItem
          + vpiInterfaceDecl
          + vpiGeneric
       Please  use  the  new  file  for VPI application compiles that use
       SystemVerilog features.
     * $ferror() could not be called if $fopen previously failed. If the last
       file IO operation was successful, $ferror() returned a random string.
     * Preliminary work to recognize SystemVerilog Object and Property types in
       the VPI routines such as vpi_handle() has been done. As a result some
       VPI messages may change, for example previously unrecognized constants
       are identified by name. Also some transitions are recognized as valid
       (although unimplemented) that were not previously valid.
     * The vpiAutomatic boolean property query with vpi_get() is now handled,
       where valid.
     * Only trireg nets have the charge strength property. A VPI query for
       vpiChargeStrength on a non-trireg net now returns a warning.
     * vpi_get_value() was returning bad values for certain types of primitive
       and primitive terminals, in particular relating to switch primitives
       with multiple inout terminals rather than a single output terminal.
       Requesting the value of a primitive with multiple non-input terminals
       now generates a warning.
     * There were various issues with the PLI TF utility routines and their
       interactions with SystemVerilog type arguments and multi-dimension
       arrays.
   ______________________________________________________________________

   VHDL Defects Repaired in 6.2a
     * vcom was consuming an excessive amount of memory (more than 2GB) with
       subprogram inlining, which caused a memory allocation failure. The
       subprogram was using a large declarations, with complex initial values,
       defined outside the subprogram scope.
     * vopt now prints a warning message (3473) when a component instance is
       unbound. Also, when vsim is invoked with the option -error 3473 the
       error is now correctly detected at elaboration.
     * The simulator crashed if a vector port of an entity was constrained by
       an attribute on a generic and the entity was directly instantiated.
     * In the unlikely case of a signal of a record type that only contains
       null arrays, the simulator crashed during elaboration.
     * A  crash or incorrect simulation results occurred in some cases on
       restart. For this to happen the design needed to have two package A and
       B.  Neither  package A or package B have a package body. Package B
       references  package A. Package A is modified and both packages are
       recompiled. The simulator did not attempt to reload package B but it
       should  have.  As a side-effect of the fix, package bodies are now
       reloaded if they are recompiled.
     * vopt now uses the -L lib_name and -Lf lib_name inputs for VHDL and mixed
       VHDL/Verilog designs.
     * A VHDL procedure which contained local array variables and called a
       foreign subprogram crashed in certain cases on rs6000 and rs64.
     * Using the predefined attributes 'INSTANCE_NAME and/or 'PATH_NAME in a
       concatenation  expression  in  some  situations produced incorrect
       concatenation results.
     * A variable assignment statement in a subprogram where both the target
       and right hand side were of an unconstrained array type would sometimes
       not detect array matching element test failures, possibly corrupting
       memory.
     * An error will now be reported if vcom -genxml entity was executed and
       the entity has not been compiled into the library.
     * A PORT MAP with an association element with a conversion function or
       type conversion (on either the formal part or actual part or both)
       sometimes affected another unrelated PORT MAP of a component instance at
       a lower level and attempted to perform the conversion itself, causing
       spurious errors when the conversion failed.
     * Repeated calls to file_open resulted in a memory leak if the file did
       not exist and if file_close was not called before the next file_open
       call.
     * If  a  component instantiation has positional association and type
       conversions  on  the  actuals and a configuration specification or
       component configuration for this instance has an explicit port map, the
       type conversion is not called. This will result in incorrect simulation
       results and possible crashes.
     * Clocked processes were incorrectly handled if the clocked process was
       simple and the right hand side of the signal assignment was just a
       qualified expression on a signal. The following is a simple clocked
       process that will show the problem.
       PROCESS (clk)
       BEGIN
       IF ( clk'event AND clk = '1') THEN
       q <= STD_LOGIC'(d);
       END IF;
       END PROCESS;
     * If range on a component's scalar port did not match the range on the
       matching port on the entity it is bound to, range checks were not always
       done on that port.
     * In a design compiled with the -O1 option, individual association in a
       configuration's port maps incorrectly connected signals if the component
       port is an array and has different bounds than the actual associated
       with it.
     * If an alias to a type was declared in the same scope as the type was
       declared,  the  implicit  operators  for the type were incorrectly
       redeclared. This was a problem if the implicit operators were replaced
       with  explicit versions. The compiler incorrect reported ambiguous
       expressions.
     * An  expression with a subexpression of an array type followed by a
       subexpression  involving a short-circuit operation with array type
       operands could result in the preceding subexpression having its value
       corrupted.
     * In rare cases, a configuration's indirect dependency on a package was
       missed in vopt resulting in no code generated for the package and a load
       error at elaboration time.
     * Size and dimensionality errors in array aggregates will now be reported
       as  warnings,  rather  than  errors,  in  statements controlled by
       IF...GENERATE statements whose conditions are not locally static.
   ______________________________________________________________________

   FLI Defects Repaired in 6.2a
   ______________________________________________________________________

   VITAL Defects Repaired in 6.2a
   ______________________________________________________________________

   SystemC Defects Repaired in 6.2a
     * The force and noforce commands now support SystemC signals with the
       following admonitions:
          + Only mixed language boundaries types are supported.
          + The -drive option to force is not supported.
          + Individual bits and slices may not be forced or unforced.
     * The kernel crashed on Solaris when the user logged variables of type
       "short" or "unsigned short" within a SystemC module.
     * There was a sccom issue when there were spaces in the pathname.
     * sccom errored out when an include path contained a directory called
       "systemc".
   ______________________________________________________________________

   Assertion Defects Repaired in 6.2a
   ______________________________________________________________________

   Mixed Language Defects Repaired in 6.2a
   ______________________________________________________________________

   General Defects Repaired in 6.2a
     * Some internal errors relating to WLF files are now printed in the same
       format as other error messages making it easier to identify which tool
       is producing the error.
     * There was an inconsistency in parsing the vsim cmd line with option
       -toggleMaxIntValues and a new error message for invalid values was
       added.
     * The vdir -l command nows shows the source modified time as a readable
       date and time in a format similar to the UNIX date command.
     * Path names, file names and design unit names that contained the dollar
       sign character ($) could not be compiled or simulated. Please make note
       of the changes to environment variable handling below in the Product
       Changes section.
     * When  the coverage off source code pragma was used, conditions and
       expressions were not properly ignored. They were processed as if code
       coverage were still on.
     * The  coverage  save command was not properly saving instances that
       contained  only other instances and no RTL code. This caused those
       instances to not be available in vcover.
     * The  -strip  option to coverage reload and vcover was not properly
       skipping data in some cases in which the data needed to be skipped.
     * vcover failed if the -strip option skipped a region that contained a
       toggle signal of type enum or integer.
     * In certain cases, generate instances with parameterized signal widths
       caused a fatal assertion in vsim when code coverage was on and the
       parameterized signals are included in toggle coverage. This has been
       changed to give a warning that the signals for some instances are not
       included in the design unit summary because the widths are different.
     * vopt  now  uses  msg_system settings (note, warning, fatal, error,
       suppress) from the modelsim.ini file. In addition, vsim now passes the
       related command line options to vopt.
     * Taking  a slice wider than 32-bits of a memory generated incorrect
       results in certain cases.
     * When vsim runs in vopt mode and -coverage is on, coverage reports by
       instance  and  by  design  unit  become meaningless because of the
       optimizations done. Now, when -coverage is on, options are automatically
       sent  to vopt to make statements visible and turn off inlining and
       process  merging.  (The exact choice of options, if needed, can be
       overridden using the "VoptCoverageOptions" variable in the modelsim.ini
       file.) This restores meaningful coverage reports for by instance and by
       design unit. The by file reports are okay regardless. So if by file
       reports are sufficient for you, you can turn the optimizations back on
       by  setting  the "VoptCoverageOptions" variable in the ini file to
       "+acc=l".
     * If you compiled source files using various values of the -cover option,
       and then ran vsim in vopt mode, each group of modules that was optimized
       by inlining ignored the individual -cover options and instead all the
       modules inherited the option used by the parent module in that group.
       Now vopt inlining is automatically turned off when vsim -coverage is on.
       But if you override turning off the inlining using the modelsim.ini
       variable "VoptCoverageOptions" variable, you will still see this effect.
       This also applies to other options.
     * The  default value of IterationLimit has been made consistent. Its
       default value is 5000.
     * Dataflow operations on wide bus signals in large designs could be very
       slow.
     * Code coverage handling of multiple Verilog ternary expressions in a
       statement  has been improved. Before, coverage reports merged them
       together and reported only one condition and branch. Now, each condition
       and  branch is reported separately. The Source window and Profiles
       Details window show these improvements as well.
     * It was not possible to View Source for signal names in the Profile
       panes. Also, specifying Showcalls and Expand All for the structural
       column in the Profile pane, containing signal names, exhausted GUI
       memory. Now, signal names in profile panes are of the form @signal@/x/y.
     * Instance-specific condition and expression row exclusions now work.
     * Long module pathnames could produce "name too long" errors in vopt.
     * Certain 'readers' commands and dataflow operations on signals with high
       fanouts took a long time to complete.
     * The "View Declaration" and "View Instantiation" menu items were not
       working properly at a C-Debug breakpoint.
     * The simulator crashed during the vcover merge command when merging data
       in 6.1 format.
     * There was a problem with code coverage statement numbering when there
       was more than one coverage object on a line. Now all coverage objects
       (statement, branch, condition and expression) get their own statement
       number.
     * 'vcd dumpports' crashed for VHDL 'bit' type. Type "bit" is not supported
       in dumpports and this combination nolonger crashes.
     * When vsim assertions were redirected to a file other than the transcript
       file  (via the -assertfile command line option or the "AssertFile"
       modelsim.ini variable) and the assertion file grows to a size greater
       than 2GB, vsim crashed.
   ______________________________________________________________________

   Mentor Graphics DRs Repaired in 6.2a
     * dts0100244598 - Breakpoints cannot be set in the GUI.
     * dts0100320318 - Wave view in radix binary of a VHDL variable is wrongly
       converted.
     * dts0100326503 - Issue in group signals.
     * dts0100262290  - Difference in behavior of tcheck_set command with
       optimized vs. unoptimized cells (6.0d).
     * dts0100264605 - tcheck_status shows no hold checks for unoptimized
       cells.
     * dts0100312143 - Bad error message on range in generate.
     * dts0100309490 - Simulation crash in fork join block on a conditional
       statement.
     * dts0100262764 - $setuphold does not make negative values to zero.
     * dts0100323092  - Error from compile: Repetition multiplier must be
       constant.
     * dts0100305460 - $ferror can not be called if $fopen fails.
     * dts0100290029 - vcom consumes excessive memory.
     * dts0100322134 - Unconstrained std_logic_vector causes crash.
     * dts0100174125 - Crash on Restart -f.
     * dts0100327862 - Crash during log of SystemC variables of type unsigned
       short.
     * dts0100286295 - Standardize Modelsim Messaging.
     * dts0100202963 - sdf warning : possibility to give a start time.
     * dts0100243268 - PrefWave(ViewUnDocked) not functioning in pref.tcl.
     * dts0100248256 - Coverage metrics not reported properly in Source window.
     * dts0100260193 - Differences on different O.S..
     * dts0100280215  -  "always_comb"  structure  is not recognizing the
       sensitivity of logic which is declared in "struct".
     * dts0100267636 - Examining values in SystemC code in hex format.
     * dts0100322901 - Issue with casting SV class handles -- need private
       member support for classes.
     * dts0100282278 - Need syntax error for "identity = value", instead of
       "identity == value" for a Verilog IF statement.
     * dts0100329112 - Wave window GUI display issue with unpacked array.
     * dts0100282786 - Problem with typedef on types declared in interfaces.
     * dts0100282788 - typedef to class declared in interface not recognized.
     * dts0100287297 - Segmentation violation - passign class to method task.
     * dts0100300083 - Virtual signal waveforms viewed in Wave Window are not
       displayed under certain zoom settings.
     * dts0100302154 - SV assignment to unpacked array of packed wires results
       in incorrect simulation results.
     * dts0100303618 - Command completion for log command incorrect.
     * dts0100311616 - "vcom -lint" on Xilinx coregen file produces (vcom-1155)
       warning.
     * dts0100308327 - ModelSim crashes during design load.
     * dts0100313107 - No error message, and adds signals that don't exist.
     * dts0100310431 - Warning required during compilation when a configuration
       refers to an non-existent architecture.
     * dts0100313554 - "-bindatcompile" at "-bindatload" gives error from 6.1
       onwards.
     * dts0100320089 - Crash involving the handling of wor types in sensitivity
       list.
     * dts0100281619 - Signal concate in port map isn't working.
     * dts0100321259 - Toggle window on missed coverage does not update.
     * dts0100326320 - Illegal unpacked to packed type port connection.
     * dts0100270368 - Value does not appear for variables in the Wave window
       with a breakpoint set in the process.
     * dts0100335166 - Modelsim crashing when using "vcd dumpports".
     * dts0100332615 - Create Wave of assertions ... it crashes.
     * dts0100332608 - VHDL package with PSL property and optimization flow
       doesn't work correctly.
     * dts0100340340 - Window layout not being saved correctly.
   ______________________________________________________________________

   Known Defects in 6.2a
     * The deprecated -forcecode switch may cause serious memory leak for vlog
       -fast. Users are encouraged to use the vopt flow in release 6.2.
     * The support of debugging the C code during quit time is removed on
       Windows.  The  corresponding Cdebug command "cdbg stop_on_quit" is
       disabled on Windows.
     * UCDB-based coverage is new and in an early state for the 6.2 release. It
       has the following known issues:
          + Some branch coverage calculations (verilog conditional expressions)
            by file are inaccurate in vopt mode.
          + vcover and view mode (-viewcov) reports are in flux and there are
            planned improvements in this area.
          + Exclusions do not currently apply to FSMs.
          + Exclusions do not currently work in coverage view mode.
          + File paths are sometimes incorrectly handled.
          + There  are differences in the application of wildcards within
            coverage view mode.
     * 'const ref' type of arguments are not supported in the function/task
       calls in assertions. For general function/task calls 'const ref' is
       treated like a 'ref' after issuing a warning.
     * In code coverage, there is no way to exclude a condition or expression
       table row for the case of more than one table on a line and the table in
       question is not the first table on the line.
     * In some circumstances, vopt does not handle upper-case library names in
       VHDL. If an upper-case library name is used in your VHDL source (e.g.
       library DEV_LIB; use DEV_LIB.DEV_PKG.all;) and you use this upper case
       name for your library on your file system (vcom -work DEV_LIB x.vhd),
       you may get a message of the form below when you run vopt (or vsim
       -vopt):
** Error: (vopt-19) Failed to access library 'dev_lib' at "dev_lib".
       The  workaround for this problem is to create a modelsim.ini entry
       mapping the lower case name to the upper case one. For example:
 vmap dev_lib DEV_LIB
       A testcase that demonstrates this problem, file1.vhd:
library ieee;          use ieee.std_logic_1164.all;
library top_vhdl_lib ;
entity top_vhdl is end;
architecture arch of top_vhdl is component DEV_MODEL  end component;
begin    u1: DEV_MODEL;  end;
       and file2.vhd
library ieee;  use ieee.std_logic_1164.all;
package DEV_PKG is constant  FC : positive := 12000;  end DEV_PKG;
package body DEV_PKG is end DEV_PKG;
library IEEE;      use IEEE.STD_LOGIC_1164.all;
library DEV_LIB ;  use DEV_LIB.DEV_PKG.all;
entity DEV_MODEL is end;
architecture arch of DEV_MODEL is signal fc : positive := FC;  begin end;
       If you compile the VHDL and invoke vsim as follows, vopt will be unable
       to access library 'dev_lib'.
vcom -work DEV_LIB      file2.vhd
vcom -work top_vhdl_lib file1.vhd
vsim top_vhdl_lib.top_vhdl -c -L DEV_LIB   -vopt
   ______________________________________________________________________

   Product Changes to 6.2a
     * The automatic invocation of the design-wide performance optimization
       tool "vopt" has been enabled. Upon invocation, the simulator determines
       if vopt has been run on the top-level module(s) you supplied; if not,
       the simulator invokes vopt and outputs a message similar to:
       # ** Note: (vsim-3812) Design is being optimized...
       The optimization step will improve run time performance and affect the
       visibility of objects in the design. To enable debug visibility it is
       recommended you add additional options to vopt on the vsim invocation
       via the -voptargs argument. For example: vsim -voptargs="+acc" which
       enables  full  debug access to objects in the optimized design. To
       understand the full usage of +acc and -voptargs, please refer to the
       chapter "Optimizing Designs with vopt" in the User's Manual for more
       information.
       If required you may obtain the previous behavior of vsim, where it does
       not perform performance optimizations, by setting the modelsim.ini
       variable "VoptFlow" to 0 (zero). An alternative to setting VoptFlow to
       zero, where interactive debug compile throughput is required you can use
       the -novopt option on the vsim and compilation command line (vcom/vlog).
     * Temporary compiler files are now always created in the current "work"
       library under a directory called _temp. Previous versions created files
       in /tmp or /var/tmp and failed in some cases if the given machine did
       not have a large amount of disk space allocated to the partitions that
       contained these directories.
     * The WLF reader cache feature is now enabled by default. This feature was
       introduced in version 6.1, but was disabled by default. Refer to User's
       Manual for more information about the WLF reader cache.
     * The shell commands vcom, vlog, vsim, vmap, no longer expand environment
       variables in filename arguments and options. Instead, variables should
       be expanded by the shell before hand, in the usual manner. The -f option
       that most of these commands support, now performs environment variable
       expansion throughout the file.
       Environment variable expansion is still performed in the following
       places:
          + Pathname and other values in the modelsim.ini file.
          + Strings used as file pathnames in VHDL and Verilog.
          + VHDL Foreign attributes.
          + The PLIOBJS environment variable may contain a path that has an
            environment variable.
          + The Verilog `uselib file and dir directives.
          + Anywhere in the contents of a -f file.
       The recommended method for using flexible pathnames is to make use of
       the MGC Location Map system. When this is used, then pathnames stored in
       libraries and project files (.mpf) will be converted to soft names.
       If a file or path name contains the dollar sign character ($), and must
       be used in one of the places listed above that accepts environment
       variables, then the explicit dollar sign must be escaped by using a
       double dollar sign ($$).
       To revert to the old behavior in the event that this is necessary for
       existing      flows,     set     the     modelsim.ini     variable
       "DepricatedEnvironmentVariableExpansion" to 1. This variable must be set
       in the appropriate section ([vcom], [vlog], or [vsim]) to revert the
       behavior in the corresponding tool.
     * The Scroll Wheel behavior has changed for the Dataflow window. It no
       longer scrolls the window up or down. Instead, the scroll wheel will
       zoom In (wheel down) or zoom Out (wheel up). The window will also center
       on the mouse location as it zooms.
     * In  include  file  "svdpi.h",  the definition of the fields in the
       svLogicVecVal struct has been changed. As per IEEE P1800 SV-CC item
       #883, the two fields in that struct have been renamed from a and b to
       aval and bval, respectively. To help ease this transition, you can add
       -DP1800_2005_VECVAL to your C compiler command line. That will give you
       the old field names until you have the chance to change your source code
       to conform with the new naming.
     * The write report command has been changed to list all source files used
       to compile a given design unit, not just the main file containing the
       module keyword.
     * A "Compile selected files together" checkbox has been added to the
       Compile Source Files dialog. It allows user choice of whether to compile
       all selected files in one compiler invocation or a separate invocation
       for each file. You can change the default using the Preferences dialog
       or by editing the PrefCompileDialog(multiFileCompile) variable in the
       pref.tcl file.
     * The coverage save command writes UCDB files and the -XML switch is no
       longer  supported  with the new functional coverage flow. Also the
       coverage reload command is no longer supported, the users can use the
       view mode of vsim to see their coverage results in the GUI.
     * The coverage save command now saves data in the UCDB format (see note
       under New Features); the old code coverage format can no longer be
       saved, though it can still be processed with the standalone utility
       "vcover". The old functional coverage format will likewise no longer be
       saved with "fcover save", and a UCDB will be saved instead.
     * If you run vsim -voptargs=... and then within vsim invoke vsim again:
       previously the -voptargs argument would be copied down and remain in
       effect.  This  is  no longer the case. It is now reset before each
       invocation.
     * The Find dialog in the Objects, Locals and Dataflow windows now has a
       Find All button.
     * A -coverage option has been added to vopt for running vopt directly and
       adjusting options to correctly handle code coverage. When running vopt
       implicitly through vsim nothing needs to be done: the vsim -coverage
       option will make the needed adjustments.
     * Increase timing check capacities for optimized Verilog cells.
     * The following interfaces of registering a SystemVerilog SystemC DPI
       function have been renamed.
          + "sc_export_function"       has      been      changed      to
            "sc_dpi_register_cpp_function"
          + "SC_EXPORT_FUNCTION"       has      been      changed      to
            "SC_DPI_REGISTER_CPP_FUNCTION"
          + "sc_export_member"       has       been       changed      to
            "sc_dpi_register_cpp_member_function"
          + "SC_EXPORT_MEMBER"       has       been       changed      to
            "SC_DPI_REGISTER_CPP_MEMBER_FUNCTION"
     * Progress  information for loading dataflow is now displayed in the
       dataflow window's footer.
     * A SystemC sc_out port connected to a HDL signal higher up in the design
       hierarchy is now treated as a pure output port. A read() operation on
       such a sc_out port might give incorrect values. Use a sc_inout port to
       do both read() and write() operations.
     * The Active Processes window now loads only those processes it needs for
       display. This provides better interactive performance on designs with a
       large number of active processes when selecting a process from the
       Structure or Dataflow window.
     * Error messages in the VHDL compiler now will report the full selected
       names when reporting on types. As a results error messages like
       Error  file.vhd(46):  Constant  "udelay" is type vitaldelaytype01;
       expecting type vitaldelaytype01"
       Now are reported
       Error      file.vhd(46):     Constant     "udelay"     is     type
       ieee.vital_timing.vitaldelaytype01;         expecting         type
       vital2000.vital_timing.vitaldelaytype01"
     * There are three FLI/PLI query routines that allow an application to
       programmatically determine the simulator product name and version at run
       time. These are mti_GetProductVersion(), acc_product_version() and
       vpi_get_vlog_info(). The strings they return have been changed slightly.
       The  reason  for  the  change is to make the returned strings more
       predictable both across the routines themselves, and across products and
       product versions. When the above routines return a product name, they
       will  return strings that start either "ModelSim" or "ModelSim for
       Questa". Thus a query to match "ModelSim" in the first 8 characters will
       match for both the ModelSim and QuestaSim simulators. To differentiate
       the Questa simulator, it is necessary to search for the string "Questa"
       somewhere in the product name. The ModelSim simulator will not have the
       string "Questa" in its product name. The product name string contains
       other product-differentiating information too, not detailed here. The
       product version is returned as a separate string in the VPI routine. In
       the other two routines it is returned as part of the same string, with
       the syntactic separator " Version " between the product name component
       and the version number component. The TCL command, vsimVersionString, is
       unaffected by this change.
     * The  'coverage  exclude' command syntax has been changed to better
       accommodate FSM coverage. The new syntax is as follows:
          + coverage exclude [-clearall | -addall][-code bcefst][-dataset
            <name>]
          + coverage exclude [-clear] [-dataset <name>][-srcfile <source_file>]
            [-instance <inst_path> | -du <du_name>][-code bcefs]
            [-linerange <ln>+ | <ln>-<ln>+ | all]
            [-condrow | -exprrow <ln> <rn>+ | <rn>-<rn>+ | all]
            [-ftrans <state_var_name> <trans_id>+ | <trans_id>-<trans_id>+ |
            all]
            [-fstate <state_var_name> <state#>+ | <state#>-<state#> | all]
       The 'coverage exclude' can be used to do 'toggle disable' and 'toggle
       enable'(with -clear).
          + coverage exclude [-clear] -togglenode <node_path>+ [-in] [-out]
            [-inout] [-internal] [-ports] [-r]
       Note  that  the  new 'coverage exclude' functionality is not fully
       supported yet. FSM exclusions will not reflect in the GUI.
   ______________________________________________________________________

   New Features Added to 6.2a
     * Project Create functionality has a new option that allows projects to
       reference the library mappings from the initial modelsim.ini file,
       rather than copy them.
     * VHDL access values can now be expanded in the Locals window.
     * Individual members of a struct may now be assigned default values, as
       described in section 4.11 of LRM IEEE P1800/D5. Example:
typedef struct {
        int a;
        enum {red, green, blue} color = green;
        int b[2:0] = '{2, 1, 0};
} stype1;
     * Version 6.2 adds support for builtin process methods, as described in
       the LRM section, "Fine-grain process control".
     * vcover now creates by-file reports. Two new options have been added,
       -byfile will list data by source file, and -source <filename> will
       report on one particular source file.
     * The force command, with no arguments, will return a list of the most
       recently applied forces.
     * Virtual interfaces are now supported.
     * Enhanced  FOR  loop  is  implemented  as described in 8.5.2 in LRM
       "SystemVerilog_3.1a.pdf".  It supports multiple initialization and
       multiple step assignments. Declarations in initialization of FOR loop is
       also supported.
     * Valgrind support is added to help users detect and track memory usage
       errors in C/C++ source files in the design. The Valgrind tool is limited
       to  use  with  x86/linux  based platforms only. For detailed usage
       information please refer to the Application Note "Using the Valgrind
       tool", available from our website.
     * Support for "Bit Stream Casting" has been added.
     * Parameterized classes (P1800 Sect. 7.23) are now supported.
     * VHDL architectures can now be specialized when vopt can determine that
       generics will be mapped to discrete-valued constants. When the simulator
       loads a specialized architecture, the loading message will be of the
       form:
       # Loading library.entity(architecture)#inst
       where inst is a positive number.
     * Associative arrays now support all index types.
     * Support for event controls on dynamic objects are now supported for
       class instance properties and methods. For example:
       "always @(myclass.classvar)"
       NOTE:  Support is limited to locally defined classes. Hierarchical
       references are not supported.
     * Semaphores are now supported. LRM P1800 Draft6, Section 14.2
     * Mailboxes are now supported. LRM P1800 Draft 6, Section 14.3
     * Default arguments in tasks and functions are now supported. LRM P1800
       Draft 6, Section 12.4.3
     * Task and function argument binding by name is now supported. LRM P1800
       Draft 6, Section 12.4.4
     * Support for modports in virtual interface declarations has been added.
       When an interface element is referenced through a virtual interface, we
       print an error if that element is not in the modport. For example:
       virtual interface myiface.mymodport ifv;
       ...
       ifv.a = 1; // Okay iff 'a' is in 'mymodport'.
     * The "zoom on active cursor" feature has been added to the Wave window.
       Also added are the corresponding wave zoomcursor commands, 'C' character
       Wave window keyboard shortcut, and a zoom on cursor toolbar icon and
       associated zoom menu item.
     * Message  Viewer (msgviewer) is a new feature to view messages that
       currently displayed in the Transcript window in an organized way. With
       this new feature, the Transcript window becomes a tab in the Transcript
       pane, and the message viewer is another tab in the pane.
       To invoke, vsim needs the switch -msgmode set. The valid modes are tran,
       wlf and both. "tran" means messages only go to the transcript, not the
       Msgviewer window. "wlf" means messages only go to the msgviewer window.
       And  "both" means messages go to both the Transcript and Msgviewer
       windows.
       To invoke the window in GUI:
          + from top menu, View -> Debug Windows -> Message Viewer.
          + type in "view msgviewer".
          + the popup menu from Object window "View Message" can also bring up
            the Message Viewer with messages that contains the selected objects
            in Object window.
       Those messages are logged in the WLF file and msgviewer extracts those
       message from the WLF file and display them in the Msgviewer window.
       There  are display options that can be customized through "Display
       Options"  from  the  popup menu. Those options include setting the
       displayed hierarchies, the time range and the objects.
       The  display  settings  can  be  saved from File -> Save As to the
       msgviewer.do file. And File -> Load... will load the msgviewer.do to the
       current simulation.
       The popup menu contains features to view source, object declaration and
       verbose messages when it is available.
     * Automatic variables are now supported within fork..join_none/join_any
       blocks.
     * memtool now detects and displays SystemC memories. Member variables of
       SystemC modules which are defined as arrays of the following types are
       considered as memories:
          + unsigned char
          + unsigned short
          + unsigned int
          + unsigned long
          + unsigned long long
          + char
          + short
          + int
          + float
          + double
          + enum
     * Transaction Recording and Debug are supported with SCV and SystemC 2.1.
     * The Memory panes and mem CLI commands now support additional types of
       SystemVerilog memories. Any combination of unpacked array, dynamic
       array, and associative array will be considered a memory, provided the
       leaf level of the data structure is a string or an integral type. (e.g.
       bit [3:0], shortint, int, reg[W-1:0], packed struct, etc.)
       If  such  an  array is embedded in a class object, it will only be
       considered a memory if it is a static property of the class.
     * Abstract Classes and virtual methods are now supported.
     * SystemVerilog automatic tasks and functions now support ref arguments.
     * Support for the Verilog math system functions has been added. On the
       Windows platforms only, $asinh(x), $acosh(x) and $atanh(x) are not
       available; all other functions have been added. Per the LRM, these
       functions implement the equivalent 'C' calculation. This equivalence
       extends to the handling of extreme corner cases such as infinities and
       nans, which may therefore show platform-dependency. (A nan is 'Not A
       Number', for example $ln(-1)).
     * SystemVerilog "event variables" are now supported. They may be assigned
       to each other, compared, and used as ports.
     * The tool now supports the new SystemVerilog variable initialization
       semantics described in Section 6.4 of the LRM. This means that static
       variables with initializers should have their values already set when
       the VSIM command-prompt appears. Example:
       module init1;
       int a = 10;
       int b = a + 1;
       endmodule
       #
       # vsim -c init1
       # Loading work.init1
       # Loading work.init1_low
       VSIM 1> exa a b
       # 10 11
     * If the user runs vlog with the -lint option, vlog will now insert checks
       for out-of-bound indexing into arrays. At runtime, these will produce
       warnings. Note that this will impair performance during simulation.
     * SystemC is now supported on linux_x86_64. Please refer to the Users
       Manual for details on Operating System and Compiler requirements.
     * 'Foreach' loops are now supported (LRM P1800 Draft 6, Sec 10.5.3). The
       Read-Only check for looping variables is not supported.
     * Support for enums > 32 bits wide has been added.
     * Support for "array manipulation methods" in LRM section 5.15 has been
       added.
     * A new modelsim.ini variable has been added called VoptAutoSDFCompile. If
       the automatic invocation of vopt from vsim is enabled, this option
       controls whether SDF files are compiled as part of the design-wide
       optimizations vopt performs. By default this SDF compilation is on.
       Setting the value of the variable to 0 will disable this action.
     * Extern Module support for SystemVerilog has been added.
     * User defined SystemC signals and ports are now debuggable. User defined
       signals and ports include:
          + Signals derived from sc_prim_channel
          + Signals    derived   from   sc_signal,   sc_fifo,   tlm_fifo,
            sc_signal_resolved, sc_signal_rv, sc_semaphore, and sc_mutex are
            treated as the base class
          + Signals of embedded SC types
          + Ports derived from sc_port_base(except boundary ports)
          + Ports  derived  from  sc_in,  sc_inout,  sc_out,  sc_fifo_in,
            sc_fifo_out, sc_in_resolved, sc_inout_resolved, sc_out_resolved,
            sc_in_rv, sc_inout_rv, and sc_out_rv are treated as the base class
          + Ports derived from sc_export are treated as sc_export
     * FSM Recognition and FSM Coverage are now supported for Verilog and VHDL.
       The following styles are supported now:
          + FSMs using Case statement.
          + FSMs using single If-Else statement.
          + FSMs using current state variable.
          + FSMs using current state and next state variable.
          + FSMs using wait/select statement in VHDL.
          + FSMs using parameters/generics.
          + FSMs using basic integral SystemVerilog types.
       FSM coverage provides following features :
          + It is enabled by -cover f option during compilation.
          + All existing coverage command line options, like coverage report
            etc works for FSM coverage.
          + Both state coverage and transition coverage for a FSM are reported.
          + FSM exclusions can be provided by user to exclude transitions.
          + Pragma can be used to switch off coverage for particular FSM.
          + State reachability analysis is done and unreachable states are
            flagged.
       Please refer to chapter "Finite State Machines" in User's Manual for
       more details.
     * The tool now supports SystemC procedural interface to SystemVerilog as
       an  extension  to SystemVerilog DPI. Refer to the chapter "SystemC
       Simulation" in the User's Manual for more details on using this new
       feature.
     * Cdebug for SystemVerilog DPI-C support is added. This feature allows
       users to single-step across the function call between Verilog code and C
       code without manually setting the break points.
     * The tool's debug capability has been enhanced so that simulation signal
       values are displayed directly in the source window. This feature is
       enabled by selecting the "View->Source->Show Source Annotation" menu
       item (or by selecting the source annotation toolbar icon). The display
       properties of the annotated values can be customized by selecting the
       "Tools->Edit Preferences" menu item, and then selecting "Source Windows"
       and then "Annotation". This feature requires a dataflow license to
       function.
     * Coverage data is now stored in a "unified coverage database" (UCDB) that
       integrates all types of code coverage data, functional coverage data,
       and assertion data. This new database format is saved with the "coverage
       save" command. The "vcover" standalone utility operates on this new
       database format, as does the "coverage view mode" GUI feature.
     * Coverage GUIs may be used independently of the simulator kernel with the
       new "coverage view mode". This requires previously saving coverage data
       in the UCDB format. Then, if file.ucdb is a UCDB file, vsim is invoked
       as "vsim -viewcov file.ucdb" to bring up the code coverage GUIs and
       analysis pane GUIs based on data in the UCDB file.
     * DPI open array formal parameters are supported but restricted to cases
       where the unsized (dynamic) dimension is the sole unpacked dimension.
     * The System Verilog system function $psprintf() has been added. This is a
       non-LRM feature, added for compatibility with other industry tools.
       $psprintf() behaves as $sformat() except that the string result is
       passed back to the user as the function return value for $psprintf(),
       not placed in the first argument as for $sformat(). Thus $psprintf() can
       be used where a string is valid. Note that at this time, unlike other
       system  tasks and functions, $psprintf() cannot be overridden by a
       user-defined system function in the PLI.
     * The character sequences `", `\`", and `` in macro definitions (IEEE Std
       1800-2005, Section 23.2) are now supported.
     * The  new  WildcardFilter  value  "CellInternal" has been added. If
       CellInternal is in the WildcardFilter list, internal signals in cells
       will not be selected as part of a wildcard search (e.g. add wave -r /*).
       They may still be selected by name, if desired. Cells, in this case, are
       defined to be modules within a `celldefine or modules containing a
       specify block. In 6.2, CellInternal is in the WildcardFilter list by
       default.
     * Generates are now allowed in 'program' scope
     * The simulator now include Transaction Recording for SystemC. See the
       User's Manual for details on this new feature.
     * A new interface "sc_dpi_set_stack_size" has been added to set the stack
       size of C++ functions declared as SystemVerilog SystemC DPI import
       tasks. To change the default stack size (64KBytes), users need to call
       this interface right after the import task registration call.
       SC_MODULE(top) {
       void sc_task() {
       }
       SC_CTOR(top) {
       SC_DPI_REGISTER_CPP_MEMBER_FUNCTION("sc_task", ⊤::sc_task);
       sc_dpi_set_stack_size(1000000); // set stack size to be 1Mbyte.
       }
       }
       For the C++ functions declared as SystemVerilog import functions, users
       don't need to worry about setting the stack size.
     * The popup menu in the Source window has four new selections:
          + Open Instance
          + Ascend Hierarchy
          + Back ->
          + Forward ->
       Open Instance causes a change to current environment by descending to a
       lower level in the design hierarchy. It is only available when the
       cursor location is over an instance name. Ascend Hierarchy resets the
       environment up one level. Back and Forward menu picks provide lists of
       previously visited environments; these functions work similarly to the
       back and forward buttons common on web browsers. The simulate toolbar
       contains Environment Back and Environment Forward buttons -- they are
       left and right facing blue arrows next to the up pointing "Environment
       Up" button.
       To support those menu items, the env command maintains a history of
       environments visited during a session. Environments visited via the env
       command are added to the back list. You can go back to the previous
       environment by use of the env -back command. As you traverse backward
       through the list, those environments are moved from the back list into
       the forward list. You can go forward using the env -forward command. The
       form of the env command is:
       env [-dataset | -nodataset] [ <pathname> | -forward | -back]
     * A new source code browser has been added to the GUI. The browser can be
       viewed in the workspace using the menu View->Code Browser. The browser
       will display information about all the open source files and will update
       its file contents as Source windows opened and closed.
     * Add modelsim.ini variable "DpiOutOfTheBlue" to turn on/off the support
       for DPI out-of-the-blue call. The default is to disallow out-of-the-blue
       calls from C functions. When this support is enabled, however, there is
       still a restriction that SystemVerilog task can't be called from C
       functions that are not declared as import tasks.
       To override the modelsim.ini setting, a new vsim switch -dpioutoftheblue
       is added:
       "-dpioutoftheblue 1": turn on the support for out-of-the-blue call
       "-dpioutoftheblue 0": turn off the support for out-of-the-blue call
     * A new modelsim.ini variable "NoExitOnScStop" is added. This is intended
       to customize the behavior of sc_stop() to make certain user-specific
       cleanup tasks easier for both batch mode and GUI mode. The default is
       off, and the tool will exit when executing sc_stop(). When this variable
       is turned on, executing sc_stop() won't make the tool exit. Instead a
       "VSIM>" prompt is returned.
     * User defined SystemC channels and ports derived from built-in SystemC
       primitive channels and ports can now be connected to HDL signals. The
       built-in SystemC primitive channel or port must be already supported at
       the mixed-language boundary for the derived class connection to work.
     * DPI  import  and  export tf's can now be written with arguments of
       parameterized data types. For example, assuming T1 and T2 are type
       parameters:
       import "DPI-C" function T1 impf(input T2 arg);
       This feature is only supported in the vopt flow, and on occasion the
       tool may not be able to resolve the type parameters while building the
       optimized design. In case such a situation arises, the workaround is to
       rewrite the function without using parameterized types.
       Note that the LRM rules for tf signature matching apply to the finally
       resolved value of type parameters. See P1800 26.4.4 for more information
       on matching rules.
     * The ability to specify a unique path separator for the suite of Signal
       Spy procedures and system tasks has been added. This path separator is
       specified in the modelsim.ini file or at the command line via the tcl
       'set' command. The simulator variable name is SignalSpyPathSeparator.
     * The ability to specify a unique path separator for the suite of Signal
       Spy procedures and system tasks has been added. This path separator is
       specified in the modelsim.ini file or at the command line via the tcl
       'set' command. The simulator variable name is SignalSpyPathSeparator.
     * The coverage toggle_ignore source code pragma has been augmented to
       support exclusion of the entire signal specified, and this works whether
       the signal is a scalar or vector. In place of the bits specification,
       use the keyword "all" (quotations are required). Example:
       // coverage toggle_ignore mysignal "all"
     * Our 'always_comb' support has three enhancements:
       1. We now optimize the implied sensitivity list by combining elements of
       the same variable. The following example will only create one event for
       all of 'a', since all its elements are referenced:
       int a[4:1];
       always_comb
       begin
       $display("%0t: a[4] = %0d", $realtime, a[4]);
       $display("%0t: a[3] = %0d", $realtime, a[3]);
       $display("%0t: a[2] = %0d", $realtime, a[2]);
       $display("%0t: a[1] = %0d", $realtime, a[1]);
       end
       2.  We  support  rule  2) in section 11.2.1 of the LRM by omitting
       sensitivity to elements of variables that are driven within the block.
       In the following example, the 'always_comb' will be sensitive to a[7:4]
       and a[2:1], but not to a[3]:
       reg [7:0] a;
       always_comb
       begin
       a[3] = 0; // Remove a[3] as an event.
       $display("%0t: a = %b", $realtime, a);
       end
       3.  We follow external function calls, and generate sensitivity to
       variables referenced there.
     * HDL source code pragmas have been added for individual code coverage
       metrics.  This  allows  you  to turn statement, branch, condition,
       expression and fsm coverage on and off independently using source code
       pragmas. To use it, add an additional argument to the coverage on or
       coverage off pragma using characters to indicate the coverage metric.
       This works for both VHDL and Verilog. (For toggle coverage, use the
       "coverage toggle_ignore" pragma.) For example:
       // coverage off sce
       turns off statement, condition and expression coverage, and leaves the
       other metrics alone.
       // coverage on bf
       turns on branch and fsm coverage, leaving the other metrics alone.
     * External definition of SystemVerilog class methods is now supported with
       the following limitations:
       (a) No support for external method definition of function returning a
       type parameter.
Example:

  class TFoo #(parameter type T = int);
    extern function T myfunc();
  endclass

  function TFoo::T TFoo::myfunc();  // TFoo::T not supported
    $display("hello");
    return 1;
  endfunction
       (b) No support for direct specification of parameterized class handle
       return types in external method definition. The workaround is to specify
       a 'typedef' for the parameterized class handle.
Example:

  class TBar #(parameter type T = int);
    T mydata;
  endclas

  class TFoo;
    typedef TBar #(real) TMyBar;
    extern function TBar #(real) myfunc1();
    extern function TMyBar myfunc2();
  endclas

  function TBar #(real) TFoo::myfunc1();  // not supported
    TBar #(real) b = new;
    return b;
  endfunction

  function TFoo::TMyBar TFoo::myfunc2();  // this works
    TMyBar b = new;
    return b;
  endfunction


