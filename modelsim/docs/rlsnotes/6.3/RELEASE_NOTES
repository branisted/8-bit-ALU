
                    Release Notes For ModelSim Altera 6.3


                                May 04 2007

               Copyright 1991-2007 Mentor Graphics Corporation
                            All rights reserved.
  This document contains information that is proprietary to Mentor Graphics
   Corporation. The original recipient of this document may duplicate this
  document in whole or in part for internal business purposes only, provided
  that this entire notice appears in all copies. In duplicating any part of
    this document the recipient agrees to make every reasonable effort to
      prevent the unauthorized use and distribution of the proprietary
                                information.

   TRADEMARKS: The trademarks, logos and service marks ("Marks") used herein
    are the property of Mentor Graphics Corporation or other third parties.
   No one is permitted to use these Marks without the prior written consent
    of Mentor Graphics or the respective third-party owner. The use herein
   of a third-party Mark is not an attempt to indicate Mentor Graphics as a
     source of a product, but is intended to indicate a product from, or
  associated with, a particular third party. The following are trademarks of
   of Mentor Graphics Corporation: Questa, ModelSim, JobSpy, and Signal Spy.
        A current list of Mentor Graphics trademarks may be viewed at
               www.mentor.com/terms_conditions/trademarks.cfm.

   End-User License Agreement: You can print a copy of the End-User License
         Agreement from: www.mentor.com/terms_conditions/enduser.cfm.
   ______________________________________________________________________

     Product Installation and Licensing Information
   For  brief  instructions  about  product installation please visit the
   "install_notes" file in www.model.com. The install_notes file can be viewed
   at:
   [1]http://www.model.com/products/release.asp
   For detailed information about product installation and licensing see the
   ModelSim Start Here Guide. The manual can be downloaded from:
   [2]http://www.model.com/support/documentation.asp


     Release Notes Archives
   For release notes of previous versions visit the release notes archive at:
   [3]http://www.model.com/support/default.asp
   or  find  them  in  the installed modeltech tree in <path to modeltech
   installation>/docs/rlsnotes


     How to get Support

   ModelSim Altera is supported by Altera Corporation
     * World-Wide-Web Support
       [4]http://www.altera.com/mySupport


   ______________________________________________________________________

  Index to Release Notes

     [5]Key Information

     [6]User Interface Defects Repaired in 6.3

     [7]Verilog Defects Repaired in 6.3

     [8]PLI Defects Repaired in 6.3

     [9]VHDL Defects Repaired in 6.3

     [10]FLI Defects Repaired in 6.3

     [11]VITAL Defects Repaired in 6.3

     [12]SystemC Defects Repaired in 6.3

     [13]Assertion Defects Repaired in 6.3

     [14]Mixed Language Defects Repaired in 6.3

     [15]Coverage Defects Repaired in 6.3

     [16]General Defects Repaired in 6.3

     [17]Mentor Graphics DRs Repaired in 6.3

     [18]Known Defects in 6.3

     [19]Product Changes to 6.3

     [20]New Features Added to 6.3
   ______________________________________________________________________

   Key Information
     * The following lists the supported platforms:
          + win32aloem - Windows 2000, XP
          + sunos5aloem - Solaris 8, 9, 10
          + linuxaloem - RedHat 7.2 and higher.
   ______________________________________________________________________

   User Interface Defects Repaired in 6.3
     * After hiding all toolbars, the area that holds the toolbars collapsed to
       just a few pixels. This area contained the only menu for changing the
       toolbar visibility, making it difficult to unhide toolbars once they had
       all been closed. There is now a toolbars sub menu under the windows
       pulldown, which is identical to the popup menu.
     * There were several issues dealing with window visiblity changes while a
       window was maximized. Minimizing the window would not return the GUI to
       the expected state. Changing window visiblity will now automatically
       minimize a maximized window and the resulting window visibility is
       correct.
     * Under certain circumstance the add wave command did not issue an error
       when no signals were found. This occurred when the -r (recursive) switch
       was used. Now the command will always return an error if no signals are
       found.
     * In an undocked Memory window, if the edit in place box was opened, most
       of the menu picks resulted in an error if the edit in place box was not
       closed.
     * The WLF file reader now returns an error message if the file appears
       corrupt rather then exiting the tool with an assertion.
     * Better checking for legal dataset name prior to opening or renaming a
       dataset. (A legal dataset name must contain only alphanumeric characters
       and underscores.)
     * Changing  the  column width within the Locals window collapsed all
       expanded items. The expansion state is now retained on a column resize.
     * The Visibility column in the Structure window incorrectly specifies
       limited visibility when using the -novopt option.
     * When undocked, commands issued through the profile find toolbar could be
       applied to the wrong window. The profile find toolbar now applies the
       find operation to the correct window.
     * Added the ability to overwrite existing files in the project directory.
     * To avoid confusion with "extended VCD" the -map and -nomap options to
       VCD commands now print "enhanced VCD" in the VCD file header.
     * The vsim -printsimstats option was not working.
     * Using the CTRL-S shortcut to save new files on Windows did not change
       the Source window title.
     * The GUI crashed in waveform creation of a signed reg signal.
     * Expanding a ref struct variable did not expand its value in the Locals
       window.
     * When printing the contents of the the Wave window, the dialog that
       reports the progress will incorrectly report the total number of pages.
       The dialog will show something like "Printing page 4 of 3". Now the
       correct number of pages are printed and the footer of the print out will
       contain correct information.
     * An array instance path in a virtual signal expression failed.
     * The coverage command accepted multiple -instance options, but only use
       the last one. This was changed so that an error message is given if more
       than one -instance option is specified.
     * Interface contents were not always visible.
     * In the Source window, lines were no longer shown as executable once a
       source file was edited using an external editor.
     * Line numbers were not updating when scrolling using the middle mouse
       button.
     * Code Coverage windows are now updated properly immediately following
       elaboration. Changing context is no longer required to refresh the
       coverage windows.
     * Loading a design with code coverage, then, without existing modelsim and
       loading another design without coverage would produce errors. Coverage
       windows were requesting coverage data that did not exist. Coverage
       windows are now sensitive to whether the design has code coverage turned
       on or not.
     * Wave window Find Previous Transition and Find Next Transition searches,
       for searches that required a relatively long time to perform, could
       crash the front end when another search was attempted while a search was
       ongoing. Such searches are now ignored when a search is underway. Search
       attempts are also ignored when the active cursor is locked (including
       the Now cursor).
     * Coverage filenames that contained a hyphen ('-') character could not be
       successfully read using the vsim -viewcov <filename> command.
     * On Windows, invoking the File->Save As... menu pick from an undocked
       Transcript window caused the Main window to be activiated. Now, the
       Transcript window stays on top.
     * The Dataflow window did not use the namespace portion of object names
       passed to it.
     * A delayed virtual signal could not be logged or added as a trigger to
       the List window.
   ______________________________________________________________________

   Verilog Defects Repaired in 6.3
     * Array manipulator methods previously produced incorrect errors when used
       inside class tasks and functions.
     * Previously, the simulator did not do type-checking for connections to
       ports  declared  as  enums. An error message is now printed during
       elaboration if the actual value is not of the same enum type.
     * The multiplier in a replicate expression was allowed to be non-constant
       when  the  inner  concat was not a string concat. We now allow the
       multiplier to be variable only when the inner concat is a string concat.
     * There is now a semantic difference for assignment to and from a string
       variable. Now, we require a cast for assigning a packed or unpacked
       variable to a string variable. For example:
       bit [0:2] bit_p;
       string s;
       s = bit_p; // illegal
       s = string'(bit_p); // legal
     * Pending non-blocking assignments scheduled from a disabled block are no
       longer canceled unless the module was compiled with -compat. Previously,
       the non-blocking assignment would be canceled only if it was not an
       optimized form. Either behavior is allowed in the IEEE specification,
       but now the results are predictable and do not rely on the outcome of
       optimizations.
     * A  parameter  of  type  'time'  was not being set correctly if the
       instantiated module had a different timeunit in effect than the module
       it was instantiated from.
     * The SystemVerilog requirement that "super.new" calls occur first in a
       constructor was not being enforced.
     * An event involving a field within a struct sometimes incorrectly trigger
       when a different member of that struct changed.
     * Gate-level  optimized  cells  with  timing checks and more than 32
       conditions evaluate conditions incorrectly in some cases.
     * Clocking  block  outputs (output or inout) drive values onto their
       corresponding signals only when assigned a value in the previous cycle.
     * When a case expression type is parameteric, the simulator sometimes gave
       incorrect output.
     * Illegal package references using dot separators rather than the double
       colon were being permitted. Imported references to parameterized class
       objects could cause incorrect elaboration time errors.
     * An error was not reported for illegal task and function enables when the
       formal  was  an  enumeration  of mode input and the actual was not
       assignment compatible.
     * An instantiation using ".*" connections could incorrectly fail if the
       instance was in a generate and the ".*" caused a connection to be bound
       to a module level declaration.
     * Pre and post increment and decrement (++/--) operations could fail with
       an internal error during simulation if the item being operated on was an
       unpacked  array slice. This now fails with an appropriate error at
       elaboration time.
     * Forcing a parameter from the command line caused a simulator crash. Such
       a force now reports an error regarding an invalid target.
     * In certain cases, internal compilation errors occurred for classes
       declared as "class static".
     * In certain cases, an internal error occurred in vopt if the design
       attempted to defparam a specparam. This is now correctly reported as an
       error.
     * An  error was not reported when the design attempted to extend the
       "process" class from package std.
     * Incorrect source information could be reported from assertion system
       reporting tasks when the assertion occurred in a parameterized class.
     * A concatenation produced incorrect results in an optimized design in
       some cases. Specifically, there were problems with concatenating nets
       driven  by  continuous assignments where the RHS of the continuous
       assignment was wider than the net.
     * Clocking blocks now support hierarchical expressions as described in
       IEEE Std 1800-2005 section 15.4, including interfaces.
     * The write timing command now displays path delays and timing check
       limits that are unadjusted for delay net delays by default. If it is
       necessary to see the adjusted values (those used for simulation), use
       the -simvalues switch.
     * The simulator crashed in certain cases when using $countdrivers.
     * In an optimized design, if a parameter was only accessed via the PLI and
       its  value  was  set by a defparam, in some cases the value of the
       parameter remained the default initial value.
     * If a function was called through a null virtual interface an error
       message should have been generated but was not. Instead the function
       continued and produced incorrect results. Now the simulation stops and
       generates an error message such as:
       # ** Fatal: (vsim-3976) Null instance dereference in task/function call.
       # Time: 0 ns Iteration: 0 Process: /bad_top/#INITIAL#52 File: test1.sv
       # Fatal error at test1.sv line 21
     * vlog did not do type-checking between actual and formal arguments in the
       case  of  automatic tasks and functions, such as class methods. In
       addition, argument type-checking errors are now more informative and
       print the task/function name and the name of the formal argument. For
       example: ** Error: test1.sv(16): Arg. 'data' of 'convert': Cannot assign
       a packed type to an unpacked type.
     * Formatting strings in the $value$plusargs system task did not correctly
       recognize leading 0 forms (e.g. %0f).
     * Under certain circumstances, the division of a 2-state value by another
       2-state value incorrectly resulted in 0 when that result was converted
       to a 4-state value.
     * Added optimizations to the Constraint solver to improve performance.
       Additional  analysis  of  constraints is used to identify specific
       optimization  opportunities (reducing variable dependencies due to
       equivalence constraints, characterizing constraint complexity). NOTE:
       These optimizations may result in random solutions (values) that are
       different from the random solutions of prior releases.
     * The  LRM  specifies  that  unpacked  array  assignment  works from
       left-to-right, regardless of the index directions of the two arrays.
       Previously, the simulator was reversing the assignment if the unpacked
       arrays were not memories. Examples of this case are arrays of reals or
       arrays of unpacked structs:
       typedef struct {
           bit a;
           byte cs;
       } structa;
       /* Unpacked array of unpacked structs. */
       structa chrs [2:0];
       structa revd [0:2];
       initial
           revd = chrs; // revd[0]=chrs[2], revd[1]=chrs[1], revd[2]=chrs[0]
     * The simulator now allows empty parentheses as parameter port lists.
     * In many cases type-checking was not done on default argument values in
       task and function definitions. For example:
       task automatic myfun(int a[]=3); // Illegal assignment to a dyn. array.
       ...
     * vopt crashed while optimizing an array of interfaces where the interface
       contained a clocking block accessed through a modport.
     * In certain situations, such as passing an element to a queue method, we
       were not catching type-errors. These errors are now caught at during
       simulation. For example:
       module badqueue1;
          int q[$];
          int a[1:0];
          initial q.insert(0, a); // Error, since 'a' should be an int.
       endmodule
     * Hierarchical references to variables declared within a task or function
       in a package or $unit scope caused an internal error in vlog and vopt.
     * When simulating SystemVerilog code compiled with the -incr option, the
       simulation sometimes crashed with the error message:
       INTERNAL ERROR: export_lookup() failed.
     * When the destination type of a bit stream cast contained more than one
       dynamic array, the simulator incorrectly resized the last dynamic array
       instead of the first.
     * When the destination type of a bit stream cast is dynamic and the source
       is a null dynamic array or queue, the simulator sometimes didn't resize
       the destination to zero size.
     * In some cases, the simulator would not catch an illegal assignment to a
       virtual interface. This happened when an externally-referenced interface
       instance  was  passed  to  a  class  method,  where  the class was
       parameterized. This resulted in a crash or hang during elaboration or
       runtime in some cases.
       These errors are now caught and reported as "Illegal assignment". This
       error message will be improved in a future release.
     * Indexed selects into arrays of SystemVerilog classes or structs could
       use an incorrect index value if the type of the index is parameter
       dependent and if a subsequent field or member select was applied to the
       indexed  select.  Such  selects  would  be  of  the  general  form
       "a[obj.idx].method()".
     * Enum declarations inside tasks or functions could cause fatal errors,
       particularly  within  the  context  of a parameterized class. Enum
       declarations that were dependent on module parameter values or other
       enum declarations could result in incorrect enum values being used.
     * A call to a predefined method (such as get_inst_coverage) in the context
       of a $display or similar system task could cause a fatal error if the
       enable did not have parentheses for the enable. Since system tasks and
       functions permit scopes as arguments, we cannot treat such a reference
       as an enable. Since predefined methods aren't valid as a system routine
       scope argument, such a reference is not valid at all. An error is now
       produced for such invalid uses of a predefined method.
     * Using  by-name  association  for  a  class  constructor (new) of a
       parameterized class type could result in a fatal error at simulation
       time.
     * Using a hierarchical reference to a parameter as a port connection in a
       module instantiation could result in an incorrect elaboration error of
       the form:
           ** Fatal: (vsim-3986) Unhandled port connection.
     * The  vopt  +acc option did not allow a negative index. For example
       +acc=+/top/inst[-1] was not allowed.
     * Assigning an 'assignment pattern' to a packed struct, where elements of
       the struct were enums, produced incorrect results.
       Example (where Y1 is a packed structure):
       Y1 = '{opcode: opc, ra: A }; // Y1 did not get the assigned value.
     * Referencing  an imported typedef in a package where the typedef is
       defined to be a parameterized class specialization could result in
       compile failures.
     * When using "ref" argument passing to tasks and functions where the type
       of the "ref" argument was a type parameter or parameterized class,
       accesses to the formal could be incorrect and cause incorrect results or
       fatal errors.
     * In  certain  cases where the bounds are non-constant, a continuous
       assignment of a part-select did not trigger properly. For example:
       parameter porta_addr_size = f_width2addr(porta_width);
       input [porta_addr_size-1:0] addra;
       wire [8:0] porta_row_addr;
       assign porta_row_addr = addra[(porta_addr_size - 1) -: 9];
     * Error messages associated with objects located in $unit would report the
       incorrect file name.
     * A default skew containing both edge and time delay values would cause a
       crash if the clocking block contained no signals.
     * The -vlog95compat switch no longer allows comma separated event lists.
     * In  some  cases,  initializing  a static variable inside a task in
       SystemVerilog code caused the compiler to generate an internal error
       message. An example is when the initial value was a time literal such as
       "0ns".
     * An if-statement branch within an always block failed to execute in some
       cases when optimized in conjunction with a similar always block having a
       similar if-statement having an empty begin-end block in one of its
       branches.
     * When compiling SystemVerilog source with the -incr option the compiler
       was not recompiling modules when imported packages were modified.
     * Event control expressions containing logical operators such as "@(a &&
       b)" or "@(a || b)" caused an internal compiler error when used inside an
       automatic task.
     * When using the vopt +acc option on SystemVerilog packages, the generated
       code  sometimes  did  not permit breakpoints on calls to tasks and
       functions in the package.
     * Bidirectional pass switches had not been included in creating extended
       VCD files.
     * The ternary operator produced incorrect results in some cases if the
       condition operand was a bitwise inversion of a vector result.
     * An  indexed  part-select of a vector net in a port connection list
       resulted in an inappropriate error message indicating that the "bounds
       are reversed" in an optimized design where the connected module was
       inlined.
     * The  sensitivity  list  implied for @* failed to include variables
       referenced in unreachable statements or ineffectual expressions due to
       constant propagation optimizations.
     * There was a problem where concatenation of duplicate 2-state values
       could produce the wrong result. For example:
       {bval[63:0],bval[63:0]}
     * Conditional pathdelay selection could be incorrect particularly when
       multiple sequential cells are connected to a common clock net.
     * Gate-level models with buffered delayed nets did not function correctly
       with +delayed_timing_checks.
     * The parser would not correctly handle block comments containing "/*" as
       in /*/AUTOWIRE/*/.
     * Signals that are part of an interface instantiated as a vector could not
       be individually logged or added to a Wave window.
     * SystemVerilog clocking blocks are compliant with Mantis Item #890.
     * In systemverilog, the liblist clause of an instance in a config is now
       being inherited hierarchically downward to all entities. This resolution
       will take place before using libraries specified in the -L switch.
   ______________________________________________________________________

   PLI Defects Repaired in 6.3
     * Under some circumstances, a VPI iteration for vpiLoad on a vpiNet or
       vpiNetBit handle looped endlessly.
     * The acc_fetch_value and acc_set_value routines failed on System Verilog
       2-state variable types in the accVectorVal format mode.
   ______________________________________________________________________

   VHDL Defects Repaired in 6.3
     * The simulator now indexes the argument to the resolution function based
       on the arugment's type. It no longer automatically assumes the range to
       begin at zero.
     * A procedure with an array type out or inout mode signal parameter had
       sometimes caused a crash because of two conflicting optimizations.
     * Elaboration differences could occur when the simulation was run with
       -vopt or -novopt. In some cases, the VHDL generated incorrect default
       binding  at  elaboration time to Verilog modules compiled with -93
       supplied to the vlog command when vsim had the -novopt option set. The
       incorrect default binding would bind the component instead if leaving it
       unbound or reporting an error.
     * When using a location map, refreshing a design caused pathnames to be
       incorrectly processed. The result was visible in the simulator when
       viewing source files failed because of invalid pathnames to the source
       files.
     * When using the -check_synthesis option, clock processes where the clock
       was an index expression incorrectly generated warnings.
     * Access type variables initialized with new in a protected type body now
       work correctly.
     * When a package declaration contained a subprogram declaration along with
       an alias to that subprogram, and when another design unit called the
       subprogram using an expanded name whose suffix was the alias name, vopt
       would erroneously report that the subprogram body for the subprogram was
       missing.
     * Use of signal_force() in a VHDL design could cause the simulator to
       crash.
     * When  run  repeatedly on a top-level design unit, if the hierarchy
       contained a VHDL design unit with at least 2 different specializations
       (different  generic values inferred for instantiations of the same
       architecture), vopt generated code for some of the specialized design
       units, and for all design units at higher levels of the design. vopt
       should  have  determined  that  none  of the design units had been
       recompiled, and therefore no code generation was needed.
     * vcom  and vopt crashed when encountering a slice expression in the
       index_specification   of   a  for  generate_statement_label  in  a
       block_specification within a configuration declaration.
   ______________________________________________________________________

   FLI Defects Repaired in 6.3
     * Fixed a bug where cosimimulation callbacks where not made for functions
       after normal processes completed (callbacks set with the cosim function
       mti_AddAfterNormalProcsCB()) when SystemC was also used.
   ______________________________________________________________________

   VITAL Defects Repaired in 6.3
   ______________________________________________________________________

   SystemC Defects Repaired in 6.3
     * SystemC stdout is suppressed when vopt is running. This means that
       messages from cout, printf and fprintf to stdout will not be displayed
       on the screen when vopt is running. Anything printed on stderr will
       still  be displayed. Use the vopt option -enablescstdout to enable
       stdout.
     * vsim  crashed  when  a  transaction  stream  was  created  in  the
       start_of_simulation() callback of the parent module.
     * An input or inout port cannot be forced if the port has values coming
       into it from a higher level. Forcing such an input or inout should
       result in an error. For lower level SystemC, this condition was not
       being caught. Now such a case correctly results in an error.
     * A force on a SystemC signal did not always propagate correctly through
       inputs or IOs to instantiated Verilog or VHDL below.
     * The noforce command on a SystemC signal caused a crash if the signal was
       not being forced.
   ______________________________________________________________________

   Assertion Defects Repaired in 6.3
   ______________________________________________________________________

   Mixed Language Defects Repaired in 6.3
     * An  error  message  was  added  for unsupported Dot-Star (.*) port
       connections at the SystemC-Verilog and VHDL-Verilog mixed-language
       boundary.
     * If VHDL instantiated a Verilog UDP, design optimization (vopt) crashed
       or failed in unpredictable ways. vopt now reports an error that you
       cannot instantiate a UDP from VHDL.
     * Mixed case SystemC module names are now supported on the SystemC-VHDL
       mixed language boundary.
     * The compiler, when invoked with the -O5 option on a very large design
       unit, crashed in rare cases.
   ______________________________________________________________________

   Coverage Defects Repaired in 6.3
     * Multiple vopt generated Verilog and VHDL design units are now merged
       before saving into a UCDB file.
     * The toggle report command has changed in the following way in vsim and
       viewcov mode. The same behavior is true for vcover with the -toggles
       option.
          + -instance and -recursive options were added to show toggles under
            the given instance path.
          + -select <inputs|outputs|inouts|ports|internals> option was added to
            filter input, output, inout, all ports, and internal signals.
          + -unique option was removed, reported toggles are always unique now.
     * Code coverage was not handled correctly in generate blocks. Now code
       coverage  is  on  and only on in generate blocks that actually get
       elaborated. The -coverGenerate option is no longer needed. If you want
       to revert to the old behavior of code coverage being off in generate
       blocks, use the -nocoverGenerate option to vcom, vlog or vopt.
     * When running with toggle coverage, there was a memory leak that occurred
       whenever the coverage data was updated. This leak could be quite large
       when processing a group of exclude commands. In extreme cases this leak
       exhausted memory and caused the simulator to exit or crash.
     * If expression and statement coverage are enabled, in some cases the
       missing  expression  coverage  tab  displayed  nothing even though
       expressions were not completely covered. This only occurred when you
       viewed coverage data by instance, not by file.
     * When multiple files were compiled on the same vcom or vlog command line
       and source code coverage pragmas were used the pragmas sometimes got
       carried over from one file to another when they shouldn't have been. Now
       if vlog -mfcu is specified, the pragmas will get carried over, but
       otherwise they will not.
     * The -out option was added to the vcover merge command to specify the
       output filename explicitly.
     * Regular expression matching didn't work in fcover report and coverage
       report commands.
     * A new report option named -subscopes was added to the coverage and
       vcover report commands. This option prints code coverage data from
       generate blocks in byinstance report mode.
     * The command coverage testnames or vcover testnames lists all test names
       that have been included in a given UCDB file. (A merged UCDB file will
       have multiple test names, that could be used with the coverage analyze
       command.) Test names can be established by the user before saving a UCDB
       file with the command coverage attr -test mytestname; otherwise by
       default the test name is the same as the basename of the UCDB file.
     * Multiple  -instance, -du, and -source options are now supported in
       coverage and vcover report commands to specify multiple instance, design
       unit, and source file names in a single command.
     * Arguments to the coverage clear command have changed. The new usage is:
        coverage clear [-assert] [-cvg] [-code <bcefst>] [-codeAll]
            [-excluded [-user|-pragma]] [-directive] [-du <name>]
            [-instance <path>] [-match <string>] [[-path] <obj>+]
            [-recursive]
     * Unreadable UCDB files were created if vsim command line has any quoted
       newline character.
     * Excluded toggle bits were displaying in report.
   ______________________________________________________________________

   General Defects Repaired in 6.3
     * Changed the following things in the dpiheader generated during vsim:
          + unsigned int64_t -> uint64_t
          + short int -> short
          + recognition of unsigned for char
     * If a module port list contained "input logic" (or "output logic", "input
       integer", etc) then that input (or output) was not handled correctly by
       certain  commands  such as find signals or vcd add if the commands
       included the options -in or -out.
     * When optimizing designs with vopt, the resultant output could sometimes
       be susceptible to external changes to the file system environment (e.g.
       changing the working directory, moving or deleting libraries, re-mapping
       libraries, etc.). This has been made more robust.
     * We support the changes to the IEEE P1800 LRM section 20.8 regarding
       virtual interfaces by now allowing an assignment of a virtual interface
       with no selected modport to a virtual interface that has a modport in
       its definition.
     * Calls  to the signal_release() VHDL procedure or $signal_release()
       Verilog system task could leak memory if no prior call to signal_force()
       or $signal_force() were made on the specific destination object.
     * If an invalid type of string or pointer was specified when recording a
       transaction  attribute,  a  warning was issued and no attribute is
       recorded. This applies to both the SCV and SystemVerilog transaction
       recording interfaces.
     * The SystemVerilog transaction recording interface does a much better job
       of handling expressions, system function return values, class members,
       etc. as parameters to it's system task and system function calls and of
       properly handling and giving warning messages for invalid parameters.
     * The  SystemVerilog transaction recording interface system function
       $create_transaction_stream() now creates the stream in the region from
       which the call is made. Note: since the stream is created at simulation
       time, if the region is optimized away, the stream will be created in a
       higher level region. If this is not the desired behavior, the user needs
       to  take care to prevent optimization of the region containing the
       $create_transaction_stream() call.
   ______________________________________________________________________

   Mentor Graphics DRs Repaired in 6.3
     * dts0100335979 - Fatal WLF Error (2): ../../../src/tkgui/wlfFile.c(460)
       Internal assertion: size <= fp->cBufSize.
     * dts0100378138 - Add ability to overwrite existing files in project
       directory.
     * dts0100295475 - Bad information in VCD file with command vcd file.
     * dts0100385775  -  Locals  window  doesn't display ref struct value
       correctly.
     * dts0100377694 - Simulator Print Status dialogue has wrong page numbers.
       e.g. 7 of 6.
     * dts0100388088 - Line numbers are not updated in source viewer when
       scrolling using middle mouse button.
     * dts0100355846  - 6.2 PE shows different results than 6.2 SE, other
       simulators.
     * dts0100385479 - SIGSEGV Bad pointer access when using $countdrivers.
     * dts0100388004 - $value$plusargs gives error when using zero with format
       strings.
     * dts0100390205 - Division broken on object members.
     * dts0100392930 - q.insert() gives no error message if element in brackets
       does not conform.
     * dts0100367400 - Compiling a second time with -incr causes crash.
     * dts0100051023 - fatal: index 1 out of range 0 to 0.
     * dts0100379007 - Input logic not handled correctly inside module port
       list.
     * dts0100396844 - Memory leak in Simulator when signal_release occurs
       without signal having been forced.
     * dts0100176581 - Adding waves in the Wave window following the currently
       selected signal.
     * dts0100396501 - Problem with mti_GetHighestParentSignal when parent
       signal is a SystemVerilog signal.
     * dts0100390361 - If the Path Separator is set to ':' it's not possible to
       use the combine signal menu.
     * dts0100390331 - inout port in clocking block is not working properly.
     * dts0100387627 - Clocking block outputs (output or inout) drive values
       onto their corresponding signals only when assigned a value in the
       previous cycle.
     * dts0100387004 - Can't use static array in foreach in 62f.
     * dts0100385642  -  vopt does not seem to handle the vlog -93 switch
       correctly.
     * dts0100384649 - Parameterized virtual modports don't work.
     * dts0100384216 - Dereferencing an uninitialized/null virtual interface
       does not generate an error.
     * dts0100383463 - Not able to retrieve undocked window's toolbar.
     * dts0100370348 - A parameter of type time creates strange results if
       module has a timeunit declaration and the default value of the parameter
       is overwritten from the outside.
     * dts0100382421  - Simulation results in X's when it should be known
       values.
     * dts0100367045 - When loading an elab file, the -wlf option does not
       change the name of the generated wlf file.
     * dts0100365916 - Dynamic array - bit select in $display statement doesn't
       work.
     * dts0100365183 - Signals in interface files declared as inout give X's in
       waves.
     * dts0100362538 - vlog doesn't give compile error when input in a function
       has a net type.
     * dts0100327545 - 6.1b will not run if a pre-9.5 license server is listed
       in the search path.
     * dts0100240913 - Fatal license error caused by $DISPLAY.
     * dts0100383455 - Undocked window toolbar not working.
     * dts0100309081 - No coverage for IF GENERATE wrapped VHDL code.
     * dts0100317904 - Code Coverage with VHDL generate.
     * dts0100323389 - More intelligent handling of coverage data for generate
       statements.
     * dts0100394592 - Can't load the result of vopt after tranfering the
       library in another directory.
     * dts0100354281 - Problem in Branch Coverage from 6.1c.
     * dts0100394589 - vopt terminates without optimizing design due to bad
       permission on a directory.
     * dts0100394644  - Crash when finding signal transitions in the Wave
       window.
     * dts0100394790 - The simulator can't find HDL signal from SystemC module
       when a global pointer is used.
     * dts0100395977 - Code coverage report shows coverage data for OVL assert
       blocks eventhough they have been excluded.
     * dts0100396711 - Simulation crashes during invocation when vopt was run
       twice.
     * dts0100396974 - Internal error with event trigger containing automatic
       variable index.
     * dts0100397105 - Unresolved reference error.
     * dts0100397421 - Error message within multi-file packages.
     * dts0100397162 - Syntax highlighting is wrong after external change of
       source file.
     * dts0100398725 - # ** Error: (vsim-3852) Invalid override of parameter.
     * dts0100398763 - Incorrect write timing output on optimized cells.
     * dts0100398791 - Certain types of gate level register cells produced
       incorrect results in -fast mode.
     * dts0100398795  -  Interconnect timings do not seem to be annotated
       correctly on memory inputs.
     * dts0100399624 - vopt -help reports a line about coverage twice.
   ______________________________________________________________________

   Known Defects in 6.3
     * The stack unwinder on the linux_x86_64 OS is unreliable. The unwinder is
       the fundamental facility provided by the OS for sampling where program
       execution is at. The unwinder is necessary for gathering performance
       data. This is a known issue with this specific OS and is why performance
       data will be incorrect or non-existant on this platform.
     * Users should be mindful of enabling both performance profiling and
       memory  profiling at the same time. Memory profiling requires much
       overhead  process,  and it can skew the results of the performance
       profiling data.
     * On certain (RedHat) Linux Operating System versions the "-restore"
       feature  occasionally  fails. This is due to the memory allocation
       security (anti-hacking) feature of Linux. RedHat Enterprise release v.3
       update3 was the first version to have this security feature. In these
       Linux releases two consecutive program invocations do not get the same
       memory allocation foot-print. For the "-restore" feature the simulator
       relies  on having the same memory allocation foot-print. Users are
       advised to re-try this feature a few times as on average 3 out of 5
       attempts are successful. In recent Linux versions, an override for this
       anti-hacking feature is provided. Please use it at your own discretion.
     * In code coverage, there is no way to exclude a condition or expression
       table row for the case of more than one table on a line and the table in
       question is not the first table on the line.
     * Support  of debugging C code during a quit command was disabled on
       Windows. The corresponding C Debug command cdbg stop_on_quit was also
       disabled on Windows.
     * Specparams can be learned during the learn flow, but cannot be found on
       consumption. The workaround is to use full +acc deoptimization.
     * Attempting  to  traverse from an unnamed VPI typespec handle to an
       instance or a scope will result in a crash.
     * There are some limitations related to coverage exclusions:
          + Toggle exclusions are not supported in viewcov mode yet.
          + Exclusion report on toggles are not supported in both vsim and
            viewcov mode.
     * Concatenations and bit slices are not yet supported for SystemVerilog
       clocking blocks.
   ______________________________________________________________________

   Product Changes to 6.3
     * The default action for the command onbreak has changed from "pause" to
       "resume". This will only impact dofiles that do not currently contain
       any onbreak commands. The "pause" action causes the macro file to stop
       executing and issues a "Paused" prompt to allow interactive debugging of
       the macro file. The resume command continues the execution of the macro
       file at the point of the break. The result of this change in default
       value will affect macro files without an onbreak command so that those
       files will continue executing after hitting a break point. If the old
       behavior is required, then it will be necessary to add the command
       onbreak pause at the beginning of the macro file.
     * The default collapsed mode for VCD output from the vcd dumpports command
       has changed from not collapsed to collapsed. The specific change was to
       the line in the modelsim.ini file: "DumpportsCollapse = 0".
       For 6.3, this was changed to: "DumpportsCollapse = 1".
       To get the old non-collapsed format, change this setting back to 0 in
       the modelsim.ini file.
     * Starting in 6.3 concatenations are no longer treated as 'assignment
       patterns'. Previously, the simulator attempted to detect these cases and
       produced the following warning:
       You should use "'{" to specify this literal.
       Now we will print errors, as in the following example:
       int a[3:0] = {default:0};
       int b[1:2] = {32'b1, 32'd2};
       ...
       ** Error: test2.sv(31): Can't use named concat. literals here.
       ** Error: test2.sv(31): Illegal concatenation of an unsized constant.
       ** Error: test2.sv(31): Cannot assign a packed type to an unpacked type.
       ** Error: test2.sv(32): Cannot assign a packed type to an unpacked type.
     * Previously,  an attempt to print a memory using $display displayed
       nothing, while $display of other unpacked types (such as structs and
       dynamic  arrays)  did produce output. In 6.3, we will now print an
       elaboration error, #8323, for all such constructs (which are illegal).
       This error may be suppressed.
       To  print  unpacked  data, we have added the "%p" and "%0p" format
       specifiers.  The  former  prints  the  data in the form of a legal
       "assignment pattern", while "%0p" prints in a shorter format.
     * Wildcard indexed associative array can no longer be used as a foreach
       array.
     * The IEEE Std 1800 has approved an important restriction to packages.
       With the new rules, packages are not permitted to refer to compilation
       unit items. An example of such of reference is the following small
       design:
            typedef int T;
            package p;
                T foo;
            endpackage
       Packages may depend on other packages so compilation unit declarations
       that packages need should be refactored into separate packages. For
       example, the previous design should be changed to a form similar to the
       following:
            package shared_types;
                typedef int T;
            endpackage
            package p;
                import shared_types::*;
                T foo;
            endpackage
       It is also important to note that "import" statements immediately before
       a package declaration are compilation unit imports and not imports into
       the subsequent package. With the new rules, the package references may
       not look into such an import. For example, the following approach will
       no longer work:
            package shared_types;
                typedef int T;
            endpackage
            import shared_types::*;
            package p;
                T foo; // cannot refer to T since it is imported into
                // the compilation unit, not into the package
            endpackage
       The new rules are now being enforced. Designs must be refactored so that
       packages do not refer to anything in the compilation unit.
     * This release includes the new Mentor Graphics Documentation System,
       which includes the following components:
       InfoHub -- A browser-based directory that provides links to all your
       locally installed documentation. The InfoHub also provides a search
       interface, from which you can search across all your locally installed
       documents. The search interface also enables you to submit a search
       directly  to  SupportNet.  The InfoHub provides access to User and
       Reference manuals and Tutorials, delivered in both HTML and PDF formats,
       and Release Notes, delivered in text format.
       PDF Bookcase -- A PDF file that provides links to the PDF documentation
       if you cannot use an HTML browser.
     * The  vopt  +acc=g option has been replaced by the +floatparameters
       option(Verilog designs) and the +floatgenerics option (VHDL designs).
       Both +floatparameters and +floatgenerics accept the same [+<module>][.]
       syntax accepted by +acc. Use +floatparameters and +floatgenerics to
       instruct vopt not to lock down values of parameters and generics during
       optimization. The parameters and generics will be left "floating", and
       thus  capable  of accepting modified values via the vsim -g and -G
       options. +floatparameters and +floatgenerics may have adverse effects on
       performance in some cases.
     * The vopt +acc=m option has been changed such that it no longer preserves
       primitive instances. Primitive instances are now preserved by using the
       new +acc=u option.
     * The VoptCoverageOptions variable has been removed from the modelsim.ini
       file. vopt optimizations for coverage are now controlled by the CoverOpt
       modelsim.ini file variable and the -cover command line option.
     * Turning  on  code  coverage  will  now  turn  off  fewer simulator
       optimizations. This will result in faster simulations with code coverage
       on. But you will notice some differences in code coverage data because
       of various optimizations. For instance, optimizations that prevent
       invoking of always blocks unless the data changes in addition to the
       clock, will result in reduced hit counts for statements within those
       blocks. In addition, VHDL processes that are recognized as clocked flip
       flops may have confusing numbers in the IF branch coverage. The level of
       optimization  with code coverage is now controlled by the CoverOpt
       modelsim.ini variable or an additional character allowed in the -cover
       option to vcom, vlog or vopt. This is a digit from 1 to 4, with the
       following meanings (the default is 2):
       1 -- Turn off all optimizations that affect coverage reports.
       2 -- Allow optimizations that allow large performance improvements by
       invoking sequential processes only when the data changes. Allow VHDL FF
       recognition. This may make major reductions in coverage counts.
       3 -- In addition, allow optimizations that may change expressions or
       remove  some  statements.  Allow  constant propagation. Allow VHDL
       subprogram inlining.
       4 -- In addition, allow optimizations that may remove major regions of
       code by changing assignments to built-ins or removing unused signals.
       Change Verilog gates to continuous assignments.
     * The  -coverage  option  to  vopt  is  no  longer needed. vopt will
       automatically detect whether any of the source files were compiled with
       a -cover option, and will adjust its optimizations accordingly. Also, if
       you give a -cover xyz option to vopt, it will be logically OR'd with any
       -cover abc option given to an individual source file when processing
       that source file. In addition, if you compiled some source files with
       coverage on, you can force coverage off by giving vopt the -nocover
       option. This allows you to control whether coverage is on or off at vopt
       time instead of having to recompile individual source files.
     * The pathname reported by the simulator and User Interface for items
       inside SystemVerilog packages is incorrect. A path separator ('/') was
       used instead of the language correct package scope separator ('::').
     * The recording of attributes for transactions has changed. Previously,
       any attribute recorded on a transaction was not only added to every
       transaction on that same substream, but to all parallel transactions and
       the transactions on their substreams as well.
       Now, any attribute recorded on a transaction is still added to every
       transaction on that same substream, but is no longer automatically added
       to every parallel transaction and the transactions on their substreams.
       Typically, all transactions on a given stream (and all of it's parallel
       substreams) have the same set of attributes, and for that case, there
       will be no difference due to this change.
     * Changes for coverage exclude command:
          + Replace the option -instance with -scope to accommodate more scope
            types like generate block.
          + Transition  names are used with the option -ftrans instead of
            transition id's. The new syntax is:
                [-ftrans <state_var_name><transition_name>+ | all]
            where transition_name is specified as <state_name>-> <state_name>.
          + State names are used with the option -fstate instead of state id's.
            The new syntax is:
                [-fstate <state_var_name> <state_name>+ | all]
          + A new option -else is added to exclude the else part of every
            if-branch specified in the line range. Note that the line number
            for the else-branch is where the if-branch appears.
          + Recursive  exclusion for a scope is supported. To recursively
            exclude a scope, -scope is specified together with -r.
          + -scope and -du are supported with -togglenode.
     * The  UCDB  bin name for if-branch is changed from 'true_branch' to
       'if_branch'.
     * The  simulator has been improved to recognize and maintain Verilog
       escaped  identifier  syntax  for  all Verilog escaped identifiers.
       Previously  such identifiers were converted to VHDL-style extended
       identifiers, and then appeared as VHDL extended identifiers in tool
       output and CLI commands.
       Starting in 6.3, all default Verilog escaped object names inside the
       simulator appear identical to their names in original HDL source files.
       Sometimes in mixed language designs, hierarchical identifiers might
       refer to both VHDL extended identifiers and Verilog escaped identifiers
       in the same fullpath. For example:
       /top/\VHDL*ext\/\Vlog*ext /bottom
       top.\VHDL*ext\.\Vlog*ext .bottom
       (depending if the HierPathDelim variable is set to '/' or '.')
       Any fullpath that appears as user input to the tool (e.g. on the vsim
       command line, in a .do file, on the vopt command line, etc.) should be
       composed of components with escape syntax appropriate to their language
       kind.
       A modelsim.ini variable called "GenerousIdentifierParsing" can control
       parsing of identifiers input to the tool. If this variable is set (it is
       set by default now), either escape syntax to be used for objects of
       either language kind. This can be helpful to maintain compatibility with
       older  do files, which often contain pure VHDL extended identifier
       syntax, even for escaped identifiers in Verilog design regions.
       Note that SDF files are always parsed in "generous mode". SignalSpy
       function arguments are also parsed in "generous mode".
       On the vsim command line, the language-correct escape syntax should be
       used for top-level module names. Using incorrect escape syntax on the
       command  line  will  work  in the incr flow, but not in vopt. This
       limitation may be removed in a future release.
     * If  an  invalid  end  time  is specified when recording the end of
       transaction, a warning is still issued but the current simulation time
       is used as the transaction end time instead of the transaction start
       time.
     * The format of the library contents file (_info file) has been changed
       for the purpose of improved compiler performance. The new format is not
       backwards compatible with previous releases. Consequently, any attempt
       to refresh or recompile a 6.3 library with an older release will result
       in an error similar to the following:
       ** Error: (vcom-42) Unsupported ModelSim library format for "./work".
       (Format: 3).
       Converting the library back to an older release requires that you remove
       the library and rebuild it from scratch. Or, if you are converting back
       to a 6.2 release only, then you can convert the library format to the
       6.2 format and then freely refresh back and forth between 6.2 and 6.3
       releases. Use the 6.3 version of vlib to convert the format to the 6.2
       version using the -format option. For example:
       vlib -format 1 work
       The format version for pre-6.3 releases is 1, while the format version
       for 6.3 is 3. Format version 2 is related to libraries created with the
       -archive option and should be avoided when specifying the vlib -format
       option.
     * The  XML  Testplan  Import Utility (xml2ucdb) was enhanced and the
       command-line and configuration parameters were re-named for consistency.
       The following changes were made:
         1. Command-line
              1. Added a "-verbose" option to show testplan hierarchy and
                 design mapping. By default, the utility is a lot less noisy
                 than before.
              2. A  "-ucdbfilename  " option has been added to remove the
                 order-dependence  of  the files on the command line (the
                 original syntax is still accepted).
              3. The command-line arguments are now order-independent.
              4. Any "-format " option found on the command line is processed
                 first and other extraction parameters found on the command
                 line act as overrides on top of the parameters found in the
                 confuguration file.
              5. The same parameter names are used both on the command line and
                 in the configuration file.
              6. The "-tagseparators " option, when used on the command-line,
                 applies  only to the taglist parameters specified on the
                 command line (see below).
         2. Configuration file
              1. Added "datalabels" parameter to support user-defined embedded
                 data labels.
              2. The following parameters have been re-named for consistency.
                 In all cases, the former name is still recognized:
                   1. start => starttags
                   2. stop => stoptags
                   3. exclude => excludetags
                   4. description => descriptiontag
                   5. sectionitem => sectiontags
                   6. dataitem => datatags
                   7. testitem => titletag
                   8. coveritem => linktag
                   9. coverattr => linkattr
              3. The "Tags" field name in the "fieldnames" and "fieldlabels"
                 parameters has been renamed "Link". The former name is still
                 recognized.
         3. Behavior
              1. The UCDB tags used to link testplan sections to coverage items
                 now has the contents of the "title" parameter prepended.
                 Lacking that, the basename of the XML input file is used.
              2. The "startsection" parameter now reflects the initial section
                 number for each level of hierarchy (auto-number mode only).
              3. Data  capture is no longer enabled from the start of the
                 document in auto- number mode. An element matching "starttags"
                 or a section number matching the "startstoring" parameter is
                 required to enable data capture.
   ______________________________________________________________________

   New Features Added to 6.3
     * "modport expressions" as described in Section 20.4.4 of the IEEE P1800
       LRM are now supported. For example:
       interface iface21_iface;
       bit [7:0] req = 8'b10110001;
       reg [1:0] x;
       reg [2:0] y;
       modport client(input .high(req[7:4]), output .low(req[3:0]), output
       .c({x,y}));
     * The "type operator" as described in Section 6.10 of the IEEE P1800 LRM
       is now supported.
     * IEEE P1800 LRM section 10.4.1.1, "Pattern matching in case statements",
       has been implemented.
     * The Verilog compiler now supports the use of the 'var' keyword in port
       declarations:
       module top(input var integer a);
       However,  the  rules in IEEE P1800 Section 19.8 which specify that
       omitting the 'var' keyword causes the port to default to a net are not
       implemented yet.
     * IEEE P1800 LRM section 10.4.1.2, "Pattern matching in if statements",
       and section 10.4.1.3, "Pattern matching in conditional expressions",
       have been implemented.
     * Support for arrays of events is provided in this release. Note that we
       support the construct "->evarr[0]", the syntax for which is being added
       to the IEEE P1800 LRM.
     * We now support "assignment patterns" as port-actuals, although this is
       currently restricted to input ports. For example:
       module ports10;
           int c1 = 2, c0 = 1;
           ports10_low u1('{1, 0}, '{c1, c0});
           initial
              #10 c1 = 5;
       endmodule
       module ports10_low (input bit baa [1:0], int c [1:0]);
           always_comb
              $display("%0t: baa = {%b, %b}", $realtime, baa[1], baa[0]);
           always_comb
              $display("%0t: c = {%0d, %0d}", $realtime, c[1], c[0]);
       endmodule
     * The  command mem search can handle regular expressions as a search
       pattern.  This  command  takes options -glob <pattern> and -regexp
       <pattern>. In the case of the -glob option, the pattern is treated as a
       glob pattern and with the -regexp option, the pattern is treated as a
       regular expression. The option -pattern is deprecated.
     * Arrays of real/shortreal and float can be viewed as memories.
     * Passing arguments as 'const ref' to a function or task is supported now.
     * In the PE version, a compile time warning is given for SystemVerilog
       testbench features detected (that are not supported in PE). For example:
       coverage, assertion and randomization.
     * The following styles are now supported for FSM Recognition and FSM
       Coverage.
          + FSMs using when-else statement.
          + FSMs using multiple if-else statement.
          + FSMs using multiple case statement.
          + FSMs using mixed if-else and case statement.
          + FSMs defined using one-hot/one-cold style.
          + FSMs using current/next state variable as VHDL record or SV struct
            field. Nested structures are not supported.
          + FSMs using current/next state variable as VHDL index expression.
          + FSMs  using any integral SystemVerilog types like logic, int,
            bit_vector, enum, packed struct etc. Typedefs of these types are
            also supported.
          + Verilog FSMs having state variable assignment to 'x (unknown) value
            in  case statement. This feature is supported with the option
            -fsmxassign.
     * The  following  RTL  pragmas are now supported to turn on/off code
       coverage:
          + pragma synthesis_off
          + pragma synthesis_on
          + pragma translate_off
          + pragma translate_on
          + vnavigatoroff
          + vnavigatoron
          + vhdlcoveroff
          + vhdlcoveron
       The 'pragma' keyword in the above pragmas can also be replaced with
       'synopsys'/'mentor'/'synthesis'.
     * The add wave command supports the new switch -position <location> to
       allow better control when adding signals to the Wave window. Values of
       <location> are: top, bottom, end, before, after, above, below, or an
       integer position. Please see the Reference Manual for detailed usage.
     * When a port actual's type is not compatible with the port in a module or
       interface instantiation, we now print a detailed message indicating the
       cause of the mismatch. In addition, we also do full type-checking on
       net-type ports, which we were not doing previously.
       Examples of error messages:
       #  ** Error: (vsim-3906) src/array8/test.sv(9): Connection type is
       incompatible with port (data): Array ranges [3:0] & [1:0] have different
       lengths.
       # ** Error: (vsim-3906) src/array8/test.sv(42): Connection type is
       incompatible with port (data): Array elems. must both be signed or
       unsigned.
     * From IEEE 1800-2005 Section 23.4: `begin_keywords and `end_keywords are
       supported.
     * The  new  vsim switch -wlfsimcachesize and associated modelsim.ini
       variable  WLFSimCacheSize  have  been  implemented  to  complement
       -wlfcachesize and WLFCacheSize. The new switch and variable specifically
       set the size of the WLF reader cache for the simulation dataset only.
       This makes it easier to set different sizes for the WLF reader cache
       used during simulation and those used during post-simulation debug. If
       -wlfsimcachesize nor WLFSimCacheSize are specified, the -wlfcachesize or
       WLFCacheSize settings will be used.
     * Logging is now multithreaded on systems that support it. Multithreaded
       logging is available on Linux and Solaris systems with more than one
       processor. Multithreaded logging will be used by default on systems
       where  it  is  available and can be controlled by the vsim options
       -wlfnothreads   and   -wlfthreads  or  the  modelsim.ini  variable
       WLFUseThreads.
       In order to support multithreading, ModelSim executables on the Linux
       and Solaris platforms are linked with the pthreads library, which may
       cause problems with gdb. If a 32-bit gdb is invoked on an executable
       linked with pthreads and running on a system with a 64-bit kernel, gdb
       may fail to initialize with a message about failing to load a thread
       debugging library. This is a problem with gdb. The solution is to use a
       64-bit gdb executable. The 32-bit Linux distribution of the simulator
       includes a 64-bit gdb called gdb64 for this purpose. Also, on most Linux
       distributons,  the  version  of gdb in /usr/bin matches the kernel
       architecture, so using /usr/bin/gdb should work correctly.
     * Added the new coverage CLI command coverage attribute, which replaces
       the command coverage testattr. coverage attribute works on three types
       of  objects: test, global and user. You can add, delete or display
       attributes.
       For test objects, coverage attribute has the same functionality as
       coverage testattr in did 6.2, except that new test records will no
       longer  be  created  if the testname does not match what is in the
       database. This command continues to work in vsim, vcover and viewcov
       modes.
       For the global UCDB object, this command allows you to set and display
       UCDB-wide attributes in viewcov mode only. These are general-purpose
       (arbitrary) attributes associated not with a particular object or scope
       in the database, but associated with the database itself.
       For user objects (design or instance object(s)), this command allows you
       to set or display attributes associated with the specified object(s) in
       viewcov mode only.
     * Support for the following features was added:
       - hierarchical identifiers
       - array variables declared in a package using scope resolution operators
       - array members of a struct or union or class as array variables in
       foreach statements
       NOTE: The foreach constraint does not yet support these types of array
       variables.
     * Streaming Operators (pack/unpack) {'<<' and '>>'} are now supported.
     * At  a C breakpoint, the Locals window will display automatic local
       variables and their value in the current C/C++ function scope.
     * Added the new coverage CLI command coverage goal, which allows you to
       set or display UCDB-wide coverage goals for coverage types, such as
       assertions, covergroups, coverpoints, cover directives, code coverages,
       SystemC and 0-In. There is also the ability to set individual goals for
       any  coverage  item  with  -path  or  -du, or test plan items with
       -plansection; these new flags do not combine with the coverage type
       flags. Covergroup goal parameters, for example, could be set with this
       last feature.
     * The  Verilog preprocessor supports C-style `__FILE__ and `__LINE__
       macros.
     * Supported .triggered propery for events.
     * When  a  sub-class  does  not  override all virtual methods of the
       super-class, we now print a detailed message indicating the methods that
       are not overridden.
       Examples of error messages:
       ** Error: ../src/Sec11_Classes/Abstract_class/bad_virtual11.sv(7):
       Sub-class 'child' does not override all virtual methods of abstract
       superclass 'base'.
       ** Error: ../src/Sec11_Classes/Abstract_class/bad_virtual11.sv(7):
       Sub-class 'child' does not override virtual method 'get' of abstract
       superclass 'base'.
       ** Error: ../src/Sec11_Classes/Abstract_class/bad_virtual11.sv(7):
       Sub-class 'child' does not override virtual method 'set' of abstract
       superclass 'base'.
     * +notimingchecks will not set the Generic TimingChecksOn to FALSE on all
       level0  and  level1  VHDL  Vital  Models.  Generics  with the name
       TimingChecksOn on non-Vital models are unaffected. Additionally, on
       Vital models the generic TimingChecksOn is not fixed by vopt unless
       explicitly set by the use of -G or +notimingchecks on the vopt command
       line.
     * Increased GateLevel optimization capacity to accept cells with I/O path
       and Timing check conditions greater in number than the previous maximum
       of 32. The new limit is 254. Because of possible effects to state table
       size,    this    value    can   be   restricted   by   using   the
       +num_opt_cell_conds+<num> command line argument to vlog.
     * The new command typespec has been added to query the class names and
       class relationships of SystemVerilog classes:
       Syntax:
        typespec [-isa <value>][-class
       <value>][-exact][-regexp][-ancestry][-ident <value>] <pattern>
       Arguments:
          + -isa <value>
            Returns classes derived from given <value>.
          + -class <value>
            Returns specialized classes of the given <value>.
          + -exact
            Returns results that match <pattern> exactly.
          + -regexp
            Specifies  that  all  <values>  should  be treated as regular
            expressions.
          + -ancestry
            Returns the ancestry for classes matching the criteria.
          + -indent <value>
            Prefixes the results with the given <value>.
          + <pattern>
            The pattern you are querying for.
          + -help
            Prints this message.
     * The simulator is now integrated with SystemC OSCI release 05 June, 2006
       beta release of 2.2. Here is a list of known incompatibilities between
       this release and 2.1.v1:
          + Lambda expressions, and the functions and methods associated with
            them, have been removed to comply with the SystemC standard.
               o The delayed() method has been removed from the signal and port
                 classes that took bool or sc_logic templates. The delayed()
                 method was used to generate lambda expressions and so is
                 obsolete.
               o The watching() function has been removed. The major use of the
                 watching()  function  was to provide reset semantics for
                 SC_CTHREAD instances. This is accomplished in SystemC 2.2.0 by
                 using the reset_signal_is() method of the sc_module class.
               o The  wait_until()  function  has  been removed. Calls to
                 wait_until() can be replaced by a do-while loop. For example,
                 the following wait_until() call:
                     wait_until( valid.delayed() == true );
                 can be replace it with:
                     do { wait(); } while ( !(valid == true) );
          + The check for multiple writers of a signal is off by default. This
            can  be  turned  on by setting the ScEnableScSignalWriteCheck
            modelsim.ini  variable to "1". When turned on if two separate
            processes write to a signal an error will be reported.
          + There are now warning messages for the many of the deprecated
            features in Annex C of the IEEE 1666 SystemC Language Reference
            Manual. These messages are turned off by default. They can be
            turned on by setting the ScShowIeeeDeprecationWarnings modelsim.ini
            variable to "1".
          + The   signature   for  the  find_event()  virutal  method  in
            sc_event_finder has changed. An additional optional sc_interface
            pointer has been added as an argument. So the signature is now:
                virtual sc_event& find_event( sc_interface* p = 0 ) const;
            The additional argument is used to specify the interface to return
            the sc_event instance for when using multi-interface ports.
          + The function for setting the time unit associated with a trace file
            has changed. It now has the signature:
                void set_time_unit( double v, sc_time_unit tu )
            rather than:
                void set_time_unit( int exponent10_seconds )
          + Three methods were removed from sc_simcontext that were previously
            used to register processes:
               o register_cthread_process()
               o register_method_process()
               o register_thread_process()
            These are no longer called, since you cannot create a process
            without calling one of the three new create_XXXX_process methods.
          + The << operators for process handles have been removed from the
            sc_sensitive, sc_sensitive_neg, and sc_sensitive_pos classes:
               o operator << ( sc_cthread_handle )
               o operator << ( sc_module_handle )
               o operator << ( sc_thread_handle )
            These are no longer needed since one can use an sc_process_handle
            instance to set the process.
     * Added   support   for   SystemC/SystemVerilog   types  across  the
       SystemC-SystemVerilog mixed language boundary:
       The following types are supported:
          + SystemC instantiating SystemVerilog: bit, logic, reg, bit vector,
            wire,  integer, integer unsigned, int, shortint, longint, int
            unsigned, shortint unsigned, longint unsigned, byte, byte unsigned,
            packed structures, unpacked structures, packed unions, enum, nested
            structures  (packed and unpacked), nested unions (only packed
            unions), real and shortreal.
          + SystemVerilog Instantiating SystemC: bool, sc_bit, sc_logic, sc_bv,
            sc_lv, short, unsigned short, int, unsigned int, long, unsigned
            long,   long  long,  unsigned  long  long,  sc_int/sc_signed,
            sc_uint/sc_unsigned, sc_bigint, sc_biguint, char, unsigned char,
            struct, union, enum, nested structures, nested unions, float and
            double.
       Please refer to the User's Manual for more details on the type-mapping.
     * scgenmod has been enhanced to take the following SystemVerilog types as
       input:
          + Basic types: bit, logic, reg, bit vector, wire, integer, integer
            unsigned, int, shortint, longint, int unsigned, shortint unsigned,
            longint unsigned, byte and byte unsigned.
          + Complex types: packed structures, unpacked structures, packed
            unions and enum.
     * Designers using VHDL-AMS sometimes want to use the simulator to test
       purely digital parts of their model. This can be difficult because of
       differences in package STANDARD between VHDL-AMS and digital VHDL. In
       particular, the VHDL-AMS standard package contains a declaration of a
       REAL_VECTOR type which is not present in the digital VHDL package. To
       resolve this, the simulator now has a feature to modify package STANDARD
       to be more compatible with the AMS package.
       If the vcom command line contains the option -amsstd or the modelsim.ini
       file contains the setting:
           AmsStandard = 1
       then the declaration of REAL_VECTOR will be added to the simulator's
       STANDARD package.
       This  feature  can be explicitly disabled if the vcom command line
       contains the option -noamsstd or the modelsim.ini file contains the
       setting
           AmsStandard = 0
       If neither -amsstd nor -noamsstd is supplied on the command line and the
       AmsStandard variable is not set in the modelsim.ini file, then the
       compatibility  feature  is  enabled  if  the  environment variable
       MGC_AMS_HOME is set.
     * A project option was added that allows the user to specify if source
       files should be closed when a project is closed. The default is to close
       them.
     * More VHDL200X features are now supported. For details see the following
       file in the install directory:
       modeltech/docs/technotes/vhdl200x.note
     * Hierarchical references from the bound scope using SystemVerilog bind
       into the design scope is now supported.
     * SystemVerilog bind, in the vopt flow, is now fully compatible with the
       IEEE P1800 LRM. In the incremental flow, the 6.2 restriction on actual
       expressions still exists.
       If the target of bind is a VHDL design unit or an instance of a VHDL
       design  unit,  only  the following types of actual expressions are
       supported in the vopt flow:
          + bitwise binary expressions using operators &, |, ~, ^ and ^~.
          + concatenation expression.
          + bit select and part select expressions.
          + any variable/constant visible in the target scope including those
            defined in packages can be used in an actual expression.
     * SystemC sc_main() is now supported as a top-level module. To run a
       SystemC design with sc_main(), simply invoke vsim with sc_main as the
       top-level module. For example:
       vsim -c sc_main
     * The Verilog compiler allows the command line switch -mixedansiports
       which permits partial port redeclarations.
     * Support for SystemC dynamic module array was added. An example of using
       dynamic module array is given below:
       module **mod_inst;
       mod_inst = new module*[2];
       mod_inst[0] = new module("mod_inst[0]");
       mod_inst[1] = new module("mod_inst[1]");
       However there is one limitation on this support. The instances of these
       modules  have  to  be  named exactly same as the corresponding C++
       variables, such as "mod_inst[0]" and "mod_inst[1]" in the case of above
       example.
     * We now support the use of replication assignment patterns for structs,
       as in:
       struct {int X,Y,Z;} XYZ = '{3{1}};
       A limitation we impose is that all elements of the struct must have
       equivalent types.
     * Multiple SystemVerilog libraries support for SystemC DPI was added. At
       sccom link phase, all the SystemVerilog libraries that contain the
       SystemC DPI routine referrences should be provided to sccom via the
       -dpilib switch:
       sccom -link -dpilib <libname> [-dpilib <libname>]
       Refer to Section "SystemC Procedural Interface to SystemVerilog" in the
       User's Manual for a more detailed description.
     * A new vlog switch, -scdpiheader <filename>, is added for SystemC DPI
       users. This switch specifies the name of SystemC DPI function prototype
       header file automatically generated from the current compilation. The
       default filename is sc_dpiheader.h when no such switch is provided.
       Refer to Section "SystemC Procedural Interface to SystemVerilog" in
       User's Manual for a more detailed description.
     * The "local" and "protected" qualifiers on class items are now enforced.
     * Type inheritance is now supported when extending a parameterized class.
     * A warning is now reported when a SystemVerilog mailbox is created with a
       negative size and the mailbox is treated as being of size 0. Previously
       this was silently treated as a size of 0.
     * Verification Management Features
          + Test Plan Import is accessed from the File / Import / Test Plan
            menu or from the right-mouse button pop-up of the Test Browser GUI.
            This can convert test plan XML to a UCDB file for test traceability
            analysis. There are specific formatting requirements for specifying
            coverage  associated with parts of the test plan; consult the
            xml2ucdb documentation.
          + The  Verification  Management  Tracker  GUI  is used for test
            traceability  analysis, per-test coverage analysis, and other
            analysis. This GUI requires invoking vsim -viewcov on a merged file
            containing test plan and test results, with test plan items linked
            to coverage. This merged file must be loaded with vsim -viewcov.
            The linking of test plan items to coverage can occur automatically
            during  merge  if the test plan UCDB is generated by xml2ucdb
            (invoked by the Test Plan Import facility.) This linking can also
            be done manually with the coverage tag command.
          + The Test-Associated Merge is the default merge algorithm. This
            merge algorithm associates coverage items with the test(s) that
            covered them. This allows more sophisticated analysis of results
            per-test with the coverage analyze command. The previous merge
            algorithm is available with vcover merge -totals.
          + Test  Ranking:  rank most effective tests by using the vcover
            ranktest command with various parameters and UCDB files as input.
            Creates an output file that can be loaded into the Test Management
            Browser. If a UCDB file is loaded into memory with vsim -viewcov,
            the ranking algorithm can be applied to parts of a test plan as
            well as parts of the design or its coverage.
          + Verification Management Browser: accessed with View / Verification
            Management / Browser from the ModelSim/Questa GUI. This can display
            summary information for merged test results in a UCDB, ranking
            files, and original test results in UCDBs. It has a feature for
            user-customizable column headings. Facilities are available for
            re-running tests or general verification set-up, generating code
            coverage  and  test  plan HTML reports (see documentation for
            ucdb2html), and executing merges and test ranking.
          + coverage  tag  is  a  vsim  -viewcov  mode command for making
            associations between coverage items and test plan sections.
          + coverage analyze is a vsim -viewcov mode command used to make
            coverage queries in context of test plans or the design hierarchy.
            It offers the following queries:
               o Report total coverage in a test plan or design hierarchy.
               o Report a summary per coverage category in a test plan or
                 design hierarchy.
               o With the test-associated merge, report coverage for specified
                 tests only.
               o With the test-associated merge, report which test offered
                 most, least, zero, or non-zero coverage for any part of the
                 test plan or design hierarchy.
               o With the test-associated merge, report which tests had the
                 most, least, zero, or non-zero sample counts for covergroups
                 (an optional feature enabled with a modelsim.ini setting).
               o Filter the total coverage report based on a variety of factors
                 either anded or ored together: coverage, weight, tag name,
                 user-defined attribute value, and unlinked status.
          + coverage unlinked is a vsim -viewcov mode command for reporting
            test plan sections unassociated with coverage, or design/coverage
            objects unassociated with test plan sections.
     * SV-VHDL Mixed Language support
       The following types are supported across the VHDL-SV mixed language
       boundary:
          + VHDL instantiating SV module with ports of type: reg, logic, bit,
            arrays  of reg, arrays of logic, arrays of bit, integer, int,
            shortint, longint, byte, integer unsigned, int unsigned, shortint
            unsigned, longint unsigned, byte unsigned
          + SV instantiating VHDL entity with ports of type: integer, natural,
            positive, std_logic, bit, std_logic_vector, bit_vector, signed,
            unsigned (Synopsys and IEEE)
       Please refer to the documentation for more information.
     * Support is added for vlog/vopt options +initreg+0|1|X|Z (to initialize
       registers)  and +initmem+0|1|X|Z (to initialize memory). The value
       0|1|X|Z specifies that all the bits in this register or memory are to be
       0 or 1 or X or Z.
       The  user  can specify +initreg+<seed> +initmem+<seed> to vsim. By
       specifying this option, the user can have random register and/or memory
       initialization using the seed. Note that this random initialization is
       performed only on the registers and/or memory specified during the
       compilation using +initreg/+initmem options.
       We do not initialize notifier registers. We can initialize sequential
       UDPs. Refer to the documentation for more details.
     * For implementing VHDL200X features, a new package named ENV has been
       added to library STD. This package is also available for general use
       with any VHDL language version. The package contains subprograms "stop"
       and "finish", which are similar to corresponding Verilog system tasks.
       It  also  contains a function "resolution_limit" which returns the
       simulator  resolution  limit.  For  more  details look in the file
       modeltech/vhdl_src/std/env.vhd.
     * Transaction recording is supported in Verilog and SystemVerilog using
       the following System Tasks and Functions:
       $create_transaction_stream()
       $begin_transaction()
       $end_transaction()
       $free_transaction()
       $add_attribute()
       $add_relation()
     * Examples of how to record transactions have been added in the following
       directories:
       modeltech/examples/systemc/transactions/
       modeltech/examples/systemverilog/transactions/
       modeltech/examples/verilog/transactions/
     * Support for many of the SystemVerilog data types has been added to the
       VPI. This has been a major overhaul of the VPI for P1800 and 1364-2005
       support, an on-going effort that is not yet complete.
       VPI application developers should note that there are a few cases where
       the new VPI object model is incompatible with the Verilog-2001 model.
       This  is  not  caused by ModelSim/QuestaSim but is inherent in the
       specifications.
       In this release, the object model support default will be the 2005
       behavior. This means that QuestaSim will conform to the superset of
       SystemVerilog  and  Verilog-2005,  and  ModelSim  will  conform to
       Verilog-2005. Users can override this default with either a command line
       switch -plicompatdefault or a modelsim.ini variable "PliCompatDefault".
       Set either of these to 2001 to revert the object model behavior. Note
       that when QuestaSim is conforming to the 2001 model, System Verilog
       objects will not be accessible through the VPI. Users are encouraged to
       migrate their applications to be compatible with the 2005 model.
       More  detailed  information about which VPI features are currently
       suppported is available in the documentation technotes section.
     * The simulator now supports native debug for the Algorithmic-C data types
       ac_int and ac_fixed. The Algorithmic C data types are used in Catapult C
       Synthesis, a tool that generates optimized RTL from algorithms written
       as sequential ANSI-standard C/C++ specifications. These data types are
       synthesizable and runs faster than their SystemC counterparts sc_bigint,
       sc_biguint, sc_fixed and sc_ufixed.
       To use these data types in the simulator, the datatype package must be
       downloaded and the path containing the AC header files must be specified
       with the -I option on the sccom command line. To enable native debug
       support for these datatypes, the option -DSC_INCLUDE_MTI_AC must be
       specified on the sccom command line. Native debug is only supported for
       Version 1.2 and above. If -DSC_INCLUDE_MTI_AC is not specified the GUI
       will display the C++ layout of the datatype classes.
     * Automatic code coverage exclusions are supported. This feature is ON by
       default,   and  can  be  controlled  either  by  the  vsim  option
       -autoexclusions, or by the modelsim.ini variable, "AutoExclusions".
       Command line:
           -autoexclusions=<mode>
       modelsim.ini setting:
           AutoExclusions=<mode>
       where mode is fsm or none (default is fsm).
       When an fsm state is excluded, all transitions, to and from this state,
       are also automatically excluded.
     * A new tool specific system task, $messagelog(), has been added. This
       task will allow the user to control certain message attributes from
       their native Verilog code. This level of control was not possible in
       previous versions. The message will be seen in the transcript and/or the
       Message Viewer, based on the msgmode setting. Please refer to the User's
       Manual for more details.
     * Display system task messages can now be seen in the Message Viewer. By
       default, these messages are only sent to the transcript. A new command
       line option and modelsim.ini setting were added to control whether the
       messages are sent to the transcript, Message Viewer (.wlf file), or
       both.
       Command line:
           -displaymsgmode <mode>
       modelsim.ini setting:
           displaymsgmode <mode>
       where mode is tran, wlf, or both (default is tran).
       The display system tasks that are affected by this are:
           $display[bho]
           $strobe[bho]
           $monitor[bho]
           $write[bho]
       Also included are the analogous file I/O tasks that write to STDOUT
       (i.e. $fwrite or $fdisplay).
     * A new breakpoint column has been added to the Source window.
     * The  '$'  primary in open ranges is now supported. Open range like
       "[10:$]" and "[$:25]" can now be used in the simulator. Examples of use
       are:
     // Example 1
     covergroup cvg;
        coverpoint int_val {
           bins b = {-5, [1:$]};
        }
     endgroup

      // Example 2
      initial begin
          if ( int_val inside { [3:$], -10 } )
             $display("True");
      end
     * User definable radicies: A user definable radix is used to map bit
       patterns to a set of enumeration labels. After defining a new radix, the
       radix will be available for use in the Wave and List windows or with the
       examine command.
       There are four new sub commands to the radix command used to manage user
       defined radicies:
          + radix define name { definition body }
          + radix names
          + radix list ?name?
          + radix delete name
       The define command is used to create or modify a radix. The definition
       body  consists  of  a list of number pattern, label pairs. See the
       Reference Manual for more details.
       The names command will return a list of currently defined radix names.
       The list command will return the complete definition of a radix, if a
       name  is  given. If no name is given, it will list all the defined
       radicies.
       The delete command will remove the radix definition.
       The examine command also has a new -radix option for specifying a user
       defined  radix. The -radix switch can also be used in place of the
       current radix options, for example -radix hexidecimal is the same as
       -hex.
     * The vsim -wlfnolock switch has been added to disable WLF file locking.
       This will prevent vsim from checking whether a WLF file is locked prior
       to opening it, as well as prevent vsim from attempting to lock a WLF
       once it has been opened.
     * Examples of how to record relations for transactions have been added in
       the following directories:
       modeltech/examples/systemverilog/transactions/relations/
       modeltech/examples/verilog/transactions/relations/
     * All  exisiting  SignalSpy  Verilog system tasks and SignalSpy VHDL
       procedures  now  support  SystemC  signals  as their source and/or
       destination objects.
       The following new functions have been added to allow users to make
       SignalSpy calls from constructors of SC_MODULE, processes of SC_MODULE
       and 'simulation & elaboration callbacks':
          + init_signal_spy()
          + disable_signal_spy()
          + enable_signal_spy()
          + signal_force()
          + signal_release()
          + init_signal_driver()
       Known Limitations:  Destination SystemC signals are not supported with
       init_signal_driver.
     * There is a command coverage weight that sets global weights per coverage
       type. These are principally useful during test traceability analysis
       when an entire design unit or module instance is associated with a test
       plan item; in that case, the coverage contributed by the design unit or
       module  instance is the weighted average of the different types of
       coverage found underneath it. Additionally, there are -plan, -path, and
       -du options to coverage weight that can set the weights for individual
       coverage items, design instances, design units, or test plan items. This
       last feature could be used, for example, to set the weights within a
       covergroup.
     * A new message indicator has been added to the top of the Wave window. A
       colored indicator will appear at the time of the message. Users can use
       Tab  keys  and shift Tab keys to move forward and backward between
       messages. Double clicking on the message indicator will highlight the
       corresponding message in the Message Viewer tab if it's not displayed in
       hierarchy mode. The colors for the indicator are:
          + Red for error and assertion failures.
          + Yellow for warnings.
          + Green for notes.
          + Otherwise light gray is used.
     * Added support for SystemVerilog types in SystemC control/observe.
       The following SystemVerilog types are supported:
       bit, logic, reg, bit vector, wire, integer, integer unsigned, int,
       shortint, longint, int unsigned, shortint unsigned, longint unsigned,
       byte, byte unsigned, packed structures, unpacked structures, packed
       unions, enum, nested structures (packed and unpacked), nested unions
       (only packed unions), real and shorteal.
       Please  refer  to  the  User's  Manual for more details on SystemC
       control/observe.
     * A new compiler option -nodbgsym has been added to vcom and vlog to stop
       generating symbols debugging database in the library.
     * Added   the  support  for  SystemC  DPI  debug  feature  including
       single-stepping across SC-SV call boundaries. To use this feature,
       Cdebug "auto step" needs to be enabled.
       Known limitations:
       By  default,  the SV breakpoints inside an export function are not
       supported if the export function call is initiated from a SC_METHOD
       process. To enable the full support, one needs to use a new vsim switch,
       -scdpidebug. For example:
       vsim -scdpidebug -do vsim.do top
       Known issues:
       Single-stepping into DPI-SC import function occasionally doesn't work if
       the SystemC source files are compiled with gcc-3.2.3 on linux platform.
       This is due to a gcc/gdb interaction issue. It is recommended that one
       use  gcc-4.0.2 (the default gcc compiler for linux platform in 6.3
       release) to compile the SystemC source code.
     * The new "Help" toolbar will search the installed documentation for the
       key word(s) entered. If the help search button is pressed with the entry
       box  empty,  it  will  open  the  InfoHub. Note: this requires the
       documentation be installed and a valid HTML browser to be configured and
       available.
     * Added a feature to code coverage to turn off code coverage within vlog
       modules declared as `celldefine/`endcelldefine, and modules included
       using -v and -y. This will be disabled using old modelsim.ini files, for
       backwards compatibility but enabled using new 6.3 modelsim.ini files. To
       disable it, set the CoverCells variable in the modelsim.ini file to 1.
       To override this feature for individual Verilog source files, there is a
       vlog -covercells option. There is also a vopt -covercells option. And if
       CoverCells in the modelsim.ini file is set to 1, and you want to turn it
       off for individual files, there is a vlog -nocovercells option. There is
       also a vopt -nocovercells option.
     * Added support for Verilog configurations in SystemC-HDL mixed language.
     * The option -fsmnoresettrans was added to vcom, vlog and vopt. This
       option is off by default. Use of this option disables recognition of
       implicit asynchronous reset transitions.
     * Proposed IEEE fixed and floating point packages are available in a
       library named floatfixlib. These packages are compatible with language
       version  VHDL-2002  and  with  earlier language versions. For more
       information see tech note VHDL_fixedfloat.
     * Member variables of SystemC modules which are defined as arrays of the
       following types are detected as memories and supported in memtool:
          + sc_bigint
          + sc_biguint
          + sc_int
          + sc_uint
          + sc_signed
          + sc_unsigned
     * SystemC hierarchical channels are now displayed as "ScHierChannel"
       instead of "ScModule" in the Workspace window and its supported commands
       such as describe and show.
     * The vcd commands are now supported for SystemC signals sc_signal<T>,
       sc_signal_resolved, sc_signal_rv<N> and signal ports sc_in<T>, sc_out<T>
       and sc_inout<T>, sc_in_resolved, sc_out_resolved, sc_inout_resolved,
       sc_in_rv<N>, sc_out_rv<N>, sc_inout_rv<N>.
       <T> can be any of the following types:
          + unsigned char
          + unsigned short
          + unsigned int
          + unsigned long
          + unsigned long long
          + char
          + short
          + int
          + float
          + double
          + enum
          + enum
          + sc_int
          + sc_int
          + sc_uint
          + sc_bigint
          + sc_biguint
          + sc_signed
          + sc_unsigned
          + sc_logic
          + sc_bit
          + sc_bv
          + sc_lv
       Unsupported types are the SystemC fixed point types, class, structures
       and unions.
     * The  SystemVerilog  transaction  recording  interface  system task
       $end_transaction() now takes an optional third parameter, free, of type
       integer. If this parameter is non-zero, the memory allotted for this
       transaction will be freed. This is for convenience, and is equivalent to
       a separate call to $free_transaction() for this transaction. This new
       parameter can be used when no more attributes will be recorded and no
       relations will be made for this transaction. The default value is zero
       and does not free memory.
     * We now support "Unique" and "Priority" as described in Section 10.4 of
       the IEEE P1800 LRM.
     * A new key word LibrarySearchPath has been added to the modelsim.ini
       file, in the [vlog] section. It is a space separated list of entries
       that  describe  were  to  find  a resource library that contains a
       precompiled package. This is identical behavior with the -L switch to
       vlog.
       The syntax is:
       LibrarySearchPath = <path/libname> [<path/libname> ...]
     * In the modelsim.ini file, SparseMemThreshold is set to 1048576. So
       memories  as  deep  as  or  deeper  than  1M, are marked as sparse
       automatically.
       A new vlog and vopt option called +nosparse is added. This option works
       identically to +acc in terms of addressing design units, scopes or
       design objects (vars, mem).
       Priority of sparseness:
          + +nosparse[+] - These memories are marked as "not sparse".
          + metacomment /* sparse */ or attribute (* mti_sparse *) - These
            memories are marked "sparse" or "not sparse" depending on the
            attribute value.
          + SparseMemThreshold in modelsim.ini file - Memories as deep as or
            deeper than this threshold are marked as sparse.
       As usual, vlog options override the vopt options.
     * The -sv_seed option for vsim now supports selection of a random seed.
       This is specified by -sv_seed random.
     * The learn flow is extended to support SignalSpy accesses and the force
       command. Users should note that the learn mode learns the path name with
       the path separators in effect at the time of the learn. The same path
       separators should be used when the learn file is consumed.
     * Starting  in  6.3  it  is  now possible to connect VHDL records to
       SystemVerilog structures on port boundaries. This is done by generating
       matching VHDL types from the SystemVerilog definitions.
          + Structures across the SystemVerilog VHDL mixed boundry can contain
            elements of type: reg, logic, bit, arrays of reg, arrays of logic
            and arrays of bit.
          + Records across the SystemVerilog VHDL mixed boundry can contain
            elements of type: std_logic, bit, std_logic_vector, bit_vector,
            signed and unsigned (Synopsys and IEEE).
       For specifics consult the User's Manual on mixed language simulation.
     * Added the -noautoldlibpath option to vsim so that the LD_LIBRARY_PATH is
       not set internally.


