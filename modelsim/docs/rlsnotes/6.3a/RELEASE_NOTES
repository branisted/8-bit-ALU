
                   Release Notes For ModelSim Altera 6.3a


                                Jun 25 2007

               Copyright 1991-2007 Mentor Graphics Corporation
                            All rights reserved.
  This document contains information that is proprietary to Mentor Graphics
   Corporation. The original recipient of this document may duplicate this
  document in whole or in part for internal business purposes only, provided
  that this entire notice appears in all copies. In duplicating any part of
    this document the recipient agrees to make every reasonable effort to
      prevent the unauthorized use and distribution of the proprietary
                                information.

   TRADEMARKS: The trademarks, logos and service marks ("Marks") used herein
    are the property of Mentor Graphics Corporation or other third parties.
   No one is permitted to use these Marks without the prior written consent
    of Mentor Graphics or the respective third-party owner. The use herein
   of a third-party Mark is not an attempt to indicate Mentor Graphics as a
     source of a product, but is intended to indicate a product from, or
  associated with, a particular third party. The following are trademarks of
   of Mentor Graphics Corporation: Questa, ModelSim, JobSpy, and Signal Spy.
        A current list of Mentor Graphics trademarks may be viewed at
               www.mentor.com/terms_conditions/trademarks.cfm.

   End-User License Agreement: You can print a copy of the End-User License
         Agreement from: www.mentor.com/terms_conditions/enduser.cfm.
   ______________________________________________________________________

     Product Installation and Licensing Information
   For  brief  instructions  about  product installation please visit the
   "install_notes" file in www.model.com. The install_notes file can be viewed
   at:
   [1]http://www.model.com/products/release.asp
   For detailed information about product installation and licensing see the
   ModelSim Start Here Guide. The manual can be downloaded from:
   [2]http://www.model.com/support/documentation.asp


     Release Notes Archives
   For release notes of previous versions visit the release notes archive at:
   [3]http://www.model.com/support/default.asp
   or  find  them  in  the installed modeltech tree in <path to modeltech
   installation>/docs/rlsnotes


     How to get Support

   ModelSim Altera is supported by Altera Corporation
     * World-Wide-Web Support
       [4]http://www.altera.com/mySupport


   ______________________________________________________________________

  Index to Release Notes

     [5]Key Information

     [6]User Interface Defects Repaired in 6.3a

     [7]Verilog Defects Repaired in 6.3a

     [8]PLI Defects Repaired in 6.3a

     [9]VHDL Defects Repaired in 6.3a

     [10]FLI Defects Repaired in 6.3a

     [11]VITAL Defects Repaired in 6.3a

     [12]SystemC Defects Repaired in 6.3a

     [13]Assertion Defects Repaired in 6.3a

     [14]Mixed Language Defects Repaired in 6.3a

     [15]Coverage Defects Repaired in 6.3a

     [16]General Defects Repaired in 6.3a

     [17]Mentor Graphics DRs Repaired in 6.3a

     [18]Known Defects in 6.3a

     [19]Product Changes to 6.3a

     [20]New Features Added to 6.3a
   ______________________________________________________________________

   Key Information
     * The following lists the supported platforms:
          + win32aloem - Windows 2000, XP
          + sunos5aloem - Solaris 8, 9, 10
          + linuxaloem - RedHat 7.2 and higher.
   ______________________________________________________________________

   User Interface Defects Repaired in 6.3a
     * The data in the Verification Management Browser pane was corrupt after
       loading the UCDB file which contained User Attributes.
     * The top node of the tracker pane of the Verification Management window
       contained incorrect information when filtered with testname(s).
     * Class inheritance relationships could be incorrectly recorded in the GUI
       causing  infinite loops when using "typespec -ancestry" or similar
       queries to inspect the inheritance structure.
     * Inserting Wave window dividers caused a crash in some cases if it's name
       contained non-alpha-numeric characters such as '#', ';', etc.
     * In vopt mode, vsim failed to find the top level design when the design
       name is an escaped or extended identifier, and if the name is specified
       using the other escaped or extended identifier rule in the command line.
     * Unable to add list or add wave an object when the path contained an
       array instance.
     * Fixed a memory leak with "coverage analyze" that could have caused
       memory to run out on large queries on large designs; also fixed a freed
       memory  write  associated  with  the merge of (optionally enabled)
       covergroup sample count enhancements.
     * An event at time 0 on a Verilog named event did not displayed in the
       Wave window.
     * The  Wave window did not draw some System Verilog registers in the
       correct color if all bits were 'z' (blue) or all bits were 'x' (red).
     * A  crash occurred in certain cases when the Source window tried to
       display signal values by either source annotation or hovering over
       signals with the mouse. This occurred when the source had dependencies
       on either `included files or objects declared in the global (vunit)
       scope.
     * Source Annotation and Textual Dataflow features did not work in post-sim
       mode.
     * Embedded space in TR relation names was not handled properly in the GUI.
       This has been corrected for relationships only and works with both the
       SCV API and the Verilog API. The simulator will still generate a warning
       if it sees whitespace in stream names, attribute names or transaction
       names.
     * Virtual signal concatenations resulting in a record type no longer
       display field names as redundant name such as .fieldname=fieldname.
     * Wave dividers imbedded in a wave group were not correctly restored from
       a wave format file (wave.do) or following a restart.
     * Wave window printing was missing all text.
   ______________________________________________________________________

   Verilog Defects Repaired in 6.3a
     * The wrong file name was reported for some error messages about default
       values in formal task/function arguments lists.
     * Partially optimized designs (i.e. "black-boxes") did not properly pass
       parameter information between the instantiation point of the black-box
       and the black-box itself. Parameters are now passed, and are checked for
       consistency as well.
     * Procedural blocking assignment statements with complex expressions and
       an intra-assignment timing control sometimes assigned a value from the
       wrong design instance.
     * Re-declaration of 1-dimensional unpacked array port incorrectly reported
       error.
     * When bit stream casting involved an array of array of struct, vsim gave
       incorrect output.
     * In cases involving elaboration time types (such as type parameters or
       references to interface elements), array system functions such as $left
       incorrectly generated the following error at compile time:
           Illegal array identifier in array querying function.
     * When using brackets across a time literal ( e.g. #(1s) ), simulation was
       incorrectly progressing by 0 time units.
     * Using a "bind" statement in a generate loop where the bind target was an
       instance with an index in the hierarchical path failed. This is now
       supported for index expressions that are literals or, in the vopt flow,
       expressions involving other constants such as genvars or parameters.
     * When  a  part-select  into a memory element was out-of-bounds, the
       simulator returned 0's instead of X's for the out-of-range spots.
     * Always_comb sensitivity to a slice of an element of a packed struct was
       not being correctly set.
     * A vopt crash occurred when setuphold/recrem timing checks have argument
       conditions and event conditions.
     * Path name specifiers in libmap files can now be optionally quoted. Even
       though the standard does not specify quotation marks, this is a common
       practice.
     * Wildcard meta characters '*', '?', and "..." within pathname specifiers
       in libmap files are now supported.
     * If a VHDL (or other non-Verilog design unit) instantiated more than one
       child  instance  that  made  use  of  complex  parameterized class
       relationships,  memory  assertions could incorrectly result during
       elaboration.
     * Using named event declarations in multiple child instances where only
       some  of  the children were inlined could result in elaboration or
       simulation memory corruption and subsequent failures.
     * Starting in release 6.2h, VHDL design units that reference Verilog
       design units began to report an out-of-date error when inconsequential
       changes were made to the Verilog module. The previous behavior has been
       restored so this error should only occur if changes in the Verilog model
       could have some impact on the VHDL code.
     * vlog and vopt generated internal errors if a parameter override in a
       bind instance was a type expression (e.g. "logic").
     * Fatal elaboration error vsim-3614 could incorrectly occur in designs
       when vopt was used and inlining occurred for modules containing certain
       forms of generate loops.
     * Invalid vsim-3700 elaboration errors could occur when accessing an array
       member of a struct by way of a virtual interface.
     * vsim invoked with the options -novopt -v2k_int_delays caused vsim to
       hang in certain cases.
     * The use of ".*" with instance-arrays had several problems.
     * A blocking assignment having an intra-assignment timing control was
       optimized away in some cases, resulting in the incorrect side effect of
       losing the delay in the block of sequential statements.
     * The  sensitivity  extracted  for always_comb failed to account for
       variables  read  within  code  determined  to  be  unreachable (by
       optimizations) within a called function.
     * Always_comb sensitivity was not being set correctly when a referenced
       variable was indexed by a genvar. For example:
       genvar GVAR;
       generate
       for (GVAR=0; GVAR <= 1; GVAR++) begin : genblk
           always_comb o_always[GVAR] = gate & (a_var[GVAR][0]|b_var[GVAR]);
       end
       endgenerate
     * There were two problems with annotating DEVICE statements with compiled
       SDF.
     * Aggregate  Literals were not being allowed when used in comparison
       operations. For example (s == '{1,1}) where "s" is a structure variable.
     * A constraint specifying an equality constraint (==,!=) between cyclic
       random variables in certain cases caused a fatal internal error within
       the constraint solver.
     * Errors were not being reported for illegal method overrides involving
       static and virtual conflicts and invalid changes of lifetime.
     * In scenarios typically involving calls from parameterized classes,
       checking was not being performed for illegal task and function enables
       with, for example, too many parameters or too few parameters. Such
       illegal  calls  would  then  cause fatal errors during simulation.
       Elaboration time errors are now generated for such cases.
     * When a string comparison or other operation combined a string literal
       and a reference to a System Verilog string member inherited from a
       parameterized class or type parameter, a simulation time fatal error
       could result.
     * In some cases involving complex System Verilog class relationships, vlog
       and vopt design analysis became very slow.
     * A hierarchical reference to an UDP port caused vopt to crash.
     * When analyzing a System Verilog compilation unit containing declarations
       in $unit and at least one package, certain errors would be reported more
       than once, with earlier errors having misleading or missing file names.
   ______________________________________________________________________

   PLI Defects Repaired in 6.3a
     * A crash occurred if a value-change callback completed on an object for
       which the VPI handle had previously been freed.
     * There  was  a  problem  with  the indexing of objects obtained via
       vpi_handle_by_name for multiple packed dimension regs.
     * The return value of vpi_get_value() when accessing an array element with
       an invalid index has been reverted to the pre-6.3 behavior. The pointer
       elements of the value union before 6.3, and in 6.3a, are NULL when any
       index is invalid. In 6.3, the value returned pointed to the default
       value for the element. The LRM is unclear on what is expected; users are
       recommended not to rely on either behavior, and to determine index
       validity via other methods.
     * VPI was not correctly processing arrays of packed structures where the
       arrays had both packed and unpacked dimensions. The symptoms included
       both bad values returned, and crashes when attempting to get value for
       sub-elements of these constructs.
   ______________________________________________________________________

   VHDL Defects Repaired in 6.3a
     * If a shared library or dll could not be loaded during elaboration,
       previous releases generated an error message but not abort the design
       elaboration. In 6.3a, the default behavior is to still not abort the
       design elaboration but it issues a warning instead of an error. If the
       user desires to abort elaboration they can raise the warning to an error
       by adding -error 3160 to the vsim command line.
     * When a package was compiled with the default optimization level (absent
       -On option), and a design unit that depends on the package was compiled
       with -O0 or with coverage (which forces -O0), bad code for the design
       unit resulted in a simulator crash in some cases.
     * A process with an if_statement whose condition contains a selected
       signal  name  expression  in  certain  cases caused a crash during
       elaboration. The name reported of the failing process would contain
       #MERGED#.
     * The following invalid slice error:
       ** Fatal: (vsim-3607) Slice range direction (to) does not match slice
       prefix direction (downto).
       # Time: 0 ns Iteration: 0 Instance: /testcase File: testcase.vhdl Line:
       29
       Occurred in certain cases if a formal of a port map is associated by
       subelement to a sequence of actual expressions that index the same
       object as shown in the following code:
       PORT MAP ( F(0)=>A(0), F(1)=>A(1), F(2)=>A(3) )
     * On  rare occasions, a clock-suppressed optimized process failed to
       evaluate producing incorrect simulation results.
     * A warning message (number 135) is issued when a based-literal (binary,
       octal or hex) cannot represent a positive number but can represent a
       negative value. This message can be suppressed to duplicate previous
       behavior, or it can be elevated to error status to more closely follow
       the strict semantics of the VHDL LRM.
     * An expanded name (either in a USE clause or as the subytpe indication of
       an object declaration), where the prefix is a package name and the
       suffix is the type mark of a composite type having an element of a
       composite type, would not facilitate use of that element type for the
       purpose of determining the type of string literals and aggregates. For
       example, the assignment to an element of the myarray type variable in
       the following would not compile because the element type (elem) was
       erroneously not made available for said purpose. This has been fixed so
       that the following will compile correctly.
   package pkg is
      type elem is array(1 to 2) of integer;
      type myarray is array(1 to 2) of elem;
   end package;
   entity e is end;
   architecture a of e is
   begin
      process is
         variable var : work.pkg.myarray;
      begin
         var(2) := (2=>45,1=>76);
         wait;
      end process;
   end architecture;
     * In certain cases the simulator failed with the message:
       # ** Fatal: (vsim-3964) grab_scalar: unexpected size.
       # Time: 0 ps Iteration: 0 Process:
       /testbench/DUT/abc/wiredelay/line__1104 File: /u/somefile.vhd
       The problem was caused by using the `last_value attribute on a vector
       signal.
   ______________________________________________________________________

   FLI Defects Repaired in 6.3a
   ______________________________________________________________________

   VITAL Defects Repaired in 6.3a
   ______________________________________________________________________

   SystemC Defects Repaired in 6.3a
     * There was a sccom link issue with merging debug databases when one
       library had an sc_fifo and another had an sc_fifo port (sc_fifo_in or
       sc_fifo_out).
     * FLI  value  change  callbacks now work properly for SystemC signal
       aggregates.
   ______________________________________________________________________

   Assertion Defects Repaired in 6.3a
     * The describe command output format changed for assertion and cover
       directives to display child signal names.
   ______________________________________________________________________

   Mixed Language Defects Repaired in 6.3a
     * Signal  Spy  failed  to  handle a 1-bit wide Verilog vector as the
       src_object,  resulting in incorrect updates of the dest_object and
       possibly acc_set_value() errors.
     * Instantiation of a VHDL design unit from Verilog in an optimized design
       resulted in a crash during elaboration in some cases if the VHDL design
       unit name is an extended identifier beginning with "\.".
     * Mixed language instantiations of partially optimized designs did not
       work in all cases (e.g. Verilog, instantiating a black-box with a VHDL
       root).
     * An attempt to capture extended VCD for a VHDL design unit having an
       inout port connected to a hierarchically referenced Verilog net resulted
       in a vsim-VCD-3202 error if the hierarchical reference was to a net not
       in the parent hierarchy of the instantiation.
     * When the stop or finish procedures are called from VHDL in a mixed
       VHDL/Verilog design under some circumstances spurious characters were
       printed.
     * All files within libraries were created with permissions 666 (read/write
       access for user/group/other), ignoring the current umask setting.
     * vopt generated an error if the target of bind is VHDL and the port map
       of bind has the .named style of port mapping.
     * vsim or vopt generated internal errors in certain cases where the target
       of System Verilog bind is VHDL, the actual of bind has a non-variable
       expressions and the port mapping is by named association.
   ______________________________________________________________________

   Coverage Defects Repaired in 6.3a
     * When vsim refreshed a file at load time, the modelsim.ini file variable
       "CoverOpt" did not get properly applied.
     * When vopt inlined a Verilog module, and that module had more than one
       instance, the coverage numbers became corrupt for those instances.
     * Made coverage options more symmetrical by adding vcom -nocoverNosub and
       vcom/vlog/vopt -nocoverExcludeDefault.
     * There  was a vlog compile bug for expression coverage if a ternary
       expression contains an exclusive-OR operator in one of the operands.
     * There  was  a issue in vopt with coverage on, in the mode in which
       coverage is automatically turned off for -v or -y included modules.
       Coverage could also accidentally get turned off for other modules that
       should have coverage on.
     * The coverage clear command has been implemented for viewcov mode. The
       command arguments are the same as in vsim mode.
     * The first input file is ignored in vcover merge if the -out option is
       specified after the input files in command line.
     * Added  a  limit to the count for a toggle node. This will increase
       simulation  performance with toggle coverage on and still give you
       information about what nodes did not toggle at all. After the limit is
       reached,  further  activity on the node will be ignored for toggle
       coverage. All possible transition edges must reach this count for the
       limit to take effect. For example, if you are collecting toggle data on
       0->1 and 1->0 transitions, both transition counts must reach the limit.
       If you are collecting "full" data on 6 edge transitions, all 6 must
       reach the limit. The count limit is controlled by the modelsim.ini
       variable ToggleCountLimit , which defaults to 1. A value of 0 will be
       treated as "unlimited". If you want different limits on different design
       units, vcom and vlog have a -togglecountlimit option. Also, vsim has a
       -togglecountlimit option as well, if you want to override the ini file
       variable everywhere, like for a batch run.
     * Verilog integer types are no longer added to toggle coverage by default,
       except for System Verilog enumeration types. They consume a great deal
       of time in the simulation, accumulating counts for each of the 32-bits
       separately,  as for a Verilog reg. If you want toggle coverage for
       Verilog integer types, set the modelsim.ini variable ToggleVlogIntegers
       to 1, or use vsim -togglevlogints. If the ini file has it turned on and
       you want to turn it off in vsim, use vsim -togglenovlogints.
     * A  limit  has been placed on the maximum width of signals that are
       automatically added to toggle coverage. This is to try to filter out
       memories from toggle coverage. The limit applies to Verilog registers
       and VHDL arrays. If the register or array is larger than the limit, it
       is not added to toggle coverage automatically with -cover t. The width
       limit is controlled by the modelsim.ini variable ToggleWidthLimit and
       defaults to 128. A value of 0 is taken as "unlimited". Also, vcom, vlog
       and vsim have -togglewidthlimit options to allow you to control it on a
       design unit basis.
     * The  -cover sbceft option now checks for illegal characters in the
       argument field.
     * In order to be consistent with the new toggle count limit and toggle
       width  limit,  the  toggle  add command has been enhanced to allow
       -countlimit and -widthlimit args to override the global settings in
       effect.
     * The optimization levels with code coverage on have been increased. The
       CoverOpt variable in the modelsim.ini file now defaults to 3. This means
       that Verilog continuous assignment optimizations will be included, which
       will  enable  constant  propagation to work as expected. Also VHDL
       subprogram inlining will be enabled. This should give a measurable
       performance increase for most designs.
     * 2-dimensional VHDL arrays are now filtered out from toggle coverage.
       This is to prevent toggle coverage on memories. There is currently no
       mechanism to override this.
     * There were several defects in XML Import utility (xml2ucdb):
          + Weight  and goal fields now take on default values when field
            contains only an empty string.
          + Core dump on sunos5 platform when section or title fields were left
            blank.
          + Bug with unlabelled data items in GamePlan input files.
     * Buffer overflow resulted in strange characters appearing in test record
       field on top-level summary page.
   ______________________________________________________________________

   General Defects Repaired in 6.3a
     * vopt gave wrong results or crashed in some cases when an entity in the
       work library instantiates an entity in a second library, and the second
       entity instantiates an entity or module back in the work library.
     * In some cases parameters or generics that were specified with override
       values  via  the  -G option in vopt or vsim caused invalid warning
       messages. For example:
       # ** Warning: (vsim-3351) Invalid value 'test' for generic 'gen1'. Not
       using this value.
       # Time: 0 ns Iteration: 0 Region: /flipflop1/u1 File: ./src/flipflop.vhd
       These messages no longer occur.
     * The -G/-g switches to vopt will now always set the generic or paramter
       specified. It is no longer required to specify the -G/-g switches on
       both vopt and vsim to get the desired behavior. Designs that currently
       specify different -G/-g switches on vsim than vopt may now generate
       warning stating that the vsim -G/-g switches are being ignored.
     * There was a problem with transaction streams. If a stream was created at
       time C and then used to record a transaction that spanned C, that is
       from time C-m to time C+n, that transaction would appear to end at time
       C rather than at time C+n. There is a side affect of this fix that is
       visible in the Wave window. If a stream's first transaction starts AFTER
       the creation time, the Wave window would show an inactive line from the
       creation time to the start time. This line is no longer drawn.
     * Wave data can be displayed incorrectly when the view is zoomed out if
       signals do not change values for long periods.
   ______________________________________________________________________

   Mentor Graphics DRs Repaired in 6.3a
     * dts0100412556 - vsim errors when attempting to add an array of instances
       to the Wave window.
     * dts0100410867 - Index out of range error not being identified.
     * dts0100412166 - # ** Fatal: Unexpected signal: 11. with vopt.
     * dts0100403938 - $cast to similar parameterized classes specialization
       fails.
     * dts0100412443 - vopt and vsim binding is not the same.
     * dts0100414418 - Vsim Error 3170 when running black box flow.
     * dts0100414382  -  #  **  Error: (vsim-VCD-3202) Type conversion in
       connection  to 'data' is not allowed. SV testbench / VHDL design -
       interfaces & inout ports.
     * dts0100411762 - vlog crashes for bit-select on array queue.
     * dts0100387694 - Documentation on excluding FSM coverage data.
     * dts0100415063 - Verilog events at t=0 are not displayed in the Wave
       window.
     * dts0100395773 - Simulator crashes when bit slicing an enum variable in a
       constraint block.
     * dts0100405027 - When assigned to a group, a Wave window divider is not
       saved.
     * dts0100388623 - Recursion does not work for the assertion fail/pass
       commands.
   ______________________________________________________________________

   Known Defects in 6.3a
     * The viewcov mode version of "coverage clear" has a known difference in
       behavior compared to the vsim mode version. In the viewcov mode version,
       clearing coverage data in a design unit instance does not affect the
       coverage data for that design unit, itself. Also, if you clear coverage
       data  in  a design unit, all instances of that design unit are not
       affected by that operation. In vsim mode, the data is more tightly
       linked such that one operation affects the other. In viewcov mode, if
       you want to have correct data correlation between instances and design
       units, then you need to clear both instances and design units.
     * The simulator will hang if it tries to create a WLF file while running
       on a Linux 64-bit operating system from a working directory which does
       not support large files. One common instance of this is executing an add
       wave command, when the working directory was created under an older
       32-bit Linux OS.
       This  is  a  Linux operating system bug and cannot be fixed by the
       simulator.
       A workaround for release 6.3 and above is to execute the simulator with
       command line option -wlfnolock.
     * The stack unwinder on the linux_x86_64 OS is unreliable. The unwinder is
       the fundamental facility provided by the OS for sampling where program
       execution is at. The unwinder is necessary for gathering performance
       data. This is a known issue with this specific OS and is why performance
       data will be incorrect or non-existant on this platform.
     * Users should be mindful of enabling both performance profiling and
       memory  profiling at the same time. Memory profiling requires much
       overhead  process,  and it can skew the results of the performance
       profiling data.
     * On certain (RedHat) Linux Operating System versions the "-restore"
       feature  occasionally  fails. This is due to the memory allocation
       security (anti-hacking) feature of Linux. RedHat Enterprise release v.3
       update3 was the first version to have this security feature. In these
       Linux releases two consecutive program invocations do not get the same
       memory allocation foot-print. For the "-restore" feature the simulator
       relies  on having the same memory allocation foot-print. Users are
       advised to re-try this feature a few times as on average 3 out of 5
       attempts are successful. In recent Linux versions, an override for this
       anti-hacking feature is provided. Please use it at your own discretion.
     * In code coverage, there is no way to exclude a condition or expression
       table row for the case of more than one table on a line and the table in
       question is not the first table on the line.
     * Support  of debugging C code during a quit command was disabled on
       Windows. The corresponding C Debug command cdbg stop_on_quit was also
       disabled on Windows.
     * Specparams can be learned during the learn flow, but cannot be found on
       consumption. The workaround is to use full +acc deoptimization.
     * Attempting  to  traverse from an unnamed VPI typespec handle to an
       instance or a scope will result in a crash.
     * There are some limitations related to coverage exclusions:
          + Toggle exclusions are not supported in viewcov mode yet.
          + Exclusion report on toggles are not supported in both vsim and
            viewcov mode.
     * Concatenations and bit slices are not yet supported for System Verilog
       clocking blocks.
   ______________________________________________________________________

   Product Changes to 6.3a
     * The XML Testplan Import configuration file (xml2ucdb.ini) has been moved
       from the product directory to a sub-directory, vm_src, directly below
       the product directory.
     * The ucdb2html utility has been removed from the release. The HTML report
       functionality had been integrated into vcover for 6.3 (see "vcover
       report -html").
     * Due to changes required for resolution of product defects, the generated
       names of specializations of parameterized classes could be permuted. For
       example, if a name such as "C::C__2" was previously used for "C#(int)"
       and "C::C__3" was used for "C#(logic)", the names might be exchanged.
       The conditions under which name permutation could occur are based on
       internal details of how specializations are matched and are not directly
       correlated to source descriptions.
     * The default action for the command onbreak has changed from "pause" to
       "resume". This will only impact dofiles that do not currently contain
       any onbreak commands. The "pause" action causes the macro file to stop
       executing and issues a "Paused" prompt to allow interactive debugging of
       the macro file. The resume command continues the execution of the macro
       file at the point of the break. The result of this change in default
       value will affect macro files without an onbreak command so that those
       files will continue executing after hitting a break point. If the old
       behavior is required, then it will be necessary to add the command
       onbreak pause at the beginning of the macro file.
     * The default collapsed mode for VCD output from the vcd dumpports command
       has changed from not collapsed to collapsed. The specific change was to
       the line in the modelsim.ini file: "DumpportsCollapse = 0".
       For 6.3, this was changed to: "DumpportsCollapse = 1".
       To get the old non-collapsed format, change this setting back to 0 in
       the modelsim.ini file.
     * Starting in 6.3 concatenations are no longer treated as 'assignment
       patterns'. Previously, the simulator attempted to detect these cases and
       produced the following warning:
       You should use "'{" to specify this literal.
       Now we will print errors, as in the following example:
       int a[3:0] = {default:0};
       int b[1:2] = {32'b1, 32'd2};
       ...
       ** Error: test2.sv(31): Can't use named concat. literals here.
       ** Error: test2.sv(31): Illegal concatenation of an unsized constant.
       ** Error: test2.sv(31): Cannot assign a packed type to an unpacked type.
       ** Error: test2.sv(32): Cannot assign a packed type to an unpacked type.
     * Previously,  an attempt to print a memory using $display displayed
       nothing, while $display of other unpacked types (such as structs and
       dynamic  arrays)  did produce output. In 6.3, we will now print an
       elaboration error, #8323, for all such constructs (which are illegal).
       This error may be suppressed.
       To  print  unpacked  data, we have added the "%p" and "%0p" format
       specifiers.  The  former  prints  the  data in the form of a legal
       "assignment pattern", while "%0p" prints in a shorter format.
     * Wildcard indexed associative array can no longer be used as a foreach
       array.
     * The IEEE Std 1800 has approved an important restriction to packages.
       With the new rules, packages are not permitted to refer to compilation
       unit items. An example of such of reference is the following small
       design:
            typedef int T;
            package p;
                T foo;
            endpackage
       Packages may depend on other packages so compilation unit declarations
       that packages need should be refactored into separate packages. For
       example, the previous design should be changed to a form similar to the
       following:
            package shared_types;
                typedef int T;
            endpackage
            package p;
                import shared_types::*;
                T foo;
            endpackage
       It is also important to note that "import" statements immediately before
       a package declaration are compilation unit imports and not imports into
       the subsequent package. With the new rules, the package references may
       not look into such an import. For example, the following approach will
       no longer work:
            package shared_types;
                typedef int T;
            endpackage
            import shared_types::*;
            package p;
                T foo; // cannot refer to T since it is imported into
                // the compilation unit, not into the package
            endpackage
       The new rules are now being enforced. Designs must be refactored so that
       packages do not refer to anything in the compilation unit.
     * This release includes the new Mentor Graphics Documentation System,
       which includes the following components:
       InfoHub -- A browser-based directory that provides links to all your
       locally installed documentation. The InfoHub also provides a search
       interface, from which you can search across all your locally installed
       documents. The search interface also enables you to submit a search
       directly  to  SupportNet.  The InfoHub provides access to User and
       Reference manuals and Tutorials, delivered in both HTML and PDF formats,
       and Release Notes, delivered in text format.
       PDF Bookcase -- A PDF file that provides links to the PDF documentation
       if you cannot use an HTML browser.
     * The  vopt  +acc=g option has been replaced by the +floatparameters
       option(Verilog designs) and the +floatgenerics option (VHDL designs).
       Both +floatparameters and +floatgenerics accept the same [+<module>][.]
       syntax accepted by +acc. Use +floatparameters and +floatgenerics to
       instruct vopt not to lock down values of parameters and generics during
       optimization. The parameters and generics will be left "floating", and
       thus  capable  of accepting modified values via the vsim -g and -G
       options. +floatparameters and +floatgenerics may have adverse effects on
       performance in some cases.
     * The vopt +acc=m option has been changed such that it no longer preserves
       primitive instances. Primitive instances are now preserved by using the
       new +acc=u option.
     * The VoptCoverageOptions variable has been removed from the modelsim.ini
       file. vopt optimizations for coverage are now controlled by the CoverOpt
       modelsim.ini file variable and the -cover command line option.
     * Turning  on  code  coverage  will  now  turn  off  fewer simulator
       optimizations. This will result in faster simulations with code coverage
       on. But you will notice some differences in code coverage data because
       of various optimizations. For instance, optimizations that prevent
       invoking of always blocks unless the data changes in addition to the
       clock, will result in reduced hit counts for statements within those
       blocks. In addition, VHDL processes that are recognized as clocked flip
       flops may have confusing numbers in the IF branch coverage. The level of
       optimization  with code coverage is now controlled by the CoverOpt
       modelsim.ini variable or an additional character allowed in the -cover
       option to vcom, vlog or vopt. This is a digit from 1 to 4, with the
       following meanings (the default is 2):
       1 -- Turn off all optimizations that affect coverage reports.
       2 -- Allow optimizations that allow large performance improvements by
       invoking sequential processes only when the data changes. Allow VHDL FF
       recognition. This may make major reductions in coverage counts.
       3 -- In addition, allow optimizations that may change expressions or
       remove  some  statements.  Allow  constant propagation. Allow VHDL
       subprogram inlining.
       4 -- In addition, allow optimizations that may remove major regions of
       code by changing assignments to built-ins or removing unused signals.
       Change Verilog gates to continuous assignments.
     * The  -coverage  option  to  vopt  is  no  longer needed. vopt will
       automatically detect whether any of the source files were compiled with
       a -cover option, and will adjust its optimizations accordingly. Also, if
       you give a -cover xyz option to vopt, it will be logically OR'd with any
       -cover abc option given to an individual source file when processing
       that source file. In addition, if you compiled some source files with
       coverage on, you can force coverage off by giving vopt the -nocover
       option. This allows you to control whether coverage is on or off at vopt
       time instead of having to recompile individual source files.
     * The pathname reported by the simulator and User Interface for items
       inside SystemVerilog packages is incorrect. A path separator ('/') was
       used instead of the language correct package scope separator ('::').
     * The recording of attributes for transactions has changed. Previously,
       any attribute recorded on a transaction was not only added to every
       transaction on that same substream, but to all parallel transactions and
       the transactions on their substreams as well.
       Now, any attribute recorded on a transaction is still added to every
       transaction on that same substream, but is no longer automatically added
       to every parallel transaction and the transactions on their substreams.
       Typically, all transactions on a given stream (and all of it's parallel
       substreams) have the same set of attributes, and for that case, there
       will be no difference due to this change.
     * Changes for coverage exclude command:
          + Replace the option -instance with -scope to accommodate more scope
            types like generate block.
          + Transition  names are used with the option -ftrans instead of
            transition id's. The new syntax is:
                [-ftrans <state_var_name><transition_name>+ | all]
            where transition_name is specified as <state_name>-> <state_name>.
          + State names are used with the option -fstate instead of state id's.
            The new syntax is:
                [-fstate <state_var_name> <state_name>+ | all]
          + A new option -else is added to exclude the else part of every
            if-branch specified in the line range. Note that the line number
            for the else-branch is where the if-branch appears.
          + Recursive  exclusion for a scope is supported. To recursively
            exclude a scope, -scope is specified together with -r.
          + -scope and -du are supported with -togglenode.
     * The  UCDB  bin name for if-branch is changed from 'true_branch' to
       'if_branch'.
     * The  simulator has been improved to recognize and maintain Verilog
       escaped  identifier  syntax  for  all Verilog escaped identifiers.
       Previously  such identifiers were converted to VHDL-style extended
       identifiers, and then appeared as VHDL extended identifiers in tool
       output and CLI commands.
       Starting in 6.3, all default Verilog escaped object names inside the
       simulator appear identical to their names in original HDL source files.
       Sometimes in mixed language designs, hierarchical identifiers might
       refer to both VHDL extended identifiers and Verilog escaped identifiers
       in the same fullpath. For example:
       /top/\VHDL*ext\/\Vlog*ext /bottom
       top.\VHDL*ext\.\Vlog*ext .bottom
       (depending if the HierPathDelim variable is set to '/' or '.')
       Any fullpath that appears as user input to the tool (e.g. on the vsim
       command line, in a .do file, on the vopt command line, etc.) should be
       composed of components with escape syntax appropriate to their language
       kind.
       A modelsim.ini variable called "GenerousIdentifierParsing" can control
       parsing of identifiers input to the tool. If this variable is set (it is
       set by default now), either escape syntax to be used for objects of
       either language kind. This can be helpful to maintain compatibility with
       older  do files, which often contain pure VHDL extended identifier
       syntax, even for escaped identifiers in Verilog design regions.
       Note that SDF files are always parsed in "generous mode". SignalSpy
       function arguments are also parsed in "generous mode".
       On the vsim command line, the language-correct escape syntax should be
       used for top-level module names. Using incorrect escape syntax on the
       command  line  will  work  in the incr flow, but not in vopt. This
       limitation may be removed in a future release.
     * If  an  invalid  end  time  is specified when recording the end of
       transaction, a warning is still issued but the current simulation time
       is used as the transaction end time instead of the transaction start
       time.
     * The format of the library contents file (_info file) has been changed
       for the purpose of improved compiler performance. The new format is not
       backwards compatible with previous releases. Consequently, any attempt
       to refresh or recompile a 6.3 library with an older release will result
       in an error similar to the following:
       ** Error: (vcom-42) Unsupported ModelSim library format for "./work".
       (Format: 3).
       Converting the library back to an older release requires that you remove
       the library and rebuild it from scratch. Or, if you are converting back
       to a 6.2 release only, then you can convert the library format to the
       6.2 format and then freely refresh back and forth between 6.2 and 6.3
       releases. Use the 6.3 version of vlib to convert the format to the 6.2
       version using the -format option. For example:
       vlib -format 1 work
       The format version for pre-6.3 releases is 1, while the format version
       for 6.3 is 3. Format version 2 is related to libraries created with the
       -archive option and should be avoided when specifying the vlib -format
       option.
     * The  XML  Testplan  Import Utility (xml2ucdb) was enhanced and the
       command-line and configuration parameters were re-named for consistency.
       The following changes were made:
         1. Command-line
              1. Added a "-verbose" option to show testplan hierarchy and
                 design mapping. By default, the utility is a lot less noisy
                 than before.
              2. A  "-ucdbfilename  " option has been added to remove the
                 order-dependence  of  the files on the command line (the
                 original syntax is still accepted).
              3. The command-line arguments are now order-independent.
              4. Any "-format " option found on the command line is processed
                 first and other extraction parameters found on the command
                 line act as overrides on top of the parameters found in the
                 confuguration file.
              5. The same parameter names are used both on the command line and
                 in the configuration file.
              6. The "-tagseparators " option, when used on the command-line,
                 applies  only to the taglist parameters specified on the
                 command line (see below).
         2. Configuration file
              1. Added "datalabels" parameter to support user-defined embedded
                 data labels.
              2. The following parameters have been re-named for consistency.
                 In all cases, the former name is still recognized:
                   1. start => starttags
                   2. stop => stoptags
                   3. exclude => excludetags
                   4. description => descriptiontag
                   5. sectionitem => sectiontags
                   6. dataitem => datatags
                   7. testitem => titletag
                   8. coveritem => linktag
                   9. coverattr => linkattr
              3. The "Tags" field name in the "fieldnames" and "fieldlabels"
                 parameters has been renamed "Link". The former name is still
                 recognized.
         3. Behavior
              1. The UCDB tags used to link testplan sections to coverage items
                 now has the contents of the "title" parameter prepended.
                 Lacking that, the basename of the XML input file is used.
              2. The "startsection" parameter now reflects the initial section
                 number for each level of hierarchy (auto-number mode only).
              3. Data  capture is no longer enabled from the start of the
                 document in auto- number mode. An element matching "starttags"
                 or a section number matching the "startstoring" parameter is
                 required to enable data capture.
   ______________________________________________________________________

   New Features Added to 6.3a
     * Basic command line editing available in command-line mode (vsim -c). The
       arrow  keys can be used from the shell to recall previous commands
       (up/down)  and  to  edit the current command (left/right). See the
       reference manual for a more detailed description.
     * New Wave Window Cursor and Timeline features:
          + User definable time scale: a different time unit can be selected
            for use in the timeline and cursor time values. The time value will
            be scaled appropriately for the selected unit. This time unit is
            configured using the Cursor & Timeline configuration dialog.
          + Frequency deltas: The time delta between two cursors can display
            frequency instead. This feature is enabled from the Cursor and
            Timeline configuration dialog.
          + Cursor Toolbox: To the left of the cursor row is a set of icons, 3
            per row that will give you quick access to Cursor and Timeline
            features and configurations.
          + Short/Long signal name display: The Cursor Toolbox includes a
            button that will easily and conveniently toggle between short and
            long pathnames in the name column.
     * The -prunechildren and -noprunechildren options to "coverage analyze"
       allow more intuitive results for some kinds of coverage analysis. The
       default  is -noprunechildren, which means that the report includes
       sub-items of coverage items or test plan sections that survive a -select
       filter; this is useful for cases where users wish to subdivide a test
       plan report by category or area of responsibility.
     * The coverage attr command can accept a -plan argument to apply to test
       plan  sections. There is no difference between -plan and -path for
       setting UCDB attributes with "attr" but use of -plan is more consistent
       with usage of "coverage analyze", where there is a functional difference
       between -plan and -path.
     * Support is added for consuming the PLI TAB file with the -tab option.
       Syntax:
       vopt -tab <tabFile>
       vsim -tab <tabFile>
       <tabFile> -- a .tab file used with VCS based on version 7.2 syntax.
       Use flow:
       For the two step flow (VSIM implicitly invoking VOPT or the NOVOPT
       flow), the -tab file is to be specified to vsim only.
       For the three step flow (user explicitly running VOPT), the -tab file
       must be specified to both vopt and vsim.
       Refer to User's Manual for a more detailed description.
     * Limited class logging and viewing has been added to this release as a
       beta feature. Many class types can now be logged into the vsim.wlf file
       for post-simulation viewing using the vsim -view vsim.wlf command.
       Viewing of class variables in the Wave window during simulation is not
       yet supported and may lead to problems if they are added to the Wave
       window during simulation.
       Class variables will not be logged as part of a wildcard log command
       (i.e.  add  log * will not cause class variables to be logged). So
       existing scripts will not be affected. To log class variables, you must
       log them specifically by name:
          class myClass;
            ...
          endclass
          myclass myClassVariable = new;
          VSIM> add log * #Will not log class variables
          VSIM> add log myClassVariable
       In addition, you can also log all class objects of a particular class
       type using the add log -class command with the name of the class. For
       example:
          add log -class myClass
       This will log all objects of the type myClass or any derived classes of
       myClass that come into existence following the add log command.
       When viewing class variable waveforms post-simulation using vsim -view
       vsim.wlf  you will notice class variable values in the Wave window
       having  values  such as "@1", "@2", etc. These are the simulator's
       representation of the object handles that the class variable contains.
       So at time 100, myClassVariable might contain "@1" while at time 200 it
       will change to "@2". These object handles can themselves be waved using
       add wave @1 and examined using the command examine @2.
     * New features and changes in XML Import (xml2ucdb):
          + External entities in the XML source (ie: &...;) are now ignored,
            character entities (ie: &10;) are converted to the corresponding
            character.
          + Extraction parameters "goaltag" and "weighttag" added to recognize
            goal/weight as explicitly tagged elements.
          + Extraction parameters "linkattr" and "typeattr" added to support
            link/type as attributes of a single element.
          + Extraction   parameter  "stylesheet"  added  to  support  XSL
            stylesheet-based pre-processing.
          + Extraction parameter "sectionprefix" is now supported in autonumber
            mode.
          + Scope path is now squawked for some XML input data errors.
          + Section  titles containing the current path separator ('/' by
            default) are now converted to VHDL escaped identifiers before
            storing.
          + Testplan-to-design linking rules were modified significantly:
               o Type string "CoverPoint" is now recognized.
               o Links of type CoverGroup not containing commas or colons now
                 map to "-cvgmatch link"
               o Links of type CoverPoint or Cross not containing commas or
                 colons not map to "-cvpmatch link"
               o Generic  "CoverItem"  type is now recognized (no special
                 covergroup:coverpoint  processing,  maps  to  "-path" or
                 "-match").
               o Links NOT of type CoverGroup, CoverPoint, or Cross now map to
                 "-match link" even if they contain commas and/or colons.
               o Links of type CoverGroup, CoverPoint, or Cross containing
                 commas and/or colons now emit errors if one or more of the
                 sub-strings in the pattern are missing or empty.
               o Links of type CoverGroup, CoverPoint, or Cross which start
                 with a path separator ("/") are split into a path portion
                 (mapped to "-path") and a covergroup:coverpoint portion which
                 is parsed and mapped as before (see documentation).
               o If path field value is set to "-" it will be ignored (useful
                 for path-per-link case where one or more link values don't
                 require a path).
          + FrameMaker XML files are now supported (format: Frame).
          + Extraction parameters for GamePlan XML files were added to the
            configuration file (format: GamePlan).
          + New functionality added to HTML Report Generator:
               o Functional coverage results have been added to design scope
                 coverage summary pages.
               o Section  numbers  have  been added to testplan scopes in
                 hierarchy tree and to testplan coverage summary pages.
          + The following FLI functions have been enhanced to support SystemC
            variables:
               o mti_FirstVar()
               o mti_NextVar()
               o mti_GetArrayVarValue()
               o mti_GetVarValueIndirect()
               o mti_GetVarAddr()
               o mti_GetVarImage()
               o mti_GetVarImageById()
               o mti_GetVarName()
               o mti_GetVarType()
               o mti_GetVarValue()
            (note: writing a value via the pointer returned by mti_GetVarAddr()
            is not supported.)
            These FLI functions do not support SystemC variables:
               o mti_SetVarValue()
               o mti_GetVarSubelements()
            The  following FLI function has been added to support SystemC
            variables:
               o mtiVariableIdT mti_FirstVarByRegion(mtiRegionIdT region_id);
          + Nest wave groups are supported in the Wave window. Nest groups can
            be created from the command line or via drag and drop. They will be
            saved/restored correctly from a wave.do format file or restart and
            checkpoint/restore commands.


