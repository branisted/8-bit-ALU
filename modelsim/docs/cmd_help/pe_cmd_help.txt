# ATTENTION ENGINEERS!
#   Do NOT edit this file and check it in. The Docs group is responsible
#   for maintaining this file.  Send all changes to docs2@model.com.
#
# help command command help
# The entries in this file have the form of a Tcl list.  
# One entry per line as follows:
#   cmd arguments description
#
debugging {-nousage-} {See these commands for debugging operations: bp bd when examine step run change add delete force view.}
execution {-nousage-} {See step run vsim_break stop.}  
abort {The abort command halts the execution of a macro file interrupted by a breakpoint or error. When macros are nested, you may choose to abort the last macro only, abort a specified number of nesting levels, or abort all macros. The abort command may be used within a macro to return early.} {[<n> | all]} 
{add dataflow} {The add dataflow command adds the specified process, signal, net, or register to the Dataflow window. Wildcards are allowed.} {<object>  [-in] [-out] [-inout] [-internal] [-nofilter] [-out] [-ports] [-recursive] } 
{add list} {The add list command adds the following objects and their values to the List window:  VHDL signals and variables, Verilog nets and registers, and SystemC primitive channels (signals).} {[-allowconstants] [-depth <level>] [-in] [-inout] [-internal] [-label <name>] [-nodelta] [-notrigger | -trigger] [-out] [-ports] [-<radix_type> | -radix <type>] [-radixenumnumeric | -radixenumsymbolic] [-recursive] [-width <n>] [<object_name> | {<object_name> {sig1 sig2 sig3 ...}}] ... } 
{add memory} {The add memory command displays the contents and sets the address and data radix of the specified memory in the MDI frame of the Main window. } {[-addressradix <radix>] [-dataradix <radix_type>] [-radixenumnumeric | -radixenumsymbolic] [-wordsperline <num>] <object_name> ...} 
{add testbrowser} {The add testbrowser command adds a .ucdb file to the Test Management Browser pane in the Test Management window.} {<ucdb_filename>} 
{add watch} {The add watch command adds signals and variables to the Watch pane in the Main window. SystemC objects and user-defined buses may also be added.} {<object_name> ... [-radix <type>] [-radixenumnumeric | -radixenumsymbolic]} 
{add wave} {The add wave command adds the following objects to the Wave window:  VHDL signals and variables, Verilog nets and registers, and SystemC primitive channels (signals).} {[-allowconstants] [-clampanalog [0|1]] [-color <standard_color_name>] [-depth <level>] [-expand <signal_name>] [-<format>] [-group <group_name> [<sig_name1>...]] [-height <pixels>] [-in] [-inout] [-internal] [-label <name>] [-max <real_num>] [-min <real_num>] [-noupdate] [-out] [-ports] [-position] [-radix <type> | <radix_type>] [-radixenumnumeric | -radixenumsymbolic] [-recursive] [-time] [[-divider <divider_name>...] | [-label <name> | {<object_name> {sig1 sig2 sig3 ...}}] ...]} 
{add_cmdhelp} {The add_cmdhelp command adds the specified command name, description, and command arguments to the command-line help. You can then access the information using the help command.} {{<command_name>} {<command_description>} {<command_arguments>}} 
alias {The alias command displays or creates user-defined aliases. Any arguments passed on invocation of the alias will be passed through to the specified commands.} {[<name> ["<cmds>"]]}
batch_mode {The batch_mode command returns a 1 if ModelSim is operating in batch mode, otherwise it returns a 0. It is typically used as a condition in an if statement.} {-noargs-}
bd {The bd command deletes a breakpoint. You must specify a filename and line number or a specific breakpoint id#. You can delete multiple breakpoints by specifying separate information groupings on the same command line.} {[<filename> <line_number>] | [<id#> | <label>]}
{bookmark add wave} {The bookmark add wave command creates a named reference to a specific zoom range and scroll position in the specified Wave window. Bookmarks are saved in the wave format file and are restored when the format file is read.} {<label> [<zoomrange> [<topindex>]] }
{bookmark delete wave} {The bookmark delete wave command deletes bookmarks from the specified Wave window.} {<label> [-all] }
{bookmark goto wave} {The bookmark goto wave command zooms and scrolls a Wave window using the specified bookmark.} {<label> }
{bookmark list wave} {The bookmark list wave command displays a list of available bookmarks in the Transcript pane.} {-noargs-} 
bp {The bp or breakpoint command either sets a file-line breakpoint or returns a list of currently set breakpoints.} {<filename> <line_number> [-c [<function_name> | <file_name>:<line#> | <line#> | *0x<hex_address>]] [-id <id#> | -label <label>] [-inst <region>] [-disable] [-cond {<condition_expression>}] [{<command>...}] | [-query <filename> [<line_number> [<line_number>]]]}
cd {The cd command changes the local directory to the specified directory.} {[<dir>]}
cdbg {The cdbg command provides command-line equivalents of the menu options that are available for C Debug.} {allow_lib_step on|off | auto_find_bp | debug_on | enable_auto_step on|off | init_mode_complete | init_mode_setup | interrupt | keep_user_init_bps on|off | quit | refresh_source_window | set_debugger <path> | show_source_balloon on|off | stop_on_quit on|off | trace_entry_point on|off [<function_name>]}
change {The change command modifies the value of a VHDL constant, generic, or variable; Verilog register or variable; or C variable if running C Debug.} {<variable> <value>}
{compare add} {The compare add command creates an object that is a comparison between signals in a reference design against signals in a test design. You can specify whether to compare two signals, all signals in the region, or just ports or a subset of ports. Constant signals such as parameters and generics are ignored.} {-clock <name> [-help] [-label <label>] [-list] [-<mode>] [-nowin] [-rebuild] [-recursive] [-separator <string>] [-tol <delay>] [-tolLead <delay>] [-tolTrail <delay>] [-verbose] [-vhdlmatches {<ref-logic-value>=<test-logic-value>:...}] [-vlogmatches {<ref-logic-value>=<test-logic-value>:...}] [-wavepane <n>] [-when {<expression>}] <referencePath> [<testPath>] }
{compare annotate} {The compare annotate command either flags a comparison difference as "ignore" or adds a text string annotation to the difference. The text string appears when the difference is viewed in info popups or in the output of a compare open command.} {[-ignore] [-noignore] [-text <message>] <idNum1> [<idNum2>...]}
{compare clock} {The compare clock command defines a clock that can then be used for clocked-mode comparisons. In clocked-mode comparisons, signals are sampled and compared only at or just after an edge on some signal.} {[-delete] [-offset <delay>] [-rising | -falling | -both] [-when {<expression>}] <clock_name> <signal_path>}
{compare configure} {The compare configure command modifies options for compare signals and regions. The modified options are applied to all objects in the specified compare path.} {[-clock <name>] [-recursive] [-tol <delay>] [-tolLead <delay>] [-tolTrail <delay>] [-vhdlmatches {<ref-logic-value>=<test-logic-value>:...}] [-vlogmatches {<ref-logic-value>=<test-logic-value>:...}] [-when {<expression>}] <comparePath>}
{compare continue} {This command is used to continue with comparison difference computations that were suspended using the compare stop button or Control-C. If the comparison was not suspended, compare continue has no effect.} {-noargs-}
{compare delete} {The compare delete command deletes a comparison object from the currently open comparison.} {[-recursive] {<objectPath> }}
{compare end} {The compare end command closes the active comparison without saving any information.} {-noargs-}
{compare info} {The compare info command lists the results of the comparison in the Main window transcript. To save the information to a file, use the -write argument.} {[-all] [-count] [-primaryonly] [-signals] [-secondaryonly] [<startNum> [<endNum>]] [-summary] [-write <filename>]}
{compare list} {Displays in the Transcript pane a list of all the compare add commands currently in effect.} {[-expand]}
{compare options} {The compare options command sets defaults for various waveform comparison commands. Those defaults are used when other compare commands are invoked during the current session. To set defaults permanently, edit the appropriate PrefCompare() Tcl variable.} {[-addwave] [-noaddwave] [-ignoreVlogStrengths] [-noignoreVlogStrengths] [-maxsignal <n>] [-maxtotal <n>] [-listwin <name>] [-<mode>] [-separator <string>] [-tol <delay>] [-tolLead <delay>] [-tolTrail <delay>] [-track] [-notrack] [-vhdlmatches {<ref-logic-value>=<test-logic-value>:...}] [-vlogmatches {<ref-logic-value>=<test-logic-value>:...}] [-wavepane <n>] }
{compare reload} {The compare reload command reloads comparison differences to allow their viewing without recomputation. Prior to invoking compare reload, you must open the relevant datasets with the same names that were used during the original comparison.} {<rulesFilename> <diffsFilename>}
{compare reset} {Clears the current compare differences, allowing another compare run command to be executed. Does not modify any of the compare options or any of the signals selected for comparison. This allows you to re-run the comparison with different options or with a modified signal list.} {-noargs-}
{compare run} {The compare run command runs the difference computation on the signals selected via a compare add command. Reports in the Transcript pane the total number of errors found.} {[<startTime>] [<endTime>]}
{compare savediffs} {The compare savediffs command saves the comparison results to a file that can be reloaded later. To be able to reload the file later, you must also save the comparison setup using the compare saverules command.} {<diffsFilename>}
{compare saverules} {The compare saverules command saves the comparison setup information (or "rules") to a file that can be re-executed later. The command saves compare options, clock definitions, and region and signal selections.} {[-expand] <rulesFilename>}
{compare see} {The compare see command displays the specified comparison difference in the Wave window using whatever horizontal and vertical scrolling are necessary. The signal containing the specified difference will be highlighted, and the active cursor will be positioned at the starting time of the difference.} {[-first] [-last] [-next] [-nextanno] [-previous] [-prevanno] [-wavepane <n>] }
{compare start} {The compare start command begins a new dataset comparison. The datasets that you'll be comparing must already be open.} {[-batch] [-maxsignal <n>] [-maxtotal <n>] [-refDelay <delay>] [-testDelay <delay>] <reference_dataset> [<test_dataset>]}
{compare stop} {This command is used internally by the compare stop button to suspend comparison computations in progress. If a compare run execution has returned to the VSIM prompt, compare stop has no effect. Under Unix, entering a Control-C character in the window that invoked ModelSim has the same effect as compare stop.} {-noargs-}
{compare update} {This command is primarily used internally to update the comparison differences when comparing a live simulation against a .wlf file. The compare update command is called automatically at the completion of each simulation run if the "-track" compare option is in effect.} {-noargs-}
configure {The configure command invokes the List or Wave widget configure command for the current default List or Wave window.} {list | wave [<option> <value>] [-delta [all | collapse | events | none]] [-gateduration [<duration_open>]] [-gateexpr [<expression>]] [-usegating [<value>]] [-strobeperiod [<period>]] [-strobestart [<start_time>]] [-usesignaltriggers [<value>]] [-usestrobe [<value>]] [-childrowmargin [<pixels>]] [-cursorlockcolor [<color>]] [-gridauto [off | on] [-gridcolor [<color>]] [-griddelta [<pixels>]] [-gridoffset [<time>]] [-gridperiod [<time>]] [-namecolwidth [<width>]] [-rowmargin [<pixels>]] [-signalnamewidth [<value>]] [-timecolor [<color>]] [-timeline [<value>]] [-timelineunits [fs | ps | ns | us | ms | sec | min | hr]] [-valuecolwidth [<width>]] [-vectorcolor [<color>]] [-waveselectcolor [<color>]] [-waveselectenable [<value>]]}
{coverage analyze} {Displays test oriented information based on a vcover merge operation. Some arguments for this command require that the merge which created the data was performed with the test-associated merge (performed without -totals). This command is only available during post-simulation processing, when a UCDB file is opened with vsim -viewcov.} {[-append] [-code \{b|c|e|s|tf\}...] [-codeAll] [-coverage most | least | zero | nonzero]] [-du <spec>] [-file <filename>] [-path <spec>] [-plansection <spec> [-section] | [-nosection]] [-precision <int>] [-prunechildren] [-noprunechildren] [-recursive] [-select instance] [ -select weight \{-lt|-gt|-le|-ge|-eq|-ne\} <int>] [-select coverage \{-lt|-gt|-le|-ge|-eq|-ne\} <float>] [-select tag \{-eq|-ne|-[n]regexp\} <string>] [-select attr <name> \{-lt|-gt|-le|-ge|-eq|-ne|-[n]regexp\} \{<value>\}] [-anyselected | -allselected] [-aggregate preselected | postselected] [[-samples most | least | zero | nonzero]] [-summary [hier|local]] [-testextract <testspec>+] [-totals]}
{coverage attribute} {The coverage attribute command is used to display or set test attributes in the currently loaded database.} {coverage attribute [-test <testname>] [-seed <str>] [-command <str>] [-comment <str>] [-compulsory [0|1] [-match <str> | -path <obj> | -plansection <obj>] [-du <duname>] [-select instance] [-code \{b|c|e|s|tf\}...] [-codeAll] [-delete] [-tcl] [-concise] [-name <str> -value <str>]... }
{coverage clear} {The coverage clear command clears specified types of coverage data from the UCDB and unloads the current exclusion filter file} {[-code \{b|c|e|s|tf\}... ] [-codeAll] [-du <du_name> | -instance <pathname>] [-match <str>] [-path <obj>+] [-recursive]}
{coverage exclude} {The coverage exclude command allows you to exclude the following from coverage statistics: specified lines in a source file; datasets (.wlf files); coverage types within datasets; source file(s); lines within a source file; rows within a condition or expressoin truth table; instances or design units; transitions or states within a Finite State Machine; and, toggle nodes. Type 'coverage exclude -help' while your design is loaded for complete syntax.} {-noargs-}
{coverage goal} {The coverage goal command sets the value of UCDB-wide goals.} {[-cvp] [-bydu] [-byinstance] [-type] [-fstate] [-ftrans] [-active] [-precision <int>] [<float percentage>] [-path | -du | -plansection <path>] [-code [bcestf]] [-codeAll] }
{coverage open} {The coverage open command opens coverage datasets (.ucdb) for viewing in the GUI in Coverage View mode. This command is equivalent to the command vsim -viewcov.} {<ucdb_filename> [<ucdb_filename>...] [logicalname]}
{coverage ranktest} {The coverage ranktest command ranks coverage data according to user-specified tests.} {[-inputs <filename>] [-log <filename>] [<coverage_type (as either [-code {b|c|e|s|t|f}...] or [-codeAll] ) >] [-goal {<coverage_type> <RealNum>] | <RealNum>}] [-weight <coverage_type> <integer>] [-maxcpu <real_num_in_seconds>] [-maxtests <int>] [-metric {aggregate | total}] [-precsion] [-fewest | -cputime | -simtime] [[-path <path> | -du <du_name> | -plansection <path>]] [[-quiet] | [-concise] | [-verbose]] [-rankfile <filename>] <UCDB_inputfile1> [... <UCDB_inputfileN>] }
{coverage report} {The coverage report command produces textual output of coverage statistics or exclusions. Type 'coverage report -help' for complete syntax.} {-noargs-}
{coverage save} {The coverage save command saves current coverage statistics to a file that can be reloaded later, preserving instance-specific information.} {[-instance <path>] [-code {b|c|e|s|t|f}...] [-codeAll] [-norecursive] [-onexit] [<dbname>]} 
{coverage tag} {The coverage tag command is used to add or remove tags from specified objects.} {[-delete] [-duname <duname>] | [-select instance] [-tagname <name>] [-match <string>] [-path <path> +] [-plansection <path>] [-testrecord <test_name>] [-recurse] [-code {b|c|e|s|t|f}...] [-codeAll] }
{coverage testnames} {The coverage testnames command is used to list the test names in a currently loaded UCDB file. This command is only available during post-simulation processing (vsim -viewcov).} {coverage testnames [-tcl]}
{coverage unlinked} {The coverage unlinked command is used as a diagnostic tool to report on test plan items with no coverage associated, or design coverage that has not been associated with an item in a test plan. Available only in post-simulation, through vsim -viewcov.} {[-recursive] [-plansection <path>] [-testname <test_name>] [-du <duname>] [-path <path>] [-select instance] [-file <filename>] [-append] [-code {b|c|e|s|t|f}...] [-codeAll] }
{coverage weight} {The coverage weight command sets a global per-type weight for total coverage calculations. Total coverage calculations are exposed with the coverage analyze -total command; this includes total coverage numbers for test plans in the Tracking tab in the Verification Management layout. The following is a list of syntax arguments without information on usage. For more detailed command usage information, type 'coverage weight -help' or refer to 'coverage weight' in the Reference Manual.} {[-bydu] [-byinstance] [-type] [-fstate] [-ftrans] [-fail] [-pass] [-vpass] [-disabled] [-attempted] [-active] [-path | -du | -plan <path>] [-assert] [-code {b|c|e|s|t|f}...] [-codeAll] <integer_weight>}
{dataset alias} {The dataset alias command assigns an additional name (alias) to a dataset. The dataset can then be referenced by that alias. A dataset can have any number of aliases, but all dataset names and aliases must be unique.} {<dataset_name> [<alias_name>]}
{dataset clear} {The dataset clear command removes all event data from the current simulation WLF file while keeping all currently logged signals logged. Subsequent run commands will continue to accumulate data in the WLF file.} {-noargs-}
{dataset close} {The dataset close command closes an active dataset. To open a dataset, use the dataset open command.} {<logicalname> | [-all]}
{dataset config} {The dataset config command configures WLF file parameters after a WLF file has already been opened.} {<dataset_name> [-wlfcachesize <n>] [-wlfdeleteonquit [0 | 1] ] [-wlfopt [0 | 1] ]}
{dataset current} {The dataset current command opens the specified dataset and sets the GUI context to the last selected context of the specified dataset.} {[<dataset_name>]}
{dataset info} {The dataset info command reports a variety of information about a dataset.} {<option> <dataset_name>}
{dataset list} {The dataset list command lists all active datasets.} {[-long]}
{dataset open} {The dataset open command opens a WLF file (representing a prior simulation) and assigns it the logical name that you specify. To close a dataset, use dataset close.} {<filename> [<logicalname>]}
{dataset rename} {The dataset rename command changes the logical name of a dataset to the new name you specify.} {<logicalname> <newlogicalname>}
{dataset restart} {The dataset restart command unloads the specified dataset or current dataset and reloads the file using the same pathname.} {[<filename>]}
{dataset save} {The dataset save command writes data from the current simulation to the specified file. This lets you save simulation data while the simulation is still in progress.} {<datasetname> <filename>}
{dataset snapshot} {The dataset snapshot command saves data from the current WLF file (vsim.wlf by default) at a specified interval. This lets you take sequential or cumulative "snapshots" of your simulation data.} {[-dir <directory>] [-disable] [-enable] [-file <filename>] [-filemode {overwrite | increment}] [-mode {cumulative | sequential}] [-report] [-reset] [-size <file size> | -time <n>]}
delete {The delete command removes objects from either the List or Wave window.} {list | wave [-window <wname>] <object_name>}
describe {The describe command displays information about the specified HDL object, C variable, or design region.} {<name> ...}
disablebp {The disablebp command turns off breakpoints and when commands. To turn the breakpoints or when statements back on again, use the enablebp command.} {[<id#> | <label>]}
do {The do command executes commands contained in a macro file.} {<filename> [<parameter_value> ...]}
drivers {The drivers command displays the names of all drivers of the specified object.} {<object_name>}
dumplog64 {The dumplog64 command dumps the contents of the specified WLF file in a readable format to stdout. The WLF file cannot be opened for writing in a simulation when you use this command.} {<filename>}
echo {The echo command displays a specified message in the Transcript pane.} {[<text_string>]}
edit {The edit command invokes the editor specified by the EDITOR environment variable. By default, the specified filename will open in ModelSim Source editor.} {[<filename>]}
enablebp {The enablebp command turns on breakpoints and when commands that were previously disabled.} {[<id#> | <label>]}
{encoding convertfrom} {Convert a data string to 16-bit Unicode from the named encoding.} {<encoding_name> <string>}
{encoding convertto} {Convert a data string from 16-bit Unicode to the named encoding.} {<encoding_name> <string>}
{encoding system} {Chages the current system encoding to the named encoding. If a new encoding is omitted the command returns the current system encoding.} {<encoding_name>}
{encoding names} {The encoding names command returns a list of valid arguments for the encoding system command.} {-noargs-}
environment {The environment, or env command, allows you to display or change the current dataset and region/signal environment.} {[-dataset] [-nodataset] [<pathname> | -forward | -back]}
examine {The examine command examines one or more objects and displays current values (or the values at a specified previous time) in the Transcript pane. If you are using C Debug , examine can display the value of a C variable as well.} {[-delta <delta>] [-env <path>] [-handle] {[-in] [-out] [-inout] | [-ports]} [-internal] [-maxlen <integer>] [-expr <expression>] [-name] [-radix_type] [-radix <type>] [-radixenumnumeric | -radixenumsymbolic] [-time <time>] [-value] <name>...}
exit {The exit command exits the simulator and the ModelSim application.} {[-force] [-code <integer>]}
{find nets} {The find nets command locates nets in the design whose names match the name specification you provide.} {{[-in] [-inout] [-out] | [-ports]} [-internal] <object_name> [-nofilter] [-recursive] }
{find signals} {The find signals command locates nets in the design whose names match the name specification you provide.} {{[-in] [-inout] [-out] | [-ports]} [-internal] <object_name> [-nofilter] [-recursive] }
{find instances} {The find instances command locates instances in the design whose names match the name specification you provide.} {[-recursive] {<object_name> ? | -bydu <design_unit> ...} [-nodu]}
{find blocks} {The find blocks command locates blocks in the design whose names match the name specification you provide.} {[-recursive] <object_name> ...}
{find virtuals} {The find virtuals command locates virtual objects in the design whose names match the name specification you provide.} { [-kind <kind>] [-unsaved] [-recursive] <object_name> ...}
{find classes} {The find classes command locates incrTcl classes in the design whose names match the name specification you provide.} {<class_name> ...}
{find objects} {The find objects command locates objects in the design whose names match the name specification you provide.} { [-class <class_name>] [-isa <class_name>] [<object_name> ?]} 
{find infiles} {The find infiles command searches the specified files and prints to the Transcript pane those lines from the files that match the specified pattern.} {<string_pattern> <file_pattern> ...}
{find insource} {The find insource command searches all source files related to the current design and prints to the Transcript pane those lines from the files that match the specified pattern. } {<pattern>} 
formatTime {The formatTime command provides global format control for all time values displayed in the GUI.} {[+|-]commas | [+|-]nodefunits | [+|-]bestunits}
force {The force command allows you to apply stimulus interactively to VHDL signals and Verilog nets.} {[-freeze | -drive | -deposit] [-cancel <time>] [-repeat <time>] <object_name> {<value> [[@]<time>[<unit>]]}...}
{gdb dir} {The gdb dir command sets the source directory search path for the C debugger.} {[<src_directory_path_1> ...]}
help {The help command displays in the Transcript pane a brief description and syntax for the specified command.} {[<command> | <topic>]}
history {The history command lists the commands you have executed during the current session. History is a Tcl command. For more information, consult the Tcl Man Pages (Help > Tcl Man Pages).} {[clear] [keep <value>]}
layout {The layout command loads, saves, lists, or deletes custom GUI layouts. Consult the Reference manual for layout command syntax.} { -noargs- }
log {The log command creates a wave log format (WLF) file containing simulation data for all HDL objects whose names match the provided specifications.} {[-depth <level>] [-flush] [-howmany] {[-in] [-inout] [-out] | [-ports]} [-internal] [-recursive] <object_name> ...}
lshift {The lshift command takes a Tcl list as an argument and shifts it in-place, one place to the left, eliminating the left-most element.} {<list> [<amount>]}
lsublist {The lsublist command returns a sublist of the specified Tcl list that matches the specified Tcl glob pattern.} {<list> <pattern>}
{mem compare} {The mem compare command compare selected memory to reference memory or file.} {{[-mem <ref_mem>] | [-file <ref_file>]} [actual_mem]} 
{mem display} {The mem display command prints to the Transcript pane the memory contents of the specified instance. As a shorthand, if the given instance path contains only a single array signal or variable, the signal or variable name need not be specified.} {[-format [bin | hex | mti]] [-addressradix <radix>] [-dataradix <radix_type>] [-wordsperline <n>] [-startaddress <st>] [-endaddress <end>] [-noaddress] [-compress] [<path>]} 
{mem list} {The mem list command displays a flattened list of all memory instances in the current or specified context after a design has been elaborated.} {[-r] [<path>]}
{mem load} {The mem load command updates the simulation memory contents of a specified instance. You can upload contents either from a memory data file, a memory pattern, or both. If both are specified, the pattern is applied only to memory locations not contained in the file.} {-infile <infile> [-endaddress <end>] [-filltype < dec | inc | rand | value> -filldata <mem_word>] [-fillradix <radix>] [-format [bin | hex | mti]] [<path>] [-skip <Nwords>] [-startaddress <st>] [-truncate]} 
{mem save} {The mem save command saves the contents of a memory instance to a file in any of the supported formats: Verilog binary, Verilog hex, and MTI memory pattern data.} {[-format bin | hex | mti] [-addressradix <radix>] [-dataradix <radix_type>] [-wordsperline <Nwords>] [-startaddress <st> -endaddress <end>] [-noaddress] [-compress] [<path>] -outfile <filename>} 
{mem search} {The mem search command finds and prints to the screen the first occurring match of a specified memory pattern in the specified memory instance. Shorthand instance names are accepted.} {[-addressradix <radix>] [-dataradix <radix_type>] [-all] [-replace <word>[ <word>...]] [-startaddress <address>] [-endaddress <address>] [<path>] {-glob <word>[<word>...] | -regexp <word>[<word>...]}} 
{messages clearfilter} {The messages clearfilter command clears any filters loaded into the Message Viewer} {-noargs-}
{messages setfilter} {The messages setfilter command is echoed to the transcript after creating a filter in the Message Viewer for you to reuse as necessary, where tcl_list defines the filter.} { <tcl_list>}
modelsim {The modelsim command starts the ModelSim GUI without prompting you to load a design.} {[-do <macrofile>] [-nosplash]}
noforce {The noforce command removes the effect of any active force commands on the selected HDL objects.} {<object_name> ...}
nolog {The nolog command suspends writing of data to the wave log format (WLF) file for the specified signals.} {[-all] [-depth <level>] [-howmany] [-in] [-inout] [-internal] [-out] [-ports] [-recursive] [-reset] [<object_name>...]}
notepad {The notepad command opens a simple text editor. It may be used to view and edit ASCII files or create new files.} {[<filename>] [-r | -edit]}
noview {The noview command closes a window/pane in the ModelSim GUI. To open a window/pane, use the view command.} {[<class>] [<window_name>...]}
nowhen {The nowhen command deactivates selected when commands.} {[<label>]}
onbreak {The onbreak command is used within a macro, which must be followed by a run command to take effect. It specifies one or more commands to be executed when running a macro that encounters a breakpoint in the source code.} {{[<command> [; <command>] ...]}}
onElabError {The onElabError command specifies one or more commands to be executed when an error is encountered during vsim elaboration. The command is used by placing it within a macro.} {{[<command> [; <command>] ...]}}
onerror {The onerror command is used within a macro, placed before a run command; it specifies one or more commands to be executed when a running macro encounters an error. The onerror command is executed when a Tcl command encounters an error in the macro file that contains the onerror command (note that a run command does not necessarily need to be in process).} {{[<command> [; <command>] ...]}}
onfinish {The onfinish command controls the simulator's behavior when encountering a $finish or sc_stop() in the design code} {ask | exit | final | stop}
pause {The pause command placed within a macro interrupts the execution of that macro.} {-noargs-}
pop {The pop command moves the specified number of call frames up the C callstack.} {<#_of_levels>}
precision {The precision command determines how real numbers display in the graphic interface (e.g., Objects, Wave, Locals, and List windows). It does not affect the internal representation of a real number and therefore precision values over 17 are not allowed.} {[<digits>[#]]}
printenv {The printenv command prints to the Transcript pane the current names and values of all environment variables.} {[<var>...]}
{process report} {The process report command creates a textual report of all processes displayed in the Process window.} {[-file <filename>] [-append]}
{profile clear} {The profile clear command clears any performance data that has been gathered during previous run commands.} {-noargs-}
{profile interval} {The profile interval command selects the frequency with which the profiler collects samples during a run command. To use this command, first enable profiling with the profile on command.} {[<sample_frequency>]}
{profile off} {The profile off command disables runtime memory allocation and statistical performance profiling.} {[-m] [-p]}
{profile on} {The profile on command enables runtime memory allocation and statistical performance profiling.} {[-m] [-p] [-file <filename> | -fileonly <filename>]]}
{profile open} {The profile open command opens a previously saved profile database.} {<filename>}
{profile option} {The profile option command changes how profiling data are reported. The command acts like a toggle: invoking it once turns on the option; invoking it a second time turns the option back off.} {collapse_sections [on | off | status] collect_calltrees [on | off]}
{profile reload} {The profile reload command reads in raw profile data from an external file created during memory allocation profiling. The profile report command and the Profile and Profile Details panes of the user interface can be used to view the data. The intent of the raw profile files is to allow analysis of memory profile data in cases where the memory required for the design plus the memory required for internal profiling data exceeds the memory capacity of the machine.} {<filename>}
{profile report} {The profile report command outputs profiling data that have been gathered up to the point that you execute the command.} {[-ranked | -calltree | -du [<du_name> | -showcalls] | -structural [-level <positive_integer>] [<rootname>] [-showcalls] | -callercallee <func> | -functoinst <func> | -instofdef <inst> [-inclusiveDuMatch 0|1]] -cutoff <percentage>] [-file <filename>] [-m] [-p]}
{profile save} {The profile save command saves profile database.} {<filename>}
project {The project command is used to perform common operations on projects. Some of the project commands must be used outside of a simulation session.} {[addfile <filename> [<file_type>] [<folder_name>]] | [addfolder <foldername> [<folder_parent>]] | [calculateorder] | [close] | [compile] | [compileall [-n]] | [compileorder] | [compileoutofdate [-n]] | [delete <filename>] | [env] | [history] | [new <home_dir> <proj_name> [<defaultlibrary>] [<initialini>] [reference]] | [open <project>] | [removefile <filename>]}
push {The push command moves the specified number of call frames down the C callstack.} {<#_of_levels>}
pwd {The Tcl pwd command displays the current directory path in the Transcript pane.} {-noargs-}
quietly {The quietly command turns off transcript echoing for the specified command.} {<command>}
quit {The quit command exits the simulator.} {[-f | -force] [-sim] [-code <integer>]}
radix {The radix command specifies the default radix to be used for the current simulation.} {[-symbolic | -binary | -octal | -decimal | -hexadecimal | -unsigned | -ascii | -time] [-enumnumeric | -enumsymbolic]}
{radix define} {The radix define command is used to create or modify a user-defined radix.} {<name> <definition_body> [-color <value>]}
{radix names} {The radix names command returns a list of currently defined radix names.} {-noargs-}
{radix list} {The radix list command will return the complete definition of a radix, if a name is given. If no name is given, it will list all the defined radicies.} {[<name>]}
{radix delete} {The radix delete command will remove the radix definition from the named radix.} {<name>}
readers {The readers command displays the names of all readers of the specified object.} {<object_name>}
report {The report command displays information relevant to the current simulation.} {files | where | simulator control | simulator state}
restart {The restart command reloads the design elements and resets the simulation time to zero. Only design elements that have changed are reloaded. (Note that SDF files are always reread during a restart.)} {[-force] [-nobreakpoint] [-nofcovers] [-nolist] [-nolog] [-nowave]}
resume {The resume command is used to resume execution of a macro file after a pause command or a breakpoint.} {-noargs-}
run {The run command advances the simulation by the specified number of timesteps.} {<timesteps>[<time_units>] | -all | -continue | -init | -next | -step | -over}
runStatus {The runStatus returns the current state of your simulation after issuing a run or step command.} {[-full]}
sccom {The sccom command is actually two commands in one: sccom interacts with a C/C++ compiler to compile SystemC source code into the work library, and sccom -link takes the compiled source code and links the design.} {[-93] [<CPP compiler options>] [<CPP linker options>] [-archive] [-dpilib <libname>] [-dumpscvext] [-error <msg_number> [,<msg_number>,...]] [-f <filename>] [-fatal <msg_number> [,<msg_number>, ...]] [-help] [-incr] [-lib <compiled library>] [-link] [-log <logfile>] [-modelsimini <ini_filepath>] [-nodbgsym] [-nodebug] [-nologo] [-note <msg_number> [,<msg_number>,...]] [-scms] [-scv] [-scversion] [-suppress <msg_number> [,<msg_number>,...]] [-vv] [-verbose] [-version] [-warning <msg_number> [,<msg_number>,...]] <filename>}
scgenmod {Once a Verilog or VHDL module is compiled into a library, you can use the scgenmod command to write its equivalent SystemC foreign module declaration to standard output.} {[-help] [-lib <library_name>] [-map "<hdl_type>=<sc_type>"] [-modelsimini <ini_filepath>] [-createtemplate] <module_name>}
searchlog {The searchlog command searches one or more of the currently open logfiles for a specified condition.} {[-count <n>] [-deltas] [-endtime <time>] [-env <path>] [-expr {<expr>}] [-reverse] [-rising | -falling | -anyedge] [-startDelta <num>] [-value <string>] <startTime> <pattern>}
see {The see command displays the specified number of source file lines around the current execution line.} {[<n> | <pre> <post>]}
setenv {The setenv command changes or reports the current value of an environment variable. The setting is not persistent-it is valid only for the current ModelSim session.} {<varname> [<value>]}
shift {The shift command shifts macro parameter values left one place, so that the value of parameter \$2 is assigned to parameter \$1, the value of parameter \$3 is assigned to \$2, etc. The previous value of \$1 is discarded.} {-noargs-}
show {The show command lists HDL objects and subregions visible from the current environment.} {[-all] [<pathname>]}
simstats {The simstats command returns performance-related statistics about elaboration and simulation. The statistics measure the simulation kernal process (vsimk) for a single invocation of vsim. If you invoke vsim a second time, or restart the simulation, the current statistics are discarded and new values are collected.} {[memory | working | time | cpu | context | faults]}
status {The status command lists summary information about currently interrupted macros.} {[file | line]}
step {The step command steps to the next HDL or C statement. Current values of local HDL variables may be observed at this time using the Locals window.} {[<n>] [-inst <path>] [-out] [-over] [-this "this==<handle>]}
stop {The stop command is used with the when command to stop simulation in batch files.} {-noargs-}
suppress {The suppress command prevents the specified message(s) from displaying.} {[-clear <msg_number>[,<msg_number>,...]] [<msg_number>[,<msg_number>,?]] }
tb {The tb (traceback) command displays a stack trace for the current process in the Transcript pane. This lists the sequence of HDL function calls that have been entered to arrive at the current state for the active process.} {[<#_of_levels>]} 
eqTime {Returns a 1 (true) or 0 (false) if <time1> and <time2> are equal.} {<time1> <time2>}
neqTime {Returns a 1 (true) or 0 (false) if <time1> and <time2> are not equal.} { <time1> <time2>}
ltTime {Returns a 1 (true) or 0 (false) if <time1> is less than <time2>.} {<time1> <time2>}
gtTime {Returns a 1 (true) or 0 (false) if <time1> is greater than <time2>.} {<time1> <time2>}
lteTime {Returns a 1 (true) or 0 (false) if <time1> is less than or equal to <time2>.} {<time1> <time2>}
gteTime {Returns a 1 (true) or 0 (false) if <time1> is greater than or equal to <time2>.} {<time1> <time2>}
addTime {Returns the value of adding <time1> to <time2>} {<time1> <time2}
subTime {Returns the value of subtracting <time2> from <time1>} {<time1> <time2>}
mulTime {Returns the value of multiplying <time1> by an <integer>} {<time1> <integer>}
divTime {Returns an integer, which is the value of dividing <time1> by <time2>} {<time1> <time2>}
intToTime {Returns a 64-bit time value based on two 32-bit parts of a 64-bit integer} {<high_32bit_int> <low_32bit_int>}
scaleTime {Returns a time value scaled by a real number and truncated to the current time resolution.} { <time1> <scale_factor>}
RealToTime {Returns a time value equivalent to the specified real number and truncated to the current time resolution.} {<real>}
validTime {Returns a 1 (true) or 0 (false) if the given string is a valid time for use with any of the Time calculations.} {<time>}
formatTime {Sets display properties for time values.} {+ | - commas | + | - nodefunit | + | -bestunits}
{toggle add} {The toggle add command enables collection of toggle statistics for the specified nodes.} {[-exlcude {<list>}] [-full] [-in] [-inout] [-internal] [-out] [-ports] [-r] [-unique] <node_name>} 
{toggle disable} {The toggle disable command disables toggle statistics collection on the specified nodes. The command provides a method of implementing coverage exclusions for toggle coverage.} {[-all] | [-in] [-out] [-inout] [-internal] [-ports] [-r] <node_name>}
{toggle enable} {The toggle enable command re-enables toggle statistics collection on nodes whose toggle coverage had previously been disabled via the toggle disable command.} {[-all] | [-in] [-out] [-inout] [-internal] [-ports] [-r] <node_name>}
{toggle report} {The toggle report command displays a list of all unique nodes that have not transitioned to both 0 and 1 at least once, and the counts for how many times each node toggled for each state transition type.} {[-instance <path> [-recursive]] [-onexit] [<signal>?] [-summary] [-top] [-verbose]}
{toggle reset} {The toggle reset command resets the toggle counts to zero for the specified nodes.} {[-all] | [-in] [-out] [-inout] [-internal] [-ports] [-r] <node_name>}
{tr color} {The tr color command sets the color scheme of individual transactions and entire transaction streams, for a specific wave window or all wave windows.} {{-stream <stream> [<stream>]... | -transaction <uid> [<uid>]...} [-attrbg <color>] [-attrtext <color>] [-border <color>] [-color <color>] [-default] [-get] [-inactive <color>] [-namebg <color>] [-nametext <color>] [-win <wave>] {<uid> | <stream>}}
{tr uid} {The tr uid command returns a list of UIDs (dataset name and transaction serial number) for active transactions during a specified time span on the specified streams.} {[-start <time> -end <time> <stream> [<stream>]...] | [-time <time> <stream>]}
{tr order} {The tr order command controls which attributes are visible in a transaction and the order in which they appear.} { [[-attributes <attrs>] [-default]] [-win <wave>] <stream>... ] | [ [-hidden] [-visible] [-win <wave>] <stream> {<stream>]... ] }}
transcript {The transcript command controls echoing of commands executed in a macro file.} {[on | off | -q | quietly]}
{transcript file} {The transcript file command sets or queries the pathname for the transcript file. You can use this command to clear a transcript in batch mode or to limit the size of a transcript file. It offers an alternative to setting the PrefMain(file) Tcl preference variable.} {[<filename>]}
tssi2mti {The tssi2mti command is used to convert a vector file in Fluence Technology (formerly TSSI) Standard Events Format into a sequence of force and run commands.} {<signal_definition_file> [<sef_vector_file>]}
ui_VVMode {The ui_VVMode command specifies the product's behavior when encountering UI registration calls used by verification packages.} {off | nolog | full}
unsetenv {The unsetenv command deletes an environment variable. The deletion is not permanent-it is valid only for the current ModelSim session.} {<varname>}
{vcd add} {The vcd add command adds the specified objects to a VCD file.} {[-r] [-in] [-out] [-inout] [-internal] [-ports] [-file <filename>] [-dumpports] <object_name> ...}
{vcd checkpoint} {The vcd checkpoint command dumps the current values of all VCD variables to the specified VCD file. While simulating, only value changes are dumped.} {[<filename>]}
{vcd comment} {The vcd comment command inserts the specified comment in the specified VCD file.} {<comment string> [<filename>]}
{vcd dumpports} {The vcd dumpports command creates a VCD file that includes port driver data.} {[-compress] [-direction] [-file <filename>] [-force_direction] [-in] [-inout] [-out] [-no_strength_range] [-unique] [-vcdstim] <object_name> ...}
{vcd dumpportsall} {The vcd dumpportsall command creates a checkpoint in the VCD file which shows the value of all selected ports at that time in the simulation, regardless of whether the port values have changed since the last timestep.} {[<filename>]}
{vcd dumpportsflush} {The vcd dumpportsflush command flushes the contents of the VCD file buffer to the specified VCD file.} {[<filename>]}
{vcd dumpportslimit} {The vcd dumpportslimit command specifies the maximum size of the VCD file (by default, limited to available disk space). When the size of the file exceeds the limit, a comment is appended to the file and VCD dumping is disabled.} {<dumplimit> [<filename>]}
{vcd dumpportsoff} {The vcd dumpportsoff command turns off VCD dumping and records all dumped port values as x.} {[<filename>]}
{vcd dumpportson} {The vcd dumpportson command turns on VCD dumping and records the current values of all selected ports. This command is typically used to resume dumping after invoking vcd dumpportsoff.} {[<filename>]}
{vcd file} {The vcd file command specifies the filename and state mapping for the VCD file created by a vcd add command.} {[-dumpports] [-direction] [<filename>] [-map <mapping pairs>] [-no_strength_range] [-nomap] [-unique]}
{vcd files} {The vcd files command specifies a filename and state mapping for a VCD file created by a vcd add command.} {[-compress] [-direction] <filename> [-map <mapping pairs>] [-no_strength_range] [-nomap] [-unique]}
{vcd flush} {The vcd flush command flushes the contents of the VCD file buffer to the specified VCD file. This command is useful if you want to create a complete VCD file without ending your current simulation.} { [<filename>]}
{vcd limit} {The vcd limit command specifies the maximum size of a VCD file (by default, limited to available disk space).} {<filesize> [<filename>]}
{vcd off} {The vcd off command turns off VCD dumping to the specified file and records all VCD variable values as x.} { [<filename>]}
{vcd on} {The vcd on command turns on VCD dumping to the specified file and records the current values of all VCD variables.} { [<filename>]}
vcd2wlf {vcd2wlf is a utility that translates a VCD (Value Change Dump) file into a WLF file that can be displayed in ModelSim using the vsim -view argument.} {[-splitio] [-splitio_in_ext <extension>] [-splitio_out_ext <extension>] <vcd filename> <wlf filename>}
vcom {The vcom command compiles VHDL source code into a specified working library (or to the work library by default). Type 'vcom -help' for complete syntax.} {-noargs-}
{vcover attribute} {The vcover attribute command is used to display or set attributes in the currently loaded database, during batch mode simulation} {[-test <testname>] [-seed <str>] [-command <str>] [-comment <str>] [-compulsory [0|1]] [-tcl] [-concise] [-modelsimini <ini_filepath>] [-name <str>]+ [-value <str>]+ }
{vcover merge} {The vcover merge command merges multiple code coverage data files that were created with the coverage save command .} {[-and] [-append] [-inputs <file>] [-install <path>] [-log <filename>] [-notagging] [-strip <n>] [[-instance <path> [-recursive]] | [-du <du_name> [-recursive]] [-ignoredusig] [-modelsimini <ini_filepath>] [-quiet] [-totals |-testassociated ] [-verbose] ([-out] <outfile>) <file1> [<file2> ...<filen>]}
{vcover ranktest} {The vcover ranktest command ranks the specified input UCDB files according to their contribution to cumulative coverage.} {<rankest_options> {<UCDB_inputfile1> [... <UCDB_inputfileN>]} [-ranktest <filename>] [-inputs <file_list>] [-log <filename>] [<coverage_type (as [-code {b|c|e|s|t|f}...] [-codeAll] ) >] [-goal {<coverage_type> <RealNum>] | <RealNum>}] [-weight <coverage_type> <integer>] [-maxcpu <real_num_in_seconds>] [-maxtests <int>] [-precision] [-fewest | -cputime | -simtime] [-modelsimini <ini_filepath>] [[-path <path> | -du <du_name> | -plansection <path>]] [-keepmergefile <filepath>] [-iterative | -testassociated] [-quiet] | [-concise] | [-verbose] }
{vcover report} {The vcover report command produces textual output of coverage statistics from a previously saved code coverage run. This allows you to produce reports in an "offline" manner (i.e., without having to load a simulation.) Type 'vcover report -help' for complete syntax.} {-noargs-}
{vcover stats} {The vcover stats command computes and prints to stdout summary statistics for previously saved code coverage databases. It can be invoked within the ModelSim GUI or at the command line.} {[-assert] [-code [bcefst]] [-inputs <pathname>] [-modelsimini <ini_filepath>] [-precision <int>] [-precision <int>] <file1> [<file2> <filen>?]}
{vcover testnames} {The vcover testnames command displays the testnames in the currently loaded UCDB file. If it is a merged file, it gives you a list of tests in the merged file.} {vcover testnames [-tcl]}
vdel {The vdel command deletes a design unit from a specified library.} {[-help] [-lib <library_name>] [-modelsimini <ini_filepath>] [-verbose] [-all | <design_unit> [<arch_name>] | -allsystemc]}
vdir {The vdir command lists the contents of a design library.} {[-help] [-l | [-prop <prop>]] [-r] [-all | [-lib <library_name>]] [-modelsimini <ini_filepath>] [<design_unit>]}
vencrypt {The vencrypt command encrypts Verilog and SystemVerilog code contained within encryption envelopes. The Verilog code is not pre-processed before encryption, so macros and other `directives are unchanged.} {<filename> [-d <dirname>] [-e <extension>] [-f <filename>] [-h <filename>] [-help] [-l <filename>] [-o <filename>] [-p <prefix>] [-quiet]}
verror {The verror command prints a detailed description about a message number. It may also point to additional documentation related to the error.} {\{[-fmt|-tag|-fmt -tag|-full] \{<msgNum> ... | [-tool <tool>] -all\} | -ranges | -help\}}
vgencomp {Once a Verilog module is compiled into a library, you can use the vgencomp command to write its equivalent VHDL component declaration to standard output.} {[-help] [-lib <library_name>] [-b] [-modelsimini <ini_filepath>] [-s] [-v] <module_name>}
view {The view command displays a stand-alone window or Main window pane.} {[-aliases] [-height <n>] [-icon] [-names] [-title {New Window Title}] [-undock | -dock] [-width <n>] [-x <n>] [-y <n>] <window_type>...}
{virtual count} {The virtual count command counts the number of currently defined virtuals that were not read in using a macro file.} {[-kind <kind>] [-unsaved]}
{virtual define} {The virtual define command prints to the Transcript pane the definition of the virtual signal or function in the form of a command that can be used to re-create the object.} {[-kind <kind>] <pathname>}
{virtual delete} {The virtual delete command removes the matching virtuals.} {[-kind <kind>] <pathname>}
{virtual describe} {The virtual describe command prints to the Transcript pane a complete description of the data type of one or more virtual signals.} {[-kind <kind>] <pathname>}
{virtual expand} {The virtual expand command produces a list of all the non-virtual objects contained in the specified virtual signal(s).} {[-base] <pathname>}
{virtual function} {The virtual function command creates a new signal, known only by the GUI (not the kernel), that consists of logical operations on existing signals and simulation time, as described in <expressionString>.} {[-env <path>] [-install <path>] [-delay <time>] {<expressionString>} <name>}
{virtual hide} {The virtual hide command causes the specified real or virtual signals to not be displayed in the Objects window. This is used when you want to replace an expanded bus with a user-defined bus.} {[-kind <kind>]|[-region <path>] <pattern>}
{virtual log} {The virtual log command causes the simulation-mode dependent signals of the specified virtual signals to be logged by the kernel.} {[-kind <kind>] | [-region <path>] [-recursive] [-only] [-in] [-out] [-inout] [-internal] [-ports] <pattern>}
{virtual nohide} {The virtual nohide command reverses the effect of a virtual hide command, causing the specified real or virtual signals to reappear the Objects window.} {[-kind <kind>]|[-region <path>] <pattern>}
{virtual nolog} {The virtual nolog command reverses the effect of a virtual log command. It causes the simulation-dependent signals of the specified virtual signals to be excluded ("unlogged") by the kernel.} {[-kind <kind>] | [-region <path>] [-recursive] [-only] [-in] [-out] [-inout] [-internal] [-ports] <pattern>}
{virtual region} {The virtual region command creates a new user-defined design hierarchy region.} {<parentPath> <regionName>}
{virtual save} {The virtual save command saves the definitions of virtuals to a file.} {[-kind <kind>] [-append] [<filename>]}
{virtual show} {The virtual show command lists the full path names of all explicitly defined virtuals.} {[-kind <kind>]}
{virtual signal} {The virtual signal command creates a new signal, known only by the GUI (not the kernel), that consists of concatenations of signals and subelements as specified in <expressionString>.} {[-env <path>] [-install <path>] [-delay <time>] {<expressionString>} <name>}
{virtual type} {The virtual type command creates a new enumerated type, known only by the GUI, not the kernel. Virtual types are used to convert signal values to character strings. The command works with signed integer values up to 64 bits.} {-delete <name> | {<list_of_strings>} <name>}
vlib {The vlib command creates a design library. You must use vlib rather than operating system commands to create a library directory or index file.} {[-archive [-compact <percent>]] [-format {1|3}] [-help] [-dos | -short | -unix | -long] [-lock | -unlock] [-locklib | -unlocklib] <name>}
vlog {The vlog command compiles Verilog source code and SystemVerilog extensions into a specified working library (or to the work library by default). Type 'vlog -help' for complete syntax} {-noargs}
vmake {The vmake utility allows you to use a UNIX or Windows MAKE program to maintain libraries. You run vmake on a compiled design library, and the utility outputs a makefile. You can then run the makefile with a version of MAKE (not supplied with ModelSim) to reconstruct the library. This command must be invoked from either the UNIX or the Windows/DOS prompt.} {[-du <design_unit_name>] [-f <filename>] [-fullsrcpath] [-help] [-ignore] [-modelsimini <ini_filepath>] [<library_name>]}
vmap {The vmap command defines a mapping between a logical library name and a directory by modifying the modelsim.ini file.} {[-help] [-c] [-del] [<logical_name>] [<path>]}
vsim {The vsim command invokes the VSIM simulator or displays the results of a previous simulation run (when invoked with the -view switch). Type 'vsim -help' for complete syntax.} {-noargs-}
vsimAuth {Returns the authorization level (PE/SE, VHDL/Verilog/PLUS).} {-noargs-} 
vsimDate {Returns the date the executable was built, such as "Apr 10 2000".} {-noargs-} 
vsimId {Returns the identifying string, such as "ModelSim 6.1".} {-noargs-} 
vsimVersion {Returns the version as used by the licensing tools, such as "1999.04".} {-noargs-} 
vsimVersionString {Returns the full vsim version string.} {-noargs-} 
vsim_break {Interrupt running simulation.} {-noargs-} 
vsource {The vsource command specifies an alternative file to use for the current source file.} {[<filename>]} 
{wave activecursor} {Sets the active cursor to the specified cursor or, if no cursor is specified, reports the active cursor} {[-window <win>] [<cursor-num>]}
{wave addcursor} {Adds a new cursor at specified time and returns the name, number, and lock state of the newly added cursor} {[-window <win>] [-time <time>] [-name <name>] [-lock <0|1>] }
{wave collapse all} {Collapses simulation time over the full range of the simulation from time 0 to the current time} {[-window <win>]}
{wave collapse cursor} {Collapses simulation time at the time of the active cursor} {[-window <win>] [<cursor-num>]}
{wave collapse range} {Collapses simulation time over a specified simulation time range} {[-window <win>] <start-time> <end-time>}
{wave configcursor} {Examine or specify the wave cursor configuration} {[<cursor-num>] [-window <win>] [<option> [<value>]]}
{wave cursortime} {Moves or reports the time of the specified cursor or, if no cursor is specified, the time of the active cursor} {[-window <win>] [-time <time>] [<cursor-num>]}
{wave deletecursor} {Deletes the specified cursor or, if no cursor is specified, the active cursor} {[-window <win>] [<cursor-num>]}
{wave expand all} {Expands simulation time over the full range of the simulation from time 0 to the current time} {[-window <win>]}
{wave expand cursor} {Expands simulation time at the time of the active cursor} {[-window <win>] [<cursor-num>]}
{wave expand mode} {Specifies the expanded time display mode for the Wave window} {[-window <win>] [off | deltas | events]}
{wave expand range} {Expands simulation time over the specified simulation range} {[-window <win>] <start-time> <end-time>}
{wave interrupt} {Immediately stops wave window drawing} {[-window <win>]}
{wave refresh} {Cleans wave display and redraws waves} {[-window <win>]}
{wave seecursor} {Positions the wave display such that the specified or active cursor appears at the specified percent from the left edge of the display - 0% is the left edge, 100% is the right edge.} {[-window <win>] [-at <percent>] [<cursor-num>]}
{wave seetime} {Positions the wave display such that the specified time appears at the specified percent from the left edge of the display - 0% is the left edge, 100% is the right edge.} {[-window <win>] [-at <percent>] <time>}
{wave zoomin} {Zoom in the wave display by the specified factor. The default factor is 2.0.} {[-window <win>] [<factor>]}
{wave zoomout} {Zoom out the wave display by the specified factor. The default factor is 2.0.} {[-window <win>] [<factor>]}
{wave zoomfull} {Zoom the wave display to show the full simulation time.} {[-window <win>]}
{wave zoomlast} {Return to last zoom range.} {[-window <win>]}
{wave zoomrange} {Sets left and right edge of wave display to the specified start time and end time. If times are not specified, reports left and right edge times.} {[-window <win>] [<start-time>] [<end-time>]}
when {The when command instructs ModelSim to perform actions when the specified conditions are met.} {[[-label <label>] [-id <id#>] {<when_condition_expression>} {<command>}]}
where {The where command displays information about the system environment. This command is useful for debugging problems where ModelSim cannot find the required libraries or support files.} {-noargs-}
wlf2log {The wlf2log command translates a ModelSim WLF file (vsim.wlf) to a QuickSim II logfile.} {[-bits] [-fullname] [-help] [-inout] [-input] [-internal] [-l <instance_path>] [-lower] [-o <outfile>] [-output] [-quiet] <wlffile>}
wlf2vcd {The wlf2vcd command translates a ModelSim WLF file to a standard VCD file. Complex data types that are unsupported in the VCD standard (records, memories, etc.) are not converted.} {[-help] [-o <outfile>] [-quiet] <wlffile>}
wlfman {The wlfman command allows you to get information about and manipulate WLF files. Type wlfman -h for usage information.} {-noargs-}
wlfrecover {The wlfrecover tool attempts to "repair" WLF files that are incomplete due to a crash or the file being copied prior to completion of the simulation. You can run the tool from the VSIM> or ModelSim> prompt or from a shell.} {<filename> [-force] [-q]}
{write format} {The write format command records the names and display options of the HDL objects currently being displayed in the Analysis, List, Memory, Message Viewer, Test Browser, and Wave windows. The write format radix command will create a single .do file that will recreate all debug windows and all bp and signal (when) breakpoints.} {analysis | list | memory | msgviewer | testbrowser | wave | restart <filename>}
{write list} {The write list command records the contents of the List window in a list output file.} {[-events] <filename>}
{write preferences} {The write preferences command saves the current GUI preference settings to a Tcl preference file. Settings saved include Wave, Objects, and Locals window column widths; Wave, Objects, and Locals window value justification; and Wave window signal name width.} {<preference file name>}
{write report} {The write report command prints a summary of the design being simulated including a list of all design units (VHDL configurations, entities, and packages, and Verilog modules) with the names of their source files.} {[[<filename>] [-l | -s]] | [-tcl]} 
{write timing} {The write timing command displays path delays and timing check limits, unadjusted for delay net delays, for the specified instance.} {[-recursive] [-file <filename>] [<instance_name1>?<instance_nameN>] [-simvalues]}
{write transcript} {The write transcript command writes the contents of the Transcript pane to the specified file. The resulting file can be used to replay the transcribed commands as a DO file (macro).} {[<filename>]}
{write tssi} {The write tssi command records the contents of the  List window in a "TSSI format" file.} {<filename>}
{write wave} {The write wave command records the contents of the Wave window in PostScript format.} {[-width <real_num>] [-height <real_num>] [-margin <real_num>] [-start <time>] [-end <time>] [-perpage <time>] [-landscape] [-portrait] <filename>}
{xml2ucdb} {xml2ucdb is a utility used to convert an XML file to a UCDB file.} {<XML_file> <ucdb_filename> [-help] [-debug] [-verbose] [-version] [-viewtags] [-viewall] [-formatlist] [-format <format>] [-excelsheet <sheetname>] [-dofilename <file>] [-ucdbfilename <filename>] [-inherit] [-modelsimini <ini_filepath>] [-stylesheet] [-tagseparators <str>] [-starttags <tags>] [-stoptags <tags>] [-excludetags <tags>] [-sectiontags <tag>] [-datatags <tag>] [-titletag <tag>] [-descriptiontag <tag>] [-goaltag <tags>] [-weighttag <tags>] [-linktag <tag>] [-typeattr <name>] [-linkattr <tag>] [-datafields <str>] [-datalabels] ([-autonumber] | [-noautonumber]) [-startsection <num>] [-startstoring <num>] [-root <str>] [-title <str>] [-tagprefix <str>] [-sectionprefix <str>] }

