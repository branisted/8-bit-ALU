Mentor Graphics Technical Note
Copyright 1991-2009 Mentor Graphics Corporation
All Rights Reserved.

This document contains information that is proprietary to Mentor Graphics
Corporation. The original recipient of this document may duplicate this
document in whole or in part for internal business purposes only, provided
that this entire notice appears in all copies. In duplicating any part of
this document, the recipient agrees to make every reasonable effort to
prevent the unauthorized use and distribution of the proprietary information.

Trademarks that appear in Mentor Graphics product publications that are not
owned by Mentor Graphics are trademarks of their respective owners.


IEEE 1800-2005 SystemVerilog Features Supported in ModelSim 6.4b
==============================================================================

Section 1: Overview

Section 2: Normative references

Section 3: Literal values
------------------------------------------------------------------------------
3.1       Introduction
3.2       Literal syntax
3.3       Integer & logic literals
3.4       Real literals
3.5       Time literals
3.6       String literals
3.7       Array literals
3.8       Structure literals

Section 4: Data Types
------------------------------------------------------------------------------
4.1       Introduction
4.2       Data type syntax
4.3       Integer data type
4.3.1     Integral types
4.3.2     2-state (two-value) and 4-state (four-value) data types
4.3.3     Signed and unsigned data types
4.4       Real & shortreal data types
4.5       Void data type
4.6       chandle data type
4.7       String data type
4.7.1     Len()
4.7.2     Putc()
4.7.3     Getc()
4.7.4     Toupper()
4.7.5     Tolower()
4.7.6     Compare()
4.7.7     Icompare()
4.7.8     Substr()
4.7.9     Atoi(), atohex(), atooct(), atobin()
4.7.10    Atoreal()
4.7.11    Itoa()
4.7.12    Hextoa()
4.7.13    Octtoa()
4.7.14    Bintoa()
4.7.15    Realtoa()
4.8       Event data type
4.9       User-defined data type
4.10      Enumerations
4.10.1    Defining new data types as enumerated types
4.10.2    Enumerated type ranges
4.10.3    Type checking
4.10.4    Enumerated types in numerical expressions
4.10.4.1  First()
4.10.4.2  Last()
4.10.4.3  Next()
4.10.4.4  Prev()
4.10.4.5  Num()
4.10.4.6  Name()
4.10.4.7  Using enumerated type methods
4.11      Structures & Unions
4.12      Classes
4.13      Singular and aggregate types
4.14      Casting
              * NOTE: As per a change in the 1800 LRM, a cast expression is
                no longer a self-determined expression.  For assignment
	        compatible types, it behaves just like an assignment.
4.15      $cast dynamic casting
4.16      Bit-stream casting
4.17      Default attribute type
              * NOT SUPPORTED

Section 5: Arrays
------------------------------------------------------------------------------
5.1       Introduction
5.2       Pack & unpacked arrays
5.3       Multiple dimensions
5.4       Indexing & slicing of arrays
5.5       Array querying functions
5.6       Dynamic arrays
5.6.1     New[]
5.6.2     Size()
5.6.3     Delete()
5.7       Array assignment
5.8       Arrays as arguments
5.9       Associative arrays
5.9.1     Wildcard index type
5.9.2     String index
5.9.3     Class index
5.9.4     Integer (or int) index
5.9.5     Signed packed array
5.9.6     Unsigned packed array or packed struct
5.9.7     Other user-defined types
5.10      Associative array methods
5.10.1    Num()
5.10.2    Delete()
5.10.3    Exists()
5.10.4    First()
5.10.5    Last()
5.10.6    Next()
5.10.7    Prev()
5.11      Associative array assignment
5.12      Associative array arguments
5.13      Associative array literals
5.14      Queues
5.14.1    Queue operators
5.14.2    Queue methods
5.14.2.1  Size()
5.14.2.2  Insert()
5.14.2.3  Delete()
5.14.2.4  Pop_front()
5.14.2.5  Pop_back()
5.14.2.6  Push_front()
5.14.2.7  Push_back()
5.15      Array manipulation methods
5.15.1    Array locator methods
5.15.2    Array ordering methods
5.15.3    Array reduction methods
5.15.4    Iterator index querying

Section 6: Data Declarations
------------------------------------------------------------------------------
6.1       Introduction
6.2       Data declaration syntax
6.3       Constants
6.3.1     Parameter declaration syntax
6.3.2     Value parameters
6.3.2.1   $ as a parameter value
6.3.3     Type parameters
6.3.4     Parameter port lists
6.3.5     Const constants
6.4       Variables
6.5       Nets
6.6       Scope & lifetime
6.7       Nets, regs, logic (continuous assignment to variables)
6.8       Signal aliasing
6.9       Type compatibility
6.9.1     Matching types
6.9.2     Equivalent types
6.9.3     Assignment compatible
6.9.4     Cast compatible
6.9.5     Type incompatible
6.10      Type operator

Section 7: Classes
------------------------------------------------------------------------------
7.1       Introduction
7.2       Syntax
              * rand and randc only supported in Questa
7.3       Overview
7.4       Objects (class instance)
              * No nesting of class declarations
7.5       Object properties
7.6       Object methods
7.7       Constructors
7.8       Static class properties
7.9       Static methods
7.10      This
7.11      Class assignment, re-naming, & copying
7.12      Inheritance & subclasses
7.13      Overridden members
7.14      Super
7.15      Casting ($cast)
7.16      Chaining constructors
7.17      Data hiding & encapsulation
7.18      Constant class properties
7.19      Abstract classes and virtual methods
          NOTE:
              * syntax for an unimplemented virtual method has been changed
                to "pure virtual"
7.20      Polymorphism: dynamic method lookup
7.21      Class scope resolution operator ::
7.22      Out-of-block declarations
              * Lifetime of method cannot be changed with external definition
                from default lifetime of the class
              * External method definitions cannot return a type parameter
              * Direct specification of parameterized class handle return
                types in external method definition not supported
7.23      Parameterized classes
7.24      Typedef class
7.25      Classes & structures
7.26      Memory management
              * Circular references are not garbage collected

Section 8: Operators and Expressions
------------------------------------------------------------------------------
8.1       Introduction
8.2       Operator syntax
8.3       Assignment operators
8.4       Operations on logic and bit types
8.5       Wild equality & wild inequality
8.6       Real operators
8.7       Size
8.8       Sign
8.9       Operator precedence and associatively
8.10      Built-in methods
8.10.1    Built-in package
8.11      Static prefixes
8.12      Concatenation
8.13      Assignment patterns
8.13.1    Array assignment patterns
8.13.2    Structure assignment patterns
8.14      Tagged union expressions & member access
              * Void members not supported
8.15      Aggregate expressions
8.16      Operator overloading
              * NOT SUPPORTED
8.17      Streaming operators (pack/unpack)
8.17.1    Streaming dynamically sized data
8.18      Conditional operator
8.19      Set membership
              * Wild card semantic of inside operator in a constraint not
                supported
              * Error reported for X or Z value in a constraint not supported

Section 9: Scheduling semantics
------------------------------------------------------------------------------
9.1       Execution of a hardware model and its verification environment
9.2       Event simulation
9.3       The statified event scheduler
9.3.1     The SystemVerilog simulation reference algorithm
9.4       The PLI callback control points
              * NOT SUPPORTED

Section 10: Procedural statements and control flow
------------------------------------------------------------------------------
10.1      Introduction
10.2      Statements
10.3      Blocking & nonblocking assignments
10.4      Selection statements
10.4.1    Pattern matching
10.4.1.1  Pattern matching in case statements
10.4.1.2  Pattern matching in if statements
10.4.1.3  Pattern matching in conditional expressions
10.5      Loop statements
10.5.1    The do...while loop
10.5.2    Enhanced for loop
10.5.3    The foreach loop
10.6      Jump statements
10.7      Final blocks
10.8      Named blocks and statement labels
10.9      Disable
10.10     Event control
10.10.1   Sequence events
              * ONLY supported in Questa
10.11     Level-sensitive sequence controls
              * ONLY supported in Questa
10.12     Procedural assign and deassign removal
              * NOT YET REMOVED

Section 11: Processes
------------------------------------------------------------------------------
11.1      Introduction
11.2      Combinational logic (always_comb)
11.2.1    Implicit always_comb sensitivities
11.3      Latched logic (always_latch)
11.4      Sequential logic (always_ff)
11.5      Continuous assignments
11.6      Fork ... join (all, any, none)
11.7      Process execution threads
11.8      Process control
11.8.1    Wait fork
11.8.2    Disable fork
11.9      Fine-grain process control

Section 12: Tasks and functions
------------------------------------------------------------------------------
12.1      Introduction (Multiple statements without begin/end)
12.2      Tasks
12.3      Functions
12.3.1    Return values and void functions
12.3.2    Discarding function return values
12.3.3    Constant function calls
12.4      Task and function argument passing
12.4.1    Pass by value
12.4.2    Pass by reference
12.4.3    Default argument values
12.4.4    Argument binding by name
12.4.5    Optional argument list
12.5      Import and export functions

Section 13: Random constraints
------------------------------------------------------------------------------

          * ONLY supported in Questa

Section 14: Interprocess synchronization and communication
------------------------------------------------------------------------------
14.1      Introduction
14.2      Semaphores
14.2.1    New()
14.2.2    Put()
14.2.3    Get()
14.2.4    Try_get()
14.3      Mailboxes
              * Untyped (singular type) mailbox not supported
14.3.1    New()
14.3.2    Num()
14.3.3    Put()
14.3.4    Try_put()
14.3.5    Get()
14.3.6    Try_get()
14.3.7    Peek()
14.3.8    Try_peek()
14.4      Parameterized mailboxes
14.5      Event
14.5.1    Triggering an event
14.5.2    Nonblocking event trigger
14.5.3    Waiting for an event
14.5.4    Persistent trigger: triggered property
14.6      Event sequencing: wait_order()
              * NOT SUPPORTED
14.7      Event variables
14.7.1    Merging events
14.7.2    Reclaiming events
14.7.3    Events comparison

Section 15: Clocking blocks
------------------------------------------------------------------------------
15.1      Introduction
15.2      Clocking blocks declarations
15.3      Input and output skews
15.4      Hierarchical expressions
15.5      Signals in multiple clocking blocks
15.6      Clocking block scope and lifetime
15.7      Multiple clocking block example
15.8      Interfaces and clocking blocks
15.9      Clocking block events
15.10     Cycle delay: ##
15.11     Default clocking
15.12     Input sampling
15.13     Synchronous events
15.14     Synchronous drives
15.14.1   Drives and nonblocking assignments
15.14.2   Drive value resolution
              
Section 16: Program block
------------------------------------------------------------------------------

          * ONLY supported in Questa

Section 17: Assertions
------------------------------------------------------------------------------
17.2      Immediate assertions

          * The remainder of the section is ONLY supported in Questa

Section 18: Coverage
------------------------------------------------------------------------------

          * ONLY supported in Questa

Section 19: Hierarchy
------------------------------------------------------------------------------
19.1      Introduction
19.2      Packages
19.2.1    Referencing data in packages
19.2.2    Search order rules
19.3      Compilation unit support - $unit
19.4      Top-level instance ($root)
19.5      Module declaration
19.6      Nested modules
19.7      Extern modules
19.8      Port declarations
19.9      List of port expressions
              * Complex named Port declarations not supported, for example:
                    module m (input .in(w_in),output .out(r_out));
                        wire w_in;
                        reg r_out;
                    endmodule
                    module m (input .P1(input int a));
                        logic [7:0] r;
                    endmodule
                    module m (input .P1(r[5:3]),.P2(r[1]),output .c(r[2:0]));
                        logic [7:0] r = 8'b00000000;
                    endmodule
                    module m (input .P1(r),.P2(r[1]),output int a);
                        logic [7:0] r;
                    endmodule
19.10     Time unit and precision
19.11     Module instances
19.11.1   Instantiation using positional port connections
19.11.2   Instantiation using named port connections
19.11.3   Instantiation using implicit .name port connections
19.11.4   Instantiation using implicit .* port connections
19.12     Port connection rules
19.12.1   Port connection rules for variables
19.12.2   Port connection rules for nets
19.12.3   Port connection rules for interfaces
19.12.4   Compatible port types
19.12.5   Unpacked array ports and arrays of instances
19.13     Name spaces
19.14     Hierarchical names ($root)

Section 20: Interfaces
------------------------------------------------------------------------------
20.1      Introduction
20.2      Interface syntax
20.2.1    Example without using interfaces
20.2.2    Interface example using a named bundle
20.2.3    Interface example using a generic bundle
20.3      Ports in interfaces
20.4      Modports
20.4.1    Example of named port bundle
20.4.2    Example of connecting port bundle
20.4.3    Example of connecting port bundle to generic interface
20.4.4    Modport expressions
20.4.5    Clocking blocks and modports
20.5      Interfaces and specify blocks
20.6      Tasks and functions in interfaces
20.6.1    Example of using tasks in interface
20.6.2    Example of using tasks in modports
20.6.3    Example of exporting tasks and functions
20.6.4    Example of multiple task exports
20.7      Parameterized interfaces
20.8      Virtual interfaces
20.8.1    Virtual interfaces and clocking blocks
20.8.2    Virtual interfaces modports and clocking blocks
20.9      Access to interface objects

Section 21: Configuration libraries
------------------------------------------------------------------------------
21.1      Introduction
21.2      Libraries
              * Configurations do not support interfaces

Section 22: System tasks and system functions
------------------------------------------------------------------------------
22.1      Introduction
22.2      Type name function ($typename)
              * NOT SUPPORTED
22.3      Expression size system function ($bits)
22.4      Range system function ($isunbounded)
22.5      Shortreal conversions
22.6      Array querying system functions ($dimension, $unpacked_dimensions,
          $left, $right, $low, $high, $increment, $size)
22.7      Assertion severity system tasks ($fatal, $error, $warning, $info)
              * ONLY supported in Questa
22.8      Assertion control system tasks ($assertion, $assertoff,
          $assertkill)
              * ONLY supported in Questa
22.9      Assertion system functions ($onehot, $onehot0, $isunknown)
              * ONLY supported in Questa
22.10     Random number system functions
              * ONLY supported in Questa
22.11     Program control
              * NOT SUPPORTED
22.12     Coverage system functions
              * NOT SUPPORTED
22.13     Enhancements to Verilog system tasks
              * NOT SUPPORTED
22.14     $readmemb & $readmemh
22.14.1   Reading packed data
22.14.2   Reading 2-state types
22.15     $writememb & $writememh
22.15.1   Writing packed data
22.15.2   Writing 2-state types
22.15.3   Writing addresses to output file
22.16     File format considerations for multi-dimensional unpacked arrays
22.17     System task arguments for multi-dimensional unpacked arrays

Section 23: Compiler directives
------------------------------------------------------------------------------
23.1      Introduction
23.2      `define macros
23.3      `include
23.4      `begin_keywords and `end_keywords

Section 24: Value change dump (VCD) data
------------------------------------------------------------------------------
24.1      Introduction
24.2      VCD extensions

Section 25: Deprecated constructs
------------------------------------------------------------------------------
25.1      Introduction
25.2      Defparam statements
              * NOT YET REMOVED - defparam statements are still supported but
                have undefined results for aggregate parameter types
25.3      Procedural assign and deassign removal
              * NOT YET REMOVED

Section 26: Direct programming interface (DPI)
------------------------------------------------------------------------------
26.1      Overview
26.1.1    Tasks and functions
26.1.2    Data types
26.1.2.1  Data representation
26.2      Two layers of the DPI
26.2.1    DPI SystemVerilog layer
26.2.2    DPI foreign language layer
26.3      Global name space of imported and exported functions
26.4      Imported tasks and functions
26.4.1    Required properties of imported tasks and functions - semantic
          constraints
26.4.1.1  Instant completion of imported functions
26.4.1.2  input, output, and inout arguments
26.4.1.3  Special properties pure and context
26.4.1.4  Memory management
26.4.1.5  Reentrancy of imported tasks
26.4.1.6  C++ exceptions
26.4.2    Pure functions
26.4.3    Context tasks and functions
26.4.4    Import declarations
26.4.5    Function result
26.4.6    Types of formal arguments
26.4.6.1  Open arrays
26.5      Calling imported functions
26.5.1    Argument passing
26.5.1.1  WYSIWYG principle
26.5.2    Value changes for output and inout arguments
26.6      Exported functions
26.7      Exported tasks
26.8      Disabling DPI tasks and functions

Section 27 - 30: API's
------------------------------------------------------------------------------
27        SystemVerilog VPI object model
              * Partially supported, see VPI technote
28        SystemVerilog assertion API
              * NOT SUPPORTED
29        SystemVerilog code coverage control and API
              * NOT SUPPORTED
30        SystemVerilog data read API
              * NOT SUPPORTED

Annex A - K
------------------------------------------------------------------------------
A         Formal syntax
B         Keywords
C         Std package
C.1       General
C.2       Semaphore
C.3       Mailbox
C.4       Randomize
C.5       Process
D         Linked lists
              * NOT SUPPORTED
E         Formal semantics of concurrent assertions
              * NOT APPLICIABLE
F         DPI C-layer
F.1       Overview
F.2       Naming conventions
F.3       Portability
F.4       svdpi.h include file
F.5       Semantic constraints
F.5.1     Types of formal arguments
F.5.2     Input arguments
F.5.3     Output arguments
F.5.4     Value changes for output and inout arguments
F.5.5     Context and noncontext tasks and functions
F.5.6     Pure functions
F.5.7     Memory management
F.6       Data types
F.6.1     Limitations
F.6.2     Duality of types: SystemVerilog types versus C types
F.6.3     Data representation
F.6.4     Basic types
F.6.5     Normalized and linearized ranges
F.6.6     Mapping between SystemVerilog ranges and C ranges
F.6.7     Canonical representation of packed arrays
F.6.8     Unpacked aggregate arguments
F.7       Argument passing modes
F.7.1     Overview
F.7.2     Calling SystemVerilog tasks and functions from C
F.7.3     Argument passing by value
F.7.4     Argument passing by reference
F.7.5     Allocating actual arguments for SystemVerilog-specific types
F.7.6     Argument passing by handle - open arrays
F.7.7     Input arguments
F.7.8     Inout and output arguments
F.7.9     Function result
F.7.10    String arguments
F.8       Context tasks and functions
F.8.1     Overview of DPI and VPI context
F.8.2     Context of imported and export tasks and functions
F.8.3     Working with DPI context tasks and functions in C code
F.8.4     Example 1 - Using DPI context functions
F.8.5     Relationship between DPI and either VPI or PLI
F.9       Include files
F.9.1     Include file svdpi.h
F.9.1.1   Scalars of type bit and logic
F.9.1.2   Canonical representation of packed arrays
F.9.1.3   Implementation-dependent representation
F.9.2     Example 2 - Simple packed array application
F.9.3     Example 3 - Application with complex mix of types
F.10      Arrays
F.10.1    Example 4 - Using packed 2-state arguments
F.10.2    Multidimensional arrays
F.10.3    Example 5 - Using packed struct and union arguments
F.10.4    Direct access to unpacked arrays
F.10.5    Utility functions for working with the canonical representation
F.11      Open arrays
F.11.1    Actual ranges
F.11.2    Array querying functions
F.11.3    Access functions
F.11.4    Access to actual representation
F.11.5    Access to elements via canonical representation
F.11.6    Access to scalar elements (bit and logic)
F.11.7    Access to array elements of other types
F.11.8    Example 6 - Two-dimensional open array
F.11.9    Example 7 - Open array
F.11.10   Example 8- Access to packed arrays
F.12      SV3.1a-compatible access to packed data (deprecated functionality)
              * NOT SUPPORTED
F.12.1    Determining the compatibility level of an implementation
              * NOT SUPPORTED
F.12.2    svdpi.h definitions for SV3.1a-style packed data processing
              * NOT SUPPORTED
F.12.3    Source-level compatibility include file svdpi_src.h
              * NOT SUPPORTED
F.12.4    Example 9 - Deprecated SV3.1a binary compatible application
              * NOT SUPPORTED
F.12.5    Example 10 - Deprecated SV3.1a source compatible application
              * NOT SUPPORTED
F.12.6    Example 11 - Deprecated SV3.1a binary compatible calls of export
          functions
              * NOT SUPPORTED
G         include file svdpi.h
H         Inclusion of Foreign Language Code
H.1       General
H.2       Location independence
H.3       Object code inclusion
H.3.1     Bootstrap file
H.3.2     Examples
I         sv_vpi_user.h
              * NOT SUPPORTED
J         Glossary
K         Bibliography
