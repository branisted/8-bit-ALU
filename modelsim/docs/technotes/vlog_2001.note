                        Model Technology Technical Note
			 Copyright 1991-2009 Mentor Graphics Corporation
						All Rights Reserved.

	This document contains information that is proprietary to 
	Mentor Graphics Corporation. The original recipient of this 
	document may duplicate this document in whole or in part for 
	internal business purposes only, provided that this entire 
	notice appears in all copies. In duplicating any part of this 
	document, the recipient agrees to make every reasonable 
	effort to prevent the unauthorized use and distribution of the 
	proprietary information.

	Trademarks that appear in Mentor Graphics product 
	publications that are not owned by Mentor Graphics are 
	trademarks of their respective owners.


  ModelSim supports the following IEEE 1364-2001 features: 

  o New File I/O tasks, command line args $test$plusargs and
    $value$plusargs
  o Full implementation of attributes
  o New commands in extended VCD
  o New compiler directives `ifndef and `line
  o Added the "**" operator
  o Allow a comma in place of "or"
  o Register declaration assignments
  o Full port declarations in Module port list
  o Local Parameters
  o Module parameters type, sign, and range
  o New `elsif compiler directive added (from Verilog-2001 presentation)
  o Signed and Unsigned functionality
  o Standard $random algorithm
     The probabilistic distribution functions have been
     reimplemented to conform to the Verilog 2001 standard.
     The behavior of $random() is not changed, but the other
     functions may produce different results in this release.
     The functions affected are $random(), $dist_uniform(),
     $dist_normal(), $dist_exponential(), $dist_poisson(),
     $dist_chi_square(), $dist_t(), and $dist_erlang().
  o Enhanced `uselib to create libraries and compile source files
  o On-event and On-detect pulse filtering
     A new specify block declaration has been added to
     control how pulse errors are propagated to outputs.
     Specifying "pulsestyle_ondetect" for an output will
     cause it to transition to X immediately upon detection
     of a pulse at the input, instead of transitioning to X
     at the scheduled time of the leading edge of the pulse.
     The keyword "pulsestyle_onevent" represents the default,
     unchanged behavior. For example:
       specify
         pulsestyle_ondetect out, out_b;
         (a => out) = (2, 3);
         (a => out_b) = (3, 4);
       endspecify
     This functionality can also be controlled globally using the
     existing vsim command line switch "+pulse_e_style_onevent".
     The command line switches take precedence over the specify
     block declarations.
  o Showcancelled and noshowcancelled pulse behavior
     A new specify block declaration has been added to
     control the scheduling of negative pulses.  If the
     delays for a module path are unequal, it is possible
     that the trailing edge of a pulse will be scheduled
     earlier than the leading edge, resulting in a pulse with
     a negative width.  Normally such pulses are cancelled,
     but specifying "showcancelled" for an output will
     schedule a transition to and from X over the duration of
     the negative pulse (trailing edge to leading edge).  The
     keyword "noshowcancelled" represents the default,
     unchanged behavior. For example:
       specify
         showcancelled out, out_b;
         (a => out) = (2, 3);
         (a => out_b) = (3, 4);
       endspecify
     This functionality can also be controlled globally using
     the new vsim command line switches "+show_cancelled_e"
     and "+no_show_cancelled_e". The command line switches
     take precedence over the specify block declarations.
  o The IEEE 1364-2001 versions of acc_user.h and veriuser.h are now
     shipped with ModelSim. The major differences between the new
     versions and the old versions are:
          + Types such as int, short, char, etc. are now typedef'd to PLI
            type names such as PLI_INT32.
          + There are export and import defines to aid compilation on
            different platforms.
          + The following functions in veriuser.h previously returned
            void, but now they return a value:
               o tf_add_long()
               o tf_asynchoff(), tf_iasynchoff()
               o tf_asynchon(), tf_iasynchon()
               o tf_clearalldelays(), tf_iclearalldelays()
               o tf_dofinish()
               o tf_dostop()
               o tf_error()
               o tf_evaluatep(), tf_ievaluatep()
               o tf_message()
               o tf_propagatep(), tf_ipropagate()
               o tf_putlongp(), tf_iputlongp()
               o tf_putp(), tf_iputp()
               o tf_putrealp(), tf_iputrealp()
               o tf_rosynchronize(), tf_irosynchronize()
               o tf_setworkarea(), tf_isetworkarea()
               o tf_subtract_long()
               o tf_synchronize(), tf_isynchronize()
               o tf_text()
               o tf_warning()
  o Implemented Verilog multi-dimensional arrays. This includes support
     for reg, integer, time, real, realtime, and net arrays
     (IEEE 1364-2001 Section 3.10).
  o Indexed part selection and assignment (IEEE 1364-2001 Section 4.2.1).
  o ANSI C style argument lists for tasks and functions
     (IEEE 1364-2001 Section 10.2.2).
  o Parameter list before port list in module definition
     (IEEE 1364-2001 Section 12.1).
  o Verilog parameter value assignment by name (IEEE 1364-2001 Section 12.2.2).
  o PLI routine tf_nodeinfo() will return ascending order of elements if
     the node type is tf_memory node, regardless of the order of the Verilog
     array declaration (IEEE 1364-2001 Section 25.35).
  o Generated Instantiation (LRM section 12.1.3).
  o Implicit event expression list (always @*) (LRM section 9.7.5).
  o Implicit nets with continuous assignments (LRM section 3.5).
  o Disabling implicit net creation (LRM section 19.2).

