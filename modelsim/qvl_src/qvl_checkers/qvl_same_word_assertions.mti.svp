//              Copyright 2006-2007 Mentor Graphics Corporation
//                           All Rights Reserved.
//
//              THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY
//            INFORMATION WHICH IS THE PROPERTY OF MENTOR GRAPHICS
//           CORPORATION OR ITS LICENSORS AND IS SUBJECT TO LICENSE
//                                  TERMS.
//
//                   Questa Verification Library (QVL)
//

`include "std_qvl_defines.h"

`qvlmodule qvl_same_word_assertions(
                                active,
				clock,
				reset,
				areset,
				zivar,
				used,
				used_cond,
				same_word,
				same_word_fire,
				evaluations,
				set_to_one_bitmap,
				set_to_zero_bitmap,
				each_bit_set_to_one,
				each_bit_set_to_zero,
				support
			       );
   



  parameter severity_level = `QVL_ERROR;
  parameter property_type  = `QVL_ASSERT;
  parameter msg            = "QVL_VIOLATION : ";
  parameter coverage_level = `QVL_COVER_NONE;

  parameter Constraints_Mode = 0; 
  parameter MATCH_XZ         = 0; 

  //Instantiation dependant parameters
  parameter VAR_ITEM_COUNT = 1; 
  parameter VAR_ITEM_WIDTH = 1; 
  parameter WIDTH = VAR_ITEM_COUNT*VAR_ITEM_WIDTH; 



  parameter SUPPORT_WIDTH = 1; 
  input [SUPPORT_WIDTH-1:0]  support; 

  input active; 
  input	clock;  
  input	areset; 
  input	reset;  

  //required user specified inputs
  input [WIDTH-1:0] zivar; 
  input	used;            
  input	used_cond;       
 
  input same_word; 	
  output same_word_fire;

  output [63:0] evaluations;
  output [VAR_ITEM_WIDTH-1:0] set_to_one_bitmap;
  output [VAR_ITEM_WIDTH-1:0] set_to_zero_bitmap;
  output each_bit_set_to_one;
  output each_bit_set_to_zero;

  reg same_fire;
  wire same_word_fire = same_fire;
  reg same_viol;
  reg [63:0] evaluations;
  reg [VAR_ITEM_WIDTH-1:0] set_to_one_bitmap;
  reg [VAR_ITEM_WIDTH-1:0] set_to_zero_bitmap;
  wire each_bit_set_to_one = &set_to_one_bitmap;
  wire each_bit_set_to_zero = &set_to_zero_bitmap;


`ifdef QVL_ASSERT_ON
 wire qvl_same_word_same_word_check_combo;
`endif // QVL_ASSERT_ON


`ifdef QVL_ASSERT_ON
  assign qvl_same_word_same_word_check_combo = (reset === 1'b0) &&
                                               (areset === 1'b0) &&
                                               (active === 1'b1) &&
	                                       (same_word && (!used || 
                                               (used && 
                                               (used_cond === 1'b1)))) &&
                                               (({VAR_ITEM_COUNT
                                                 {zivar[VAR_ITEM_WIDTH-1:0]}})
                                                 !== zivar) &&
                                               (MATCH_XZ || 
                                               ((zivar^zivar) === 
                                                {WIDTH{1'b0}}));
`endif // QVL_ASSERT_ON
`protected

    MTI!#=l^#{'iI-\ij*<[jfB#D$TzQoWQGZo}[[I?ok="BB*WopYWDs{nD#z[eT];;$xj5'j<VnHK
    9EABWm{B-o_nR=Y~GBp*^ZY1E[m-l?\iABVU]'@ZZ*]W<X_{O_<G[1nK3^5}r}1'=ijD}us{lUo\
    !_}~ae^2[lv[HSDo>s|0&madU77][GZV73oo\XeG<lV]w$+##VOiVvviQJ1[@53T_1ml}<T2{L[!
    +l5u<C?ab={we)+{nGx@\^V\M7AGXSEe]D+D]2mtwnxO>[ip+j~~h,+ZorN=k3x!_IK[[pU:HnzV
    +wH!V?\n7_KE^7pee$VuyJ+9=h$^KQ^Ox{1~7zC=ej8'EiH\DU>'/=3*_;RBp*I#2rl\j]l7Z&gt
    oo_pyQ.}Z{~2U'+lA+;t5!uppm@}~AD3dkUYm57]K?{j*iT^i!>jQSl2a<k'UG'C!K(6]Fv@a7K5
    GkaE+1HY!\Q?-J!CJ]+p,w!wXBpRHT^-QCb2O{,a5KV4nB=CY7~plwo57~'ml^>H$]'iX{Vx8f=C
    KO7#sY$p#[nURV@>ATE++IYeU=DGpEAnr}Y?r=73r'J=Ir8VY?IfEQ~Q9Z=JC-QA7H_ET_5\{\D~
    2+8"<}^RBx7~$R*E<'?BC#me&z7Q<<5@3PgaY'zfeABeo2B<2HO{W$G3uIX_oAB~nY]p]=VAdIo^
    v1k*H~XIpK9$B,\$-[r*wzX],,#2}s^uG+U5OmEVxR,{7]x]UR$Vsor_*oJri'+waXpe2<^BjO#o
    )es3ehxCx-\5\Uzn}$eR^{rBm+VBlKIEKo[m(R]ZRR_[}EH17|xxv'G;v?UT1JVlZXk}^c.B;2eV
    3K;7;ZDkR@<ZrYBf>GJ^j>RRI_esC$R!Co?eWnR^/'zX\V)_>'}Ra-_A,E^5}Va#R^e]$^jTD7\l
    x@mrhyMpseO,~aC717?-s}T[sT\&&#G!r-$wIDeewB,l[*V[^9-V7iXBJJoG$nv2A'Kpj}Wp3#4}
    ?IVF5KITaN>z-n=GEiN;>*v=+2W
`endprotected

`ifdef QVL_ASSERT_ON
`include "std_qvl_task.h"
`include "std_qvl_property.svh"

generate
  case (property_type)
    `QVL_ASSERT : 
      begin : qvl_assert
        A_qvl_same_word_same_word_check: 
          assert property ( ASSERT_NEVER_P ( 
                      .clock     (clock),
                      .reset_n   (~reset),
                      .enable    (1'b1),
                      .test_expr (qvl_same_word_same_word_check_combo)))
          else qvl_error_t(
                          .err_msg        ("A_qvl_same_word_same_word_check"),
                          .msg            ({msg,"Not all words in the expression had the same value."}),
                          .severity_level (severity_level),
                          .property_type  (property_type));
      end

    `QVL_ASSUME : 
      begin : qvl_assume
        M_qvl_same_word_same_word_check: 
          assume property ( ASSERT_NEVER_P ( 
                      .clock     (clock),
                      .reset_n   (~reset),
                      .enable    (1'b1),
                      .test_expr (qvl_same_word_same_word_check_combo)));
      end

    `QVL_IGNORE : 
      begin : qvl_ignore
      end
    default: initial qvl_error_t (
                          .err_msg        (""),
                          .msg            (""),
                          .severity_level (severity_level),
                          .property_type  (`QVL_IGNORE));
  endcase

endgenerate
`endif // QVL_ASSERT_ON

`include "qvl_same_word_cover.svh"

`qvlendmodule // qvl_same_word_assertions
