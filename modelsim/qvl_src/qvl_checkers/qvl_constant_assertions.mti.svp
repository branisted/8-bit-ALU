//              Copyright 2006-2007 Mentor Graphics Corporation
//                           All Rights Reserved.
//
//              THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY
//            INFORMATION WHICH IS THE PROPERTY OF MENTOR GRAPHICS
//           CORPORATION OR ITS LICENSORS AND IS SUBJECT TO LICENSE
//                                  TERMS.
//
//                   Questa Verification Library (QVL)


`include "std_qvl_defines.h"

`qvlmodule qvl_constant_assertions(
                                   zivar,
                                   clock,
                                   reset,
                                   areset,
                                   constant,
			           active,
                                   used,
                                   used_cond,
			           constant_fire,
                                   cycles_checked,
			           support,
			           fire_count
                                   );
   


  parameter severity_level = `QVL_ERROR;
  parameter property_type = `QVL_ASSERT;
  parameter msg = "QVL_VIOLATION : ";
  parameter coverage_level = `QVL_COVER_NONE;



  parameter Constraints_Mode = 0; 
  parameter STAT_CNT_WIDTH = `ZI_CW_STAT_CNT_WIDTH;

  //Instantiation dependant parameters
  //WIDTH is the number of bits in the checked register
  parameter WIDTH = 4; 
   

  parameter SUPPORT_WIDTH = 1; 
  input [SUPPORT_WIDTH-1:0]  support; 

  //Checker clock
  input clock; 
  //Checker synchronous Reset
  input reset; 
  //Checker asynchronous Reset
  input areset; 
  //Checked register value
  input [WIDTH-1:0] zivar; 
  input used; 
  input used_cond; 
  input constant; 
  input	active; 

  output constant_fire; //Fire signal asserted when violation is seen
  output [STAT_CNT_WIDTH-1:0] cycles_checked;

  output [STAT_CNT_WIDTH-1:0] fire_count;
  reg [STAT_CNT_WIDTH-1:0] fire_count;

   
     
  reg [WIDTH-1:0] last_var; //Holds previous state value of checked register
  reg constant_fire; //Asserted when violation is found
  reg [STAT_CNT_WIDTH-1:0] cycles_checked; //Statistic, the total number of loads
  reg first_check;
   
`protected

    MTI!#8yRv!![J2;<A\~Z5ilklW~n_s}EZ+GjE?$_sA[O@RK8}A+~2]1ileAoeIw$}moV},~ze,[v
    H'#vQnji^;2{%,@GkBIB1)N#7@]}l<{;=!+^Y#^NH\IA=5A3!o?~M<7z~lzRI3Tru{<jD=\Jl2&i
    7,^[?>Yz=?klY*AtmIu~BC@E~<H~m'?n]\a^ee;jV]IzS=\tX7<Z+SFa=i3=,Q_:I!J,$'?BR$iQ
    s@7*y$vKrcv1HV7mQm5lOx;s@</M@<2rcIEoa[[z$e'BX]GjQBj-As<;~I*KJ7*3VY[r}z*}lIwX
    <?1!KAIACX>K_d<_,prRjw!p*35{@j'I>;}C,#pmQ+.7Ar$sUY;r,5rm7^$$Q<D|g'Zxl~Xo#nj+
    [5o';>'}u}?x=={TTi<*onwIBEn^^~Upo!D[??=#$}Xj+GwJ@XR}=B;Rs=ZlpIKH*{G;[s#CTE+O
    7cH{!}hlv?\8a>]^n$?Vy,'DvB*}u'5IXvu5mz1\TeaZGET!s/;7iubJ]J7m=<XH-mV$=!u?oYZ8
    cleBK,OQO~[@=V3wI&}j]TGZDVHE^V=wumi$kUV_!!H$wGeV_3!Yi@|]]XJL#'e_Rop,Vk+J1GXw
    A>BwBU>T4sj7p_w@7KVT]T{7z*Co!OQwO_E+Ovwpl+x?x_2'jY5BJQ[zpzv\]xa=Rx3+J'lV<<wm
    V+-${)5fMF_]JD<}_IOp{\AjI^MEQ\pIs'JN_T$}Q=QsJ7\^se=r[5s=NXl,BNU\TxI+{[~omz_+
    I]e*A+^G#{-ji2i1K{PHRT#K=o7}w+ws'#'s[D!GHIo1@^Z>a[V1[X]R>;}>'CQBrQ'IeRH{*{z=
    e\'5zm}RCO~<{7n[CB_Vxu#rpip\x>}@Hp+i'snOJ(S_R+tn_]-Ra+m'++\{wJoeOj]#vC#03>_D
    7<lYE5~DRE>GnX}^>z~-r#zZ$v?TMezJ7qs'\#[?_=c-C+mU=kj',Gsx,D^j,HA{=iHrkY~s\A[l
    Hr{rGR=j!O'z<Xn_x^Baa[Ar2Gm[=x]+]<pv!$JxV1lQk3a}BDJ.iGkB>*nkYAAI\!$Kl3E']YI5
    _]uB|pFNG@C$B_'?cE>v-=J7ZO7eRY?u
`endprotected

`ifdef QVL_ASSERT_ON

  wire constant_check_fire_combo;

  assign constant_check_fire_combo = ((areset === 1'b0 && reset === 1'b0) &&
                                      (active === 1'b1 && 
                                      ((zivar !== last_var) && 
                                      (!first_check && constant &&
                                      (!used || used_cond === 1'b1)))) &&   
                                      (~(^zivar === 1'bx)));

`include "std_qvl_task.h"
`include "std_qvl_property.svh"

generate
  case (property_type)
    `QVL_ASSERT : 
      begin : qvl_assert
        A_qvl_constant_check: 
          assert property ( ASSERT_NEVER_P ( 
                      .clock     (clock),
                      .reset_n   (~reset),
                      .enable    (1'b1),
                      .test_expr (constant_check_fire_combo)))
          else qvl_error_t(
                          .err_msg        ("A_qvl_constant_check"),
                          .msg            ({msg,"The value of test_expr changed, but should have remained constant"}),
                          .severity_level (severity_level),
                          .property_type  (property_type));
      end

    `QVL_ASSUME : 
      begin : qvl_assume
        M_qvl_constant_check: 
          assume property ( ASSERT_NEVER_P ( 
                      .clock     (clock),
                      .reset_n   (~reset),
                      .enable    (1'b1),
                      .test_expr (constant_check_fire_combo)));
      end

    `QVL_IGNORE : 
      begin : qvl_ignore
      end
    default: initial qvl_error_t (
                          .err_msg        (""),
                          .msg            (""),
                          .severity_level (severity_level),
                          .property_type  (`QVL_IGNORE));
  endcase

endgenerate

`endif // QVL_ASSERT_ON

`include "qvl_constant_cover.svh"

`qvlendmodule // qvl_constant_assertions
