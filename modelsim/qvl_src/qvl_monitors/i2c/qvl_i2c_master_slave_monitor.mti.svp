//              Copyright 2006-2007 Mentor Graphics Corporation
//                           All Rights Reserved.
//
//              THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY
//            INFORMATION WHICH IS THE PROPERTY OF MENTOR GRAPHICS
//           CORPORATION OR ITS LICENSORS AND IS SUBJECT TO LICENSE
//                                  TERMS.
//
//                   Questa Verification Library (QVL)
//
/*************************************************************************
 /***********************************************************************
 * 
 * DESCRIPTION  This file is part of 0-In CheckerWare.
 *              It describes the bus monitor for the I2C bus standard.
 *
 * PURPOSE      This monitor checks the I2C bus protocol.
 *
 * REFERENCE    The I2C-Bus Specification Ver 2.1, Jan. 2000, Philips
 * 
 * INPUTS       clock         - Clock signal. This clock is used to sample
 *				both SDA and SCL. This should be atleast 
 *                              2X faster than the SCL frequency.
 *              clock_prescale_count - This is used to generate the internal 
 *                                     sampling clock to sample SCL and SDA.   
 *              areset        - Asynchonous Reset signal (active high)
 *              sda_out       - SDA output to PAD
 *		sda_in        - SDA input from PAD
 *              scl_out       - SCL output to PAD
 *		scl_in        - SCL input from PAD
 *		slave_addr    - 10 Bits wide. Append 3'b00, if you are connecting 
 *                              a 7-bit address.
 * 
 * NOTES        This monitor can be connected to both of the following 
 *              bus signals:
 *
 *              a) SDA and SCL as Open Collector signals. In this cenario, 
 *                 sda_out_en_n and scl_en_n signals should be connected to 1'b0.
 *                 sda_in and sda_out should be connected to SDA.     
 *                 scl_in and scl_out should be connected to SCL.
 *
 *              b) SDA and SCL as Tristate buffer outputs. 
 *                 SDA Tristate signals: sda_out, sda_out_en_n, sda_in  
 *                 SCL Tristate signals: scl_out, scl_out_en_n, scl_in 
 *                 
 * NOTES        While the I2C-Bus Specification specifies three modes,
 *		the current monitor supports standard-mode (100 Kbps)
 *		and fast-mode (400 Kbps), and high-speed mode (3.4 Mbps).
 *
 *
 * USAGE        The monitor should be instantiated within the target design.
 *
 *                             +-----------------------------+
 *                             |  I2C Device                 | 
 *                             |            +-------------+  |
 *          <---sda_out_en_n --|            |   Master    |  |
 *          <---sda_out -------|            |   Device    |  |
 *          ----sda_in  ------>|  +------+  |             |  |
 *                             |  |      |  |             |  |
 *                             |  | I2C  |  |             |  |
 *                             |  |      |  |             |  |
 *                             |  | MON  |  +-------------+  |
 *                             |  |      |                   |
 *                             |  |      |  +-------------+  |
 *          <---sda_out_en_n --|  |      |  |   Slave     |  |
 *          <---sda_out -------|  |      |  |   Device    |  |
 *          ----sda_in  ------>|  +------+  |             |  |
 *                             |            |             |  |
 *                             |            |             |  |
 *                             |            +-------------+  |
 *                             |                             |
 *                             +-----------------------------+
 *                             
 * Last Update: 6th April 2006                            
 ***********************************************************************/

`include "std_qvl_defines.h"

`ifdef ZiCwDebug
`define ZiCwDebugDelay1 #1
`else
`define ZiCwDebugDelay1
`endif //ZiCwDebug

`ifdef QVL_COVER_ON
  `ifdef QVL_SV_COVERGROUP_OFF
    // Do nothing
  `else
    `define QVL_SV_COVERGROUP
  `endif
  `ifdef QVL_MW_FINAL_COVER_OFF
    // Do nothing
  `else
    `define QVL_MW_FINAL_COVER
  `endif
`endif


`qvlmodule qvl_i2c_master_slave_monitor (clock,
                          reset,
                          areset,
                          sda_out,
                          sda_in,
                          sda_out_en_n,
                          scl_out,
                          scl_in,
                          scl_out_en_n,
                          slave_addr,
                          clock_prescale_count);

  parameter Constraints_Mode = 0;
              //Common Enable/Disable for all assertions as Constraints to Formal tools,
              //#0-In Search, Confirm and Prove. To use a group of assertions of this
              //monitor as Constraints with Formal tools, Pass value 1 to this parameter.
  parameter MAX_TXN_LENGTH   = 0;
              //Maximum Transaction Length Limit. A Check will fire, if this monitor finds
              //an I2C Transaction that is longer than the length specified to this
              //parameter. The check is disabled, if this parameter is passed with 0. To
              //activate this check, pass any non-zero positive number.
  parameter CLOCK_PRESCALE_EN = 0;
              //Clock Prescaler Enable. If set to 1, you should pass a non-zero positive
              //value to clock_prescale_count signal. If set to 0. You should connect an
              //external Sampling Enable to the 0th bit of clock_prescale_count signal.
  parameter OUTPUT_ENABLES_ON = 0;
              //Output Enables ON. If the I2C design has tristate compatible signals,
              //pass 1 to this parameter, and connect the coresponding enable signals to
              //sda_out_en_n, and scl_out_en_n. If the I2C design does not have output
              //enable signals, connect 1'b0 to both sda_out_en_n, and scl_out_en_n signals

//Internal Parameters
  parameter ZI_ADDR_WIDTH = 10;
  parameter ZI_DISABLE_CHECKS = 0;

  input	clock;		
  input reset;
  input areset;
  input	sda_out; 
  input sda_in;	
  input sda_out_en_n; 
  input	scl_out;
  input scl_out_en_n; 
  input scl_in;		
  input [ZI_ADDR_WIDTH-1:0] slave_addr; 

  input [15:0] clock_prescale_count; 

`protected

    MTI!#8p%<vY<k$Q~\*ArX_7jl_,lz,RzxzQ-=;lz4=?ounB,?Ne~JV^BoK;U>Tq1*zK\YBiGRI{}
    <I!K{E3ri4XEA5"YB5BB-~D!9$;3R2o$K3od}22X:@Y[[xRUQ]}Q]5K,5uX3?zG<-DxY!~G^rnY@
    {aa[]2+r}r2pI<BBO$r#j=Bl,~5DITN|,D-2N1jnemjaBkX1ilmwG)}}H2?X7sln^n=CxQK[Bp<j
    '}wXI7CNC/rV-oY+m\hm]C@I5-Z2EjHM?sVUuR\*sDpuVi]VIWY_:aT^Iokx1"X[Jpvp"s*v*+IC
    \As#a<De]5wKJFexRRl[3eR=Z[HoeO!]Koye>1<<S7z#T?wjv|q?[*ZVnY;e!**XQ?}[psZ+DB{z
    vDJ_$AkiEC<HXJD+vW#gY$<s73mmOVT]?wnlie,Xx~UlE_[i@o]e%:BZ7!rvJE=#A<.[u]UY|^s^
    !CKuv~5pW2_eiCa7{1aA-HhCKD=uY_}DAm@+I#s']\$vm{H=bWAR,I@xZ9zm3R?O![pvZ\Ncz1nR
    oVQl^zjo$oAk$\i<O-uC$mZ1L}&k+[pEaYAYJ[^un}G({-KQ_KA<;D!A8w<@IE%fI+TI=u3Op+Qr
    p31-*=*_eHBr_'-7j]bN/r>Ce#<m;[?^esW1ox*zkS*zZJCi3?oU_R7I7#'*R7_7<+rBAnHY?v~j
    V,YJujGIoI2jwnN7>FsQJEGkrw=3YH%w_}$Kn5C"lW]H!zpl1sTU=!l3gpZ\iB;{v_D\[*#sUw\K
    HT7
`endprotected

  wire `QVL_DUT2CHX_DELAY [ZI_ADDR_WIDTH-1:0] sampled_slave_addr = slave_addr;
  wire `QVL_DUT2CHX_DELAY sampled_reset = reset;
  wire `QVL_DUT2CHX_DELAY sampled_areset = areset;
  wire `QVL_DUT2CHX_DELAY sampled_sda_out = sda_out;
  wire `QVL_DUT2CHX_DELAY sampled_sda_in = sda_in;
  wire `QVL_DUT2CHX_DELAY sampled_sda_out_en_n = sda_out_en_n;
  wire `QVL_DUT2CHX_DELAY sampled_scl_out = scl_out;
  wire `QVL_DUT2CHX_DELAY sampled_scl_out_en_n = scl_out_en_n;
  wire `QVL_DUT2CHX_DELAY sampled_scl_in = scl_in;
  wire `QVL_DUT2CHX_DELAY [15:0] sampled_clock_prescale_count = clock_prescale_count;

qvl_i2c_monitor #(Constraints_Mode,
                    1, //.DEVICE_TYPE (1),
                    MAX_TXN_LENGTH, //(MAX_TXN_LENGTH),
                    CLOCK_PRESCALE_EN, //(CLOCK_PRESCALE_EN),
                    OUTPUT_ENABLES_ON) // (OUTPUT_ENABLES_ON) )
                      MAS_MON0 (.clock (clock),
                                .reset (sampled_reset),
                                .areset (sampled_areset),
                                .sda_out (sampled_sda_out),
                                .sda_out_en_n (sampled_sda_out_en_n),
                                .sda_in (sampled_sda_in),
                                .scl_out (sampled_scl_out),
                                .scl_out_en_n (sampled_scl_out_en_n),
                                .scl_in (sampled_scl_in),
                                .slave_addr (sampled_slave_addr),
                                .clock_prescale_count (sampled_clock_prescale_count) ) ;
 
qvl_i2c_monitor #(Constraints_Mode, // (Constraints_Mode),
                    2, //DEVICE_TYPE (2),
                    MAX_TXN_LENGTH, // (MAX_TXN_LENGTH),
                    CLOCK_PRESCALE_EN, // (CLOCK_PRESCALE_EN),
                    OUTPUT_ENABLES_ON) // (OUTPUT_ENABLES_ON) ) 
                     SLV_MON0 (.clock (clock),
                                .reset (sampled_reset),
                                .areset (sampled_areset),
                                .sda_out (sampled_sda_out),
                                .sda_out_en_n (sampled_sda_out_en_n),
                                .sda_in (sampled_sda_in),
                                .scl_out (sampled_scl_out),
                                .scl_out_en_n (sampled_scl_out_en_n),
                                .scl_in (sampled_scl_in),
                                .slave_addr (sampled_slave_addr),
                                .clock_prescale_count (sampled_clock_prescale_count) ) ;

//`include "qvl_i2c_known_driven_assertions.inc"

`qvlendmodule
