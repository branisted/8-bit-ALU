//              Copyright 2006-2007 Mentor Graphics Corporation
//                           All Rights Reserved.
//
//              THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY
//            INFORMATION WHICH IS THE PROPERTY OF MENTOR GRAPHICS
//           CORPORATION OR ITS LICENSORS AND IS SUBJECT TO LICENSE
//                                  TERMS.
//
//                   Questa Verification Library (QVL)
//
/*************************************************************************
*
* PURPOSE     This file is part of 0-In CheckerWare.
*
* DESCRIPTION This monitor tracks the SAS interface for compliance
*             with SAS specification.
*
* REFERENCES  Serial Attached SCSI, Revision 1.1, Revision 04, Mar 13, 2004.
*
* USAGE       This sub_module is instantiated in the top level monitor.
*             This module tracks the physical layer and transport layer 
*             frames. 
*
* LAST MODIFIED DATE : 10th July 2006
*
**************************************************************************/

`ifdef ZiCwDebug
`define ZiCwDebugDelay1 #1
`define ZiCwQuietIfNoCwDebug
`else
`define ZiCwDebugDelay1
`define ZiCwQuietIfNoCwDebug -quiet
`endif //ZiCwDebug 

`ifdef QVL_COVER_ON
  `ifdef QVL_SV_COVERGROUP_OFF
    // Do nothing
  `else
    `define QVL_SV_COVERGROUP
  `endif
  `ifdef QVL_MW_FINAL_COVER_OFF
    // Do nothing
  `else
    `define QVL_MW_FINAL_COVER
  `endif
`endif

`qvlmodule qvl_sas_link_monitor (clk,
                               areset,
                               reset,
                               data_plus,
                               data_minus,
                               bypass_reset_seq, 
			       start_speed_negotiation,
                               tx_cominit_idle_time,
                               tx_comsas_idle_time,
                               rx_cominit_idle_time_min,
                               rx_cominit_idle_time_max,
                               rx_comsas_idle_time_min,
                               rx_comsas_idle_time_max,
                               tx_cominit_neg_time,
                               tx_comsas_neg_time,
                               rx_cominit_neg_time,
                               rx_comsas_neg_time,
                               hotplug_timeout,
                               comsas_timeout,
                               hard_reset_timeout,
                               ident_frame_timeout,
                               break_timeout,
                               open_addr_res_timeout,
                               credit_timeout,
                               ack_nak_timeout,
                               close_timeout,
                               done_timeout,
			       electrical_idle, 
                               cominit_det ,
                               cominit_det_received,
                               comsas_det,
                               comsas_det_received,
                               cominit_sent,
                               cominit_sent_received,
                               comsas_sent,
                               comsas_sent_received,
                               iaf_sent,
                               iaf_received,
                               hard_reset_detected,
                               hard_reset_received,
                               soaf_detected,
                               soaf_received,   
                               r_soaf_detected,
                               r_soaf_received,
                               eoaf_detected,
                               eoaf_received,
                               aip,
                               aip_received,
                               open_accept,
                               open_accept_received,
                               open_reject,
                               open_reject_received,
                               sof_det,
                               sof_det_received,
                               eof_det,
                               eof_det_received,
                               close_det, 
                               close_det_received,
			       close_affliation_det,
			       close_affliation_det_received,
                               done_det,
                               done_det_received, 
                               info_unit_type,
                               info_unit_type_received,
                               ack_det,
                               ack_det_received,
                               nak_det,
                               nak_det_received,
                               initiator_target,
                               initiator_target_received,
                               sata_sof_det,
                               sata_sof_det_received,
                               sata_eof_det,
                               sata_eof_det_received,
                               sata_xrdy_det,
                               sata_xrdy_det_received,
                               sata_rrdy_det,
                               sata_rrdy_det_received,
                               hold_det,
                               hold_det_received,
                               holda_det,
                               holda_det_received,
                               wtrm_det,
                               wtrm_det_received,
                               r_ok_det,
                               r_ok_det_received,
                               r_err_det,
                               r_err_det_received,
                               sync_det,
                               sync_det_received,
                               smp_req_fn,
                               smp_req_fn_received,
                               smp_res_fn,
                               smp_res_fn_received,
                               protocol,
                               protocol_received,
                               data_frame_count,
                               data_frame_count_received,
                               addr_frame_type,
                               addr_frame_type_received,
                               break_det,
                               break_det_received,
                               r_sof_detected,
                               r_sof_detected_received,
                               primitive_violation,
                               primitive_violation_received,
                               change_det,
                               change_det_received,
                               latched_hold_det,
                               latched_hold_det_received,
                               rrdy_det,
                               rrdy_det_received,
                               level_select_temp,
                               sas_valid,
                               sas_valid_received,
			       dword_valid,
			       dword_valid_received,
			       smp_req_fn_valid,
			       smp_res_fn_valid,
			       protocol_valid,
			       info_unit_type_valid,
			       data_frame_count_valid,
			       addr_frame_type_valid,
			       initiator_target_valid,
                               cominit_det_changed,
                               comsas_det_changed,
                               cominit_sent_changed,
                               comsas_sent_changed,
			       latched_hold_det_changed,
			       r_soaf_detected_changed,
			       r_sof_det_changed,
			       tgt_prt_tag_valid,
			       target_port_transfer_tag,
			       target_port_transfer_tag_rcvd,
			       connection_status,
			       connection_status_received,
                               illegal_primitive_inside_ssp_connection,
                               illegal_primitive_inside_smp_connection,
                               illegal_primitive_inside_stp_connection,
                               illegal_primitive_outside_connection,
                               illegal_prim_ssp_rcvd,
                               illegal_prim_smp_rcvd,
                               illegal_prim_stp_rcvd,
                               illegal_prim_out_rcvd,
                               valid_g1_state,
                               valid_g1_state_rcvd,
                               valid_g2_state,
                               valid_g2_state_rcvd,
                               valid_g3_state,
                               valid_g3_state_rcvd,
                               neg_state,
                               neg_state_rcvd,
			       transaction_in_g1rate,
			       align0_xmtd,
			       align1_xmtd,
                               disable_scr_count,
                               electrical_idle_detected,
			       speed_neg_status,
			       next_start_rcd,
			       next_parallel_rcd,
                               start_speed_neg,
                               reset_expect,
			       current_negotiated_rate,

			       addr_frame_type_err,
			       addr_frame_type_err_rcvd,
			       crc_err, 
			       crc_err_rcvd,
			       oaf_max_frame_size_err,
			       oaf_max_frame_size_err_rcvd,
			       iaf_max_frame_size_err,
			       iaf_max_frame_size_err_rcvd,
			       discard_frame,
			       discard_frame_rcvd,
			       data_pres_err,
			       data_pres_err_rcvd,

                               credit_exhausted,
                               credit_exhausted_rcvd,

			       collect_stats
                              );


  parameter Constraints_mode = 0;
  wire [31:0] pw_Constraints_mode = Constraints_mode;

  parameter TX_INTERFACE = 0;
  wire [31:0] pw_TX_INTERFACE = TX_INTERFACE;

  parameter SAS_DEVICE_TYPE = 0;
  wire [31:0] pw_SAS_DEVICE_TYPE = SAS_DEVICE_TYPE;

  parameter INTERFACE_TYPE = 0;
  wire [31:0] pw_INTERFACE_TYPE = INTERFACE_TYPE;

  parameter DOUBLE_DATA_RATE = 0;
  wire [31:0] pw_DOUBLE_DATA_RATE = DOUBLE_DATA_RATE;

  parameter ELECTRICAL_IDLE_VAL = 'h3ff;
  wire [31:0] pw_ELECTRICAL_IDLE_VAL = ELECTRICAL_IDLE_VAL;

  parameter DEVICE_SPEED_RATE = 0;
  wire [31:0] pw_DEVICE_SPEED_RATE = DEVICE_SPEED_RATE;

  parameter REPEAT_PRIMITIVE_SEQ_ENABLE = 1;
  wire [31:0] pw_REPEAT_PRIMITIVE_SEQ_ENABLE = REPEAT_PRIMITIVE_SEQ_ENABLE;

  parameter TRANSPORT_LAYER_CHECKS_ENABLE = 0;
  wire [31:0] pw_TRANSPORT_LAYER_CHECKS_ENABLE = TRANSPORT_LAYER_CHECKS_ENABLE;

  parameter MAX_SUPPORTED_RATE = 0;
  wire [31:0] pw_MAX_SUPPORTED_RATE = MAX_SUPPORTED_RATE;

  parameter DISABLE_DESCRAMBLER = 0;
  wire [31:0] pw_DISABLE_DESCRAMBLER = DISABLE_DESCRAMBLER;

  parameter PHY_RESET_SEQ_CHECK_ENABLE = 1;
  wire [31:0] pw_PHY_RESET_SEQ_CHECK_ENABLE = PHY_RESET_SEQ_CHECK_ENABLE;

  parameter RESERVED_FIELD_CHECK_ENABLE = 1;
  wire [31:0] pw_RESERVED_FIELD_CHECK_ENABLE = RESERVED_FIELD_CHECK_ENABLE;

  parameter VENDOR_SPECIFIC_ENCODING_ENABLE = 0;
  wire [31:0] pw_VENDOR_SPECIFIC_ENCODING_ENABLE = 
					       VENDOR_SPECIFIC_ENCODING_ENABLE;

  // Internal parameter 

  parameter ZI_ALIGN_ROTATION_CHECK_ENABLE = 1;

  // Internal parameters
  
  parameter ZI_SAS_RESET_STATE = 0;
  parameter ZI_SAS_AWAITCOMX_STATE = 1;
  parameter ZI_SAS_COMSAS_STATE = 2;
  parameter ZI_SAS_COMNOAWAIT_STATE = 3;
  parameter ZI_SAS_COMAWAIT_STATE = 4;
  parameter ZI_SATA_STATE = 5;

  parameter ZI_SAS_SN_START_STATE = 7;
  parameter ZI_SAS_RCD_STATE = 8;
  parameter ZI_SAS_G1RATE_STATE = 9;
  parameter ZI_SAS_G2RATE_STATE = 10;
  parameter ZI_SAS_G3RATE_STATE = 11;
  parameter ZI_SAS_NEG_RATE_STATE = 12;
  parameter ZI_SAS_HOT_PLUG_STATE = 13;
  parameter ZI_SAS_G2RCD_STATE = 14;
  parameter ZI_SAS_G3RCD_STATE = 15;
  parameter ZI_SAS_HOTPLUG_TIMEOUT_STATE = 16;
  parameter ZI_SAS_NEG_RCD_STATE = 17;

  parameter ZI_IAF_STATE = 18;
  parameter ZI_WAIT_FOR_IAF_STATE = 19;
  parameter ZI_WAIT_FOR_CONNECT_STATE = 20;
  parameter ZI_SOAF_STATE = 21;

  parameter ZI_SAS_LINK_IDLE_STATE = 22;
  parameter ZI_SAS_OPEN_ADDR_STATE = 23;
  parameter ZI_WAIT_FOR_REQUEST_STATE = 24;
  parameter ZI_RESPONSE_STATE = 25;
  parameter ZI_WAIT_FOR_RESPONSE_STATE = 26;
  parameter ZI_AIP_STATE = 27;

  // SMP protocol parameters

  parameter ZI_SMP_REQUEST_STATE = 28;
  parameter ZI_SMP_WAIT_FOR_REQ_STATE = 29; 
  parameter ZI_SMP_RESPONSE_STATE = 30;
  parameter ZI_SMP_WAIT_FOR_RES_STATE = 31;
  parameter ZI_SMP_DATA_STATE = 32;
  parameter ZI_SMP_CLOSE_STATE = 33;
  parameter ZI_SMP_WAIT_FOR_CLOSE_STATE = 34;

  // SSP protocol parameters

  parameter ZI_SSP_REQ_STATE = 35;
  parameter ZI_WAIT_FOR_SSP_REQ_STATE = 36;
  parameter ZI_TASK_STATE = 37;
  parameter ZI_WAIT_TASK_STATE = 38;
  parameter ZI_COMMAND_STATE = 39; 
  parameter ZI_WAIT_COMMAND_STATE = 40;
  parameter ZI_WAIT_TASK_ACK_STATE = 41;
  parameter ZI_TASK_ACK_STATE = 42;
  parameter ZI_DONE_STATE = 43;
  parameter ZI_WAIT_FOR_DONE_STATE = 44;
  parameter ZI_CLOSE_STATE = 45;
  parameter ZI_WAIT_FOR_CLOSE_STATE = 46;
  parameter ZI_COMMAND_ACK_STATE = 47;
  parameter ZI_WAIT_COMMAND_ACK_STATE = 48;
  parameter ZI_XRDY_OR_DATA_SOF_STATE = 49;
  parameter ZI_WAIT_FOR_XRDY_OR_DATA_SOF_STATE = 50;
  parameter ZI_XFERRDY_STATE = 51;
  parameter ZI_READ_DATA_STATE = 52;
  parameter ZI_WAIT_XFERRDY_STATE = 53;
  parameter ZI_WAIT_FOR_READ_DATA_STATE = 54;
  parameter ZI_SSP_RESPONSE_STATE = 55;
  parameter ZI_WAIT_RESPONSE_STATE = 56;
  parameter ZI_BIDIRECTIONAL_STATE = 57;
  parameter ZI_WAIT_BIDIRECTIONAL_STATE = 58; 
  parameter ZI_RESPONSE_SOF_STATE = 59;
  parameter ZI_WAIT_RESPONSE_SOF_STATE = 60;
  parameter ZI_SSP_RES_ACK_STATE = 61;
  parameter ZI_WAIT_SSP_RES_ACK_STATE = 62;

  // STP protocol parameters

  parameter ZI_SATA_SOF_STATE = 63;
  parameter ZI_SATA_FIS_STATE = 64;
  parameter ZI_SATA_WAIT_FIS_STATE = 65;
  parameter ZI_SATA_HOLDA_STATE = 66;
  parameter ZI_SATA_WAIT_FOR_HOLDA_STATE = 67;
  parameter ZI_SATA_WTRM_STATE = 68;
  parameter ZI_SATA_WAIT_FOR_WTRM_STATE = 69;
  parameter ZI_SATA_ACK_STATE = 70;
  parameter ZI_SATA_WAIT_FOR_ACK_STATE = 71;
  parameter ZI_SATA_SYNC_STATE = 72;
  parameter ZI_SATA_WAIT_FOR_SYNC_STATE = 73;
  parameter ZI_SATA_CLOSE_STATE = 74;
  parameter ZI_SATA_WAIT_FOR_CLOSE_STATE = 75;
  parameter ZI_SATA_XRDY_STATE = 76;
  parameter ZI_SATA_RRDY_STATE = 77;
  parameter ZI_SATA_WAIT_FOR_SOF_STATE = 78;
  parameter ZI_SATA_WAIT_XRDY_STATE = 79;
  parameter ZI_WAIT_SATA_RRDY_STATE = 80;
  parameter ZI_WAIT_FOR_BREAK_STATE = 81;

  parameter ZI_UNKNOWN_STATE = 82;
  parameter ZI_XFERRDY_ACK_STATE = 83;
  parameter ZI_WAIT_XFERRDY_ACK_STATE = 84;

  parameter ZI_IDLE_STATE = 0;
  parameter ZI_ALIGN_BURST_STATE = 1;
  parameter ZI_WAIT_STATE = 2;
  parameter ZI_COMINIT_IDLE_STATE = 3;
  parameter ZI_COMSAS_IDLE_STATE = 4;
  parameter ZI_NEGATION_STATE = 5;

  parameter ZI_ACK = 32'hbc818181;
  parameter ZI_DONE_CLOSE = 32'hbc1e1e1e;
  parameter ZI_DONE_CREDIT_TOUT = 32'hbc1e679b;
  parameter ZI_DONE_ACK_NAK_TOUT = 32'hbc1e81e4;
  parameter ZI_EOF = 32'hbc18f09b;
  parameter ZI_SOF = 32'hbc18e467;
  parameter ZI_NAK_CRC_ERR = 32'hbc819be4;
  parameter ZI_RRDY = 32'hbc8118f0;
  parameter ZI_CLOSE_AFFILIATION = 32'hbc0267e4;
  parameter ZI_ERROR = 32'hbc0281fd;
  parameter ZI_CREDIT_BLOCKED = 32'hbc81671e;

  // Parameter declaration for STP primitives

  parameter ZI_SATA_CONT = 32'h7caa9999;
  parameter ZI_SATA_DMAT = 32'h7cb53636;
  parameter ZI_SATA_EOF = 32'h7cb5d5d5;
  parameter ZI_SATA_HOLD = 32'h7caad5d5;
  parameter ZI_SATA_HOLDA = 32'h7caa9595;
  parameter ZI_SATA_R_ERR = 32'h7cb55656;
  parameter ZI_SATA_R_IP = 32'h7cb55555;
  parameter ZI_SATA_R_OK = 32'h7cb53535;
  parameter ZI_SATA_RRDY = 32'h7c954a4a;
  parameter ZI_SATA_SOF = 32'h7cb53737;
  parameter ZI_SATA_SYNC = 32'h7c95b5b5;
  parameter ZI_SATA_WTRM = 32'h7cb55858;
  parameter ZI_SATA_XRDY = 32'h7cb55757;

  // Parameter for outside the connection

  parameter ZI_SOAF = 32'hbc181e81;
  parameter ZI_EOAF = 32'hbc18679f;
  parameter ZI_AIP_NORM = 32'hbc9b9b9b;
  parameter ZI_AIP_WAIT_ON_PAR = 32'hbc9b18e4;
  parameter ZI_AIP_WAIT_ON_DEV = 32'hbc9b1efd;
  parameter ZI_AIP_WAIT_ON_CON = 32'hbc9b6718;
  parameter ZI_ALIGN = 32'hbc4a4a7b;
  parameter ZI_ALIGN1 = 32'hbc070707;
  parameter ZI_ALIGN2 = 32'hbc616161;
  parameter ZI_ALIGN3 = 32'hbc7b7b7b;
  parameter ZI_BREAK = 32'hbc021867;
  parameter ZI_CLOSE = 32'hbc021e9b;
  parameter ZI_OPEN_ACCEPT = 32'hbcf0f0f0;
  parameter ZI_OPEN_REJ_NO_DES = 32'hbcfdfdfd;
  parameter ZI_OPEN_REJ_BAD_DES = 32'hbc9f9f9f;
  parameter ZI_OPEN_REJ_WR_DES = 32'hbc9ff018;
  parameter ZI_OPEN_REJ_LINK_NS = 32'hbc9fe4fd;
  parameter ZI_OPEN_REJ_RETRY = 32'hbcfd9b18;
  parameter ZI_OPEN_REJ_PROTOCOL_NS = 32'hbc9ffd67;
  parameter ZI_OPEN_REJ_RES_BUSY = 32'hbc9f9b81;
  parameter ZI_OPEN_REJ_PATH_BLOCK = 32'hbcfdf0e4;
  parameter ZI_HARD_RESET = 32'hbc020202;
  parameter ZI_BROADCAST = 32'hbce40281;
  parameter ZI_NOTIFY = 32'hbc7f7f7f;

  // Wire declarations for Reserved primitives

  wire [31:0] ZI_AIP_RWOP = 32'hbc9b8167;
  wire [31:0] ZI_AIP_R0 = 32'hbc9b9ff0;
  wire [31:0] ZI_AIP_R1 = 32'hbc9bf01e;
  wire [31:0] ZI_AIP_R2 = 32'hbc9bfd81; 
  wire [31:0] ZI_BROADCAST_R0 = 32'hbce467fd;
  wire [31:0] ZI_BROADCAST_R1 = 32'hbce48118;
  wire [31:0] ZI_BROADCAST_R2 = 32'hbce4e4e4; 
  wire [31:0] ZI_BROADCAST_R3 = 32'hbce4f002;
  wire [31:0] ZI_BROADCAST_R4 = 32'hbce4fd1e;
  wire [31:0] ZI_BROADCAST_RC0 = 32'hbce4189f;
  wire [31:0] ZI_BROADCAST_RC1 = 32'hbce49b67; 
  wire [31:0] ZI_CLOSE_R0 = 32'hbc029f1e; 
  wire [31:0] ZI_CLOSE_R1 = 32'hbc02e481; 
  wire [31:0] ZI_NOTIFY_R0 = 32'hbc7f0761; 
  wire [31:0] ZI_NOTIFY_R1 = 32'hbc7f6107;
  wire [31:0] ZI_NOTIFY_R2 = 32'hbc7f4a4a; 
  wire [31:0] ZI_OPN_REJ_RA0 = 32'hbc9f029b;
  wire [31:0] ZI_OPN_REJ_RA1 = 32'hbc9f1ef0;
  wire [31:0] ZI_OPN_REJ_RA2 = 32'hbc9f6702;
  wire [31:0] ZI_OPN_REJ_RA3 = 32'hbc9f811e;
  wire [31:0] ZI_OPN_REJ_RC0 = 32'hbcfd021e;
  wire [31:0] ZI_OPN_REJ_RC1 = 32'hbcfd1881;
  wire [31:0] ZI_OPN_REJ_RI0 = 32'hbcfd1e9f;
  wire [31:0] ZI_OPN_REJ_RI1 = 32'hbcfd67f0;
  wire [31:0] ZI_OPN_REJ_RS0 = 32'hbcfd9f67;
  wire [31:0] ZI_OPN_REJ_RS1 = 32'hbcfde49b;
  wire [31:0] ZI_DONE_R0 = 32'hbc1ef081;
  wire [31:0] ZI_DONE_R1 = 32'hbc1efd9f; 
  wire [31:0] ZI_DONE_RT0 = 32'hbc1e9bfd;
  wire [31:0] ZI_DONE_RT1 = 32'hbc1e9f18; 
  wire [31:0] ZI_NAK_R0 = 32'hbc819ffd;
  wire [31:0] ZI_NAK_R1 = 32'hbc81e418;
  wire [31:0] ZI_NAK_R2 = 32'hbc81f067;
  wire [31:0] ZI_RRDY_R0 = 32'hbc81029f;
  wire [31:0] ZI_RRDY_R1 = 32'hbc811e02; 

  //*********************************************************
  // These parameters are used in the INIT sequence logic
  //********************************************************* 

  // Parameter declarations for idle time between ALIGN bursts.

  parameter ZI_ALIGN_BURST_COUNT = (DEVICE_SPEED_RATE) ? 8 : 4;

/*

  parameter COMINIT_MIN = DEVICE_SPEED_RATE ? 52 : 26;

  parameter COMINIT_MAX = DEVICE_SPEED_RATE ? 156 : 78;

  parameter COMSAS_MIN = DEVICE_SPEED_RATE ? 156 : 78;

  parameter COMSAS_MAX = DEVICE_SPEED_RATE ? 472 : 236;

*/

  // Internal parameter declaration

  parameter ZI_PORT_WIDTH_PLUS = INTERFACE_TYPE !== 0 ? 10 : 1;
  parameter ZI_PORT_WIDTH_MINUS = (INTERFACE_TYPE === 0 ? 1 :
                                   (INTERFACE_TYPE === 1 ? 10 :
                                   (INTERFACE_TYPE === 2 ? 20 : 20))); 

  //--------------------------------------------
  // Input port declarations
  //--------------------------------------------

  input clk;
  input areset;
  input reset;

  input [ZI_PORT_WIDTH_PLUS-1:0] data_plus;
  input [ZI_PORT_WIDTH_MINUS-1:0] data_minus;
  input bypass_reset_seq;
  input start_speed_negotiation;
  input electrical_idle;

  input [31:0] tx_cominit_idle_time;
  input [31:0] tx_comsas_idle_time;
  input [31:0] rx_cominit_idle_time_min;
  input [31:0] rx_cominit_idle_time_max;
  input [31:0] rx_comsas_idle_time_min;
  input [31:0] rx_comsas_idle_time_max;
  input [31:0] tx_cominit_neg_time;
  input [31:0] tx_comsas_neg_time;
  input [31:0] rx_cominit_neg_time;
  input [31:0] rx_comsas_neg_time;
  input [31:0] hotplug_timeout;
  input [31:0] comsas_timeout;
  input [31:0] hard_reset_timeout;
  input [31:0] ident_frame_timeout;
  input [31:0] break_timeout;
  input [31:0] open_addr_res_timeout;
  input [31:0] credit_timeout;
  input [31:0] ack_nak_timeout;
  input [31:0] close_timeout;
  input [31:0] done_timeout;

  input speed_neg_status; 
  input start_speed_neg;
  input reset_expect;  
  input [2:0] current_negotiated_rate;

  input rrdy_det_received;
  input latched_hold_det_received;
  input cominit_sent_received;
  input comsas_sent_received;
  input cominit_det_received;
  input comsas_det_received;
  input iaf_received;
  input hard_reset_received;
  input soaf_received;
  input eoaf_received;
  input aip_received;
  input open_accept_received;
  input open_reject_received;
  input sof_det_received;
  input eof_det_received;
  input ack_det_received;
  input nak_det_received;
  input sata_xrdy_det_received;
  input sata_rrdy_det_received;
  input hold_det_received;
  input holda_det_received;
  input wtrm_det_received;
  input r_ok_det_received;
  input r_err_det_received;
  input sync_det_received;    
  input sata_sof_det_received;
  input sata_eof_det_received;  
  input [7:0] smp_req_fn_received;
  input [7:0] smp_res_fn_received;
  input [15:0] target_port_transfer_tag_rcvd;
  input connection_status_received;
  input [2:0] protocol_received; 
  input done_det_received;
  input close_det_received;
  input close_affliation_det_received;
  input [7:0] info_unit_type_received;
  input [31:0] data_frame_count_received;
  input r_soaf_received;
  input r_sof_detected_received;
  input [3:0] addr_frame_type_received;
  input break_det_received;
  input primitive_violation_received;
  input illegal_prim_ssp_rcvd;
  input illegal_prim_smp_rcvd;
  input illegal_prim_stp_rcvd;
  input illegal_prim_out_rcvd; 
  input change_det_received;
  input initiator_target_received;
  input sas_valid_received;
  input dword_valid_received;

  input valid_g1_state_rcvd;
  input valid_g2_state_rcvd;
  input valid_g3_state_rcvd;
  input neg_state_rcvd;

  input transaction_in_g1rate;

  input addr_frame_type_err_rcvd;
  input crc_err_rcvd;
  input oaf_max_frame_size_err_rcvd;
  input iaf_max_frame_size_err_rcvd;
  input discard_frame_rcvd;
  input data_pres_err_rcvd;

  input credit_exhausted_rcvd;

  //---------------------------
  // Output port declarations
  //---------------------------
  
  output addr_frame_type_err;
  output crc_err;
  output oaf_max_frame_size_err;
  output iaf_max_frame_size_err;
  output discard_frame;
  output data_pres_err;

  output next_start_rcd;
  output next_parallel_rcd;

  output align0_xmtd;
  output align1_xmtd;
  output [2:0] disable_scr_count;
  output electrical_idle_detected; 

  output rrdy_det;
  output latched_hold_det;
  output latched_hold_det_changed;

  //-------------------------------------------------------------------
  // These signals will be asserted during Phy reset sequence.
  //-------------------------------------------------------------------
  
  output cominit_det;
  output comsas_det;
  output cominit_sent;
  output comsas_sent;
   
  output cominit_det_changed;
  output comsas_det_changed;
  output cominit_sent_changed;
  output comsas_sent_changed;
  //--------------------------------------------------------------------
  // Asserted when Identification frame is sent.
  //--------------------------------------------------------------------
 
  output iaf_sent;
  
  //----------------------------------------------------------------------
  // This signal will be asserted for only one clock, when HARD RESET 
  // primitive is detected.
  //----------------------------------------------------------------------

  output hard_reset_detected;

  //--------------------------------------------------------------------
  // This signal will be high for only one clock.  It will be asserted
  // when SOAF primitive is detected.
  //--------------------------------------------------------------------

  output soaf_detected;

  //--------------------------------------------------------------------
  // This signal will be high for only one clock.  It will be asserted
  // when EOAF primitive is detected.
  //--------------------------------------------------------------------

  output eoaf_detected;

  //------------------------------------------------------------------------
  // Asserted when AIP primitive is detected.
  //------------------------------------------------------------------------

  output aip;

  //--------------------------------------------------------------------
  // Asserted when OPEN ACCEPT primitive is detected.
  //--------------------------------------------------------------------

  output open_accept;

  //--------------------------------------------------------------------
  // Asserted when OPEN REJECT primitive is detected.
  //--------------------------------------------------------------------

  output open_reject;

  //----------------------------------------------------------------------
  // This signal will be asserted for only one clock, when SOF primitive
  // is detected.
  //----------------------------------------------------------------------

  output sof_det;

  //------------------------------------------------------------------------
  // This signal will be asserted for only one clock, when EOF primitive
  // is detected.
  //------------------------------------------------------------------------

  output eof_det;

  //------------------------------------------------------------------------
  // This signal will be asserted for only one clock, when ACK primitive
  // is detected.
  //------------------------------------------------------------------------

  output ack_det;

  //-----------------------------------------------------------------------
  // This signal will be asserted for only one clock, when NAK primitive
  // is detected.
  //-----------------------------------------------------------------------

  output nak_det;

  //------------------------------------------------------------------------
  // This signal will be asserted for only one clock, when SATA_XRDY primitive
  // is detected.
  //-----------------------------------------------------------------------

  output sata_xrdy_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when SATA_RRDY primitive
  // is detected.
  //-------------------------------------------------------------------------

  output sata_rrdy_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when HOLD primitive
  // is detected.
  //-------------------------------------------------------------------------

  output hold_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when HOLDA primitive
  // is detected.
  //-------------------------------------------------------------------------

  output holda_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when SATA_WTRM primitive
  // is detected.
  //-------------------------------------------------------------------------

  output wtrm_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when SATA_ROK primitive
  // is detected.
  //-------------------------------------------------------------------------

  output r_ok_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when SATA_RERR primitive
  // is detected.
  //-------------------------------------------------------------------------
  output r_err_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when SATA_SYNC primitive
  // is detected.
  //-------------------------------------------------------------------------

  output sync_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when SATA_SOF primitive
  // is detected.
  //-------------------------------------------------------------------------

  output sata_sof_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when SATA_EOF primitive
  // is detected.
  //-------------------------------------------------------------------------
  
  output sata_eof_det;

  //------------------------------------------------------------------------- 
  // During SMP transaction function value in the request will be latched 
  // in the smp_req_fn variable.
  //-------------------------------------------------------------------------

  output [7:0] smp_req_fn;
  output smp_req_fn_valid;

  //-------------------------------------------------------------------------  
  // During SMP transaction function value in the request will be latched 
  // in the smp_res_fn variable.  This variable will be passed to the other
  // instantiation.
  //-------------------------------------------------------------------------

  output [7:0] smp_res_fn;
  output smp_res_fn_valid;

  //-------------------------------------------------------------------------
  // Protocol field in the Open address frame will be latched in the protocol
  // filed.  It will be passed to the other instantiation.
  //-------------------------------------------------------------------------

  output [2:0] protocol;
  output protocol_valid;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when DONE primitive
  // is detected.
  //-------------------------------------------------------------------------

  output done_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when CLOSE primitive
  // is detected.
  //-------------------------------------------------------------------------

  output close_det;

  output close_affliation_det;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when CHANGE primitive
  // is detected.
  //-------------------------------------------------------------------------

  output change_det;

  //-----------------------------------------------------------------------
  // Information unit type field in the SSP frame will be latched in this
  // variable and it will be passed to other instantiation.
  //-----------------------------------------------------------------------

  output [7:0] info_unit_type;
  output info_unit_type_valid;

  //-----------------------------------------------------------------------
  // Number of data frames transmitted  during data phase of the SSP 
  // transaction will be counted and it will be passed to other instantiation.
  //------------------------------------------------------------------------

  output [31:0] data_frame_count;
  output data_frame_count_valid;

  //---------------------------------------------------------------------
  // This signal is a registered version of soaf_detected signal
  //---------------------------------------------------------------------

  output r_soaf_detected;
  output r_soaf_detected_changed;

  //--------------------------------------------------------------------- 
  // This signal is a registered version of sof_det signal
  //---------------------------------------------------------------------

  output r_sof_detected;
  output r_sof_det_changed;

  //------------------------------------------------------------------------- 
  // Address frame type field in the open address frame will be latched in 
  // this variable and it is passed to other instantiation.
  //------------------------------------------------------------------------- 

  output [3:0] addr_frame_type;
  output addr_frame_type_valid;

  //------------------------------------------------------------------------- 
  // This signal will be asserted for only one clock, when BREAK primitive
  // is detected.
  //-------------------------------------------------------------------------

  output break_det;

  //-------------------------------------------------------------------------
  // Asserted when primitive violation occured.
  //-------------------------------------------------------------------------

  output primitive_violation;

  output illegal_primitive_inside_ssp_connection;
  output illegal_primitive_inside_smp_connection;
  output illegal_primitive_inside_stp_connection;
  output illegal_primitive_outside_connection;

  //------------------------------------------------------------------------- 
  // Intiator bit in the open address frame will be latched in this variable,
  // and it is passed to other instantiation.
  //------------------------------------------------------------------------- 

  output initiator_target;
  output initiator_target_valid;

  output level_select_temp;

  output sas_valid;
  output dword_valid;
  output connection_status;

  output [15:0] target_port_transfer_tag;
  output tgt_prt_tag_valid;

  output valid_g1_state;
  output valid_g2_state;
  output valid_g3_state;
  output neg_state;
  output credit_exhausted;

  output collect_stats;

  //----------------------------------
  // Wire and Register declarations.
  //----------------------------------

  // ----------------------------------------------------------------
  // This variable hold the Electical idle value during parallel mode 
  // of operation depending upon the electrical_idle signal.
  //-----------------------------------------------------------------

  wire [ZI_PORT_WIDTH_PLUS-1:0] sas_data_plus; 

  //-----------------------------------------------------------------------
  // Declaration for muxed cominit_det, cominit_sent, cominit_det_received
  // cominit_sent_received, comsas_det, comsas_det_received,
  // and comsas_sent_received.  Depending upon the TX_INTERFACE parameter
  // it will be muxed
  //-----------------------------------------------------------------------

  wire cominit_det_rcvd;
  wire comsas_det_rcvd;
  wire cominit_sent_xmtd;
  wire comsas_sent_xmtd;
  wire level_select_temp;
  wire level_select;

  wire align0_xmtd;
  wire align1_xmtd;

  //----------------------------------------
  // Internal register declarations
  //----------------------------------------
  
  reg [31:0] temp_rx_cominit_min; 
  reg [31:0] temp_rx_cominit_max;
  reg [31:0] temp_rx_comsas_min;
  reg [31:0] temp_rx_comsas_max;
  reg [31:0] temp_cominit_idle_period;
  reg [31:0] temp_comsas_idle_period;
  reg [31:0] temp_cominit_neg_time;
  reg [31:0] temp_comsas_neg_time;
  reg [31:0] temp_rx_cominit_neg;
  reg [31:0] temp_rx_comsas_neg; 

  reg aip_flag_posedge;
  reg aip_flag_negedge;
  wire aip_flag;

  reg done_flag_posedge;
  reg done_flag_negedge;
  wire done_flag;

  reg close_flag_posedge;
  reg close_flag_negedge;
  wire close_flag;

  reg break_flag_posedge;
  reg break_flag_negedge;
  wire break_flag; 

  reg align_burst_flag_posedge;
  reg align_burst_flag_negedge;
  wire align_burst_flag;

  reg next_start_rcd;
  reg next_parallel_rcd;
  reg next_cominit_completed;

  reg start_rcd_posedge;
  reg start_rcd_negedge;
  wire start_rcd;

  reg cominit_completed_posedge;
  reg cominit_completed_negedge;
  wire cominit_completed;

  reg parallel_rcd_posedge;
  reg parallel_rcd_negedge;
  wire parallel_rcd;

  reg posedge_toggle;
  reg negedge_toggle;
  reg r_cominit_sent_posedge;
  reg r_cominit_det_posedge;
  reg r_comsas_sent_posedge;
  reg r_comsas_det_posedge;
  reg r_latched_hold_det_posedge;

  //-------------------------------------------------------------------------
  // These counters are used to validate the repeated primitive sequence.
  //-------------------------------------------------------------------------

  reg [1:0] close_prim_count_posedge;
  reg [1:0] close_prim_count_negedge;
  wire [1:0] close_prim_count;

  reg [2:0] break_prim_count_posedge;
  reg [2:0] break_prim_count_negedge;
  wire [2:0] break_prim_count;

  reg [2:0] change_prim_count_posedge;
  reg [2:0] change_prim_count_negedge;
  wire [2:0] change_prim_count;

  reg [2:0] hard_rst_count_posedge; 
  reg [2:0] hard_rst_count_negedge;
  wire [2:0] hard_rst_count;

  reg [1:0] sata_xrdy_count_posedge;
  reg [1:0] sata_xrdy_count_negedge;
  wire [1:0] sata_xrdy_count;

  reg [1:0] sata_rrdy_count_posedge;
  reg [1:0] sata_rrdy_count_negedge;
  wire [1:0] sata_rrdy_count;

  reg [1:0] sata_wtrm_count_posedge;
  reg [1:0] sata_wtrm_count_negedge;
  wire [1:0] sata_wtrm_count;

  reg [1:0] sata_sync_count_posedge;
  reg [1:0] sata_sync_count_negedge;
  wire [1:0] sata_sync_count;
  
  reg [1:0] sata_rok_count_posedge;
  reg [1:0] sata_rok_count_negedge;
  wire [1:0] sata_rok_count;

  reg [1:0] sata_rip_count_posedge;
  reg [1:0] sata_rip_count_negedge;
  wire [1:0] sata_rip_count;

  reg [1:0] sata_rerr_count_posedge;
  reg [1:0] sata_rerr_count_negedge;
  wire [1:0] sata_rerr_count;

  reg [1:0] sata_hold_count_posedge;
  reg [1:0] sata_hold_count_negedge;
  wire [1:0] sata_hold_count;

  reg [1:0] sata_holda_count_posedge;
  reg [1:0] sata_holda_count_negedge;
  wire [1:0] sata_holda_count;

  //------------------------------------------------
  // Declaration of timeout counters
  //------------------------------------------------
 
  reg [31:0] comsas_timeout_count_posedge;
  reg [31:0] comsas_timeout_count_negedge; 

  //-----------------------------------------------
  // Declaration for negation counters.
  //-----------------------------------------------
  reg [31:0] comx_negation_count_posedge;
  reg [31:0] comx_negation_count_negedge;

  //---------------------------------------------------------------------
  // State variable declarations
  //---------------------------------------------------------------------

  reg [7:0] present_state_posedge;
  reg [7:0] present_state_negedge;   
  wire [7:0] present_state;
  reg [7:0] next_state;

  //--------------------------------------------------------------------- 
  // These variables are used in speed negotiation logical block.
  //---------------------------------------------------------------------

  reg [31:0] sas_rcd_count_posedge;
  reg [31:0] sas_rcd_count_negedge;
  wire [31:0] sas_rcd_count;

  reg [31:0] sas_hotplug_timeout_count_posedge;
  reg [31:0] sas_hotplug_timeout_count_negedge;
  wire [31:0] sas_hotplug_timeout_count;

  wire sas_align_detect;
  wire sas_align1_detect;
  wire sas_align2_detect;
  wire sas_align3_detect;
  wire notify_det;
  wire res_notify_det;
  wire res_broadcast_det;

  reg [31:0] ident_timeout_count_posedge;
  reg [31:0] ident_timeout_count_negedge;

  reg [31:0] hard_reset_count_posedge;
  reg [31:0] hard_reset_count_negedge;

  reg [5:0] addr_frame_count_posedge;
  reg [5:0] addr_frame_count_negedge;

  wire [31:0] descrambled_data;

  //------------------------------------------------------------------------- 
  // This counter will be incremented when soaf_det signal is high.
  // It is used for counting the number of bytes in the Identification address
  // frame.
  //-------------------------------------------------------------------------

  wire [5:0] addr_frame_count;

  //-----------------------------------------
  // String declarations for state variables
  //----------------------------------------

  reg [10*8 -1:0] present_state_string;
  reg [10*8 -1:0] next_state_string;

  //--------------------------
  // Wire declarations
  //--------------------------

  wire electrical_idle_detected;

  wire [9:0] sas_10b_data;
  wire sas_valid;
  wire sas_current_rd;
  wire [7:0] next_8b_data;
  wire sas_d_or_k_code;
  wire sas_r_d_or_k_code;
  wire sas_10b_code_violation;
 
  wire [31:0] comsas_timeout_count;
  wire [31:0] comx_negation_count;
 
  wire knock_off_g3state;
  wire knock_off_g2state;

  //--------------------------------------------------------------------
  // This counter will be incremented once the Identify Address frame is
  // sent.
  //--------------------------------------------------------------------

  wire [31:0] ident_timeout_count; 

  //-------------------------------------------------------------------------
  // This counter will be incremented once HARD reset primitive is detected 
  // on bus.
  //-------------------------------------------------------------------------

  wire [31:0] hard_reset_count; 

  reg r_soaf_detected_posedge;
  reg r_soaf_detected_negedge;
  wire r_soaf_detected;

  reg rr_soaf_detected_posedge;
  reg rr_soaf_detected_negedge;
  wire rr_soaf_detected;

  reg r_sof_detected_posedge;
  reg r_sof_detected_negedge;
  wire r_sof_detected;

  reg r_sof_det_posedge;
  reg r_sof_det_negedge;
  wire r_sof_det;

  reg rr_sof_detected_posedge;
  reg rr_sof_detected_negedge;

  //----------------------------------------------------------------------
  // Declarations for Latched signals
  //----------------------------------------------------------------------

  reg latched_iaf_sent_posedge;
  reg latched_iaf_sent_negedge;
  wire latched_iaf_sent;

  reg latched_iaf_received_posedge;
  reg latched_iaf_received_negedge;
  wire latched_iaf_received;

  reg latched_break_det_posedge;
  reg latched_break_det_negedge;
  wire latched_break_det;

  reg latched_break_det_received_posedge;
  reg latched_break_det_received_negedge;
  wire latched_break_det_received;

  reg latched_close_det_posedge;
  reg latched_close_det_negedge;
  wire latched_close_det;

  reg latched_done_det_posedge;
  reg latched_done_det_negedge;
  wire latched_done_det;

  reg latched_done_det_rcvd_posedge;
  reg latched_done_det_rcvd_negedge;
  wire latched_done_det_rcvd;

  reg latched_close_affl_det_posedge;
  reg latched_close_affl_det_negedge;
  wire latched_close_affl_det;

  reg latched_close_det_received_posedge;
  reg latched_close_det_received_negedge;
  wire latched_close_det_received; 

  reg latched_close_affl_det_rcvd_posedge;
  reg latched_close_affl_det_rcvd_negedge;
  wire latched_close_affl_det_rcvd;

  reg latched_sync_det_posedge;
  reg latched_sync_det_negedge;
  wire latched_sync_det;

  reg latched_sync_det_received_posedge;
  reg latched_sync_det_received_negedge;
  wire latched_sync_det_received;

  reg latched_hold_det_posedge;
  reg latched_hold_det_negedge;
  wire latched_hold_det;

  reg latched_holda_det_received_posedge;
  reg latched_holda_det_received_negedge;
  wire latched_holda_det_received;

  //---------------------------------------------------------------------
  // Wire declarations for various types of OPEN rejects.
  //---------------------------------------------------------------------

  wire connection_req_rej_no_destination;
  wire connection_req_rej_bad_destination;
  wire connection_req_rej_wr_destination;
  wire connection_req_rej_lnk_rate_not_supported;
  wire connection_req_reject_retry;
  wire connection_req_rej_protocol_not_supported;
  wire connection_req_rej_pathway_block;
  wire connection_req_rej_res_busy;
  wire connection_req_wait_partial;
  wire connection_req_wait_connection;
  wire connection_req_wait_device;

  //----------------------------------------------------------------------
  // Wire declarations for NAK primitives
  //----------------------------------------------------------------------

  wire nak_received_with_crc_error;

  //-----------------------------------------------------------------------
  // This signal will be asserted when CRC error occured in the frame.
  //----------------------------------------------------------------------- 

  wire crc_err;

  //---------------------------------------------------------------- 
  // These variables are used to store the open address fame fields
  //----------------------------------------------------------------

  wire initiator_target;
  wire initiator_target_valid;
  wire [2:0] protocol;
  wire protocol_valid;

  //-----------------------------------------------------------------------
  // Variable declarations for timeout counters
  //-----------------------------------------------------------------------

  reg [31:0] ack_nak_timeout_posedge;
  reg [31:0] ack_nak_timeout_negedge;
  wire [31:0] ack_nak_timeout_count;

  reg [31:0] credit_timeout_posedge;
  reg [31:0] credit_timeout_negedge;
  wire [31:0] credit_timeout_count;

  reg [31:0] break_timeout_posedge;
  reg [31:0] break_timeout_negedge;
  wire [31:0] break_timeout_count;

  reg [31:0] close_timeout_posedge;
  reg [31:0] close_timeout_negedge;
  wire [31:0] close_timeout_count;

  reg [31:0] done_timeout_posedge;
  reg [31:0] done_timeout_negedge;
  wire [31:0] done_timeout_count;

  reg [31:0] open_addr_res_timeout_posedge;
  reg [31:0] open_addr_res_timeout_negedge;
  wire [31:0] open_addr_res_timeout_count;

  //--------------------------------------------------------------
  // This signal will go high when timeout occurs
  //-------------------------------------------------------------
 
  wire timeout;

  //------------------------------------------------
  // SMP variable declarations
  //------------------------------------------------

  reg [7:0] smp_req_fn_posedge;
  reg [7:0] smp_req_fn_negedge;
  wire [7:0] smp_req_fn;
  reg smp_req_fn_valid_posedge;
  reg smp_req_fn_valid_negedge;
  wire smp_req_fn_valid;

  reg [7:0] smp_res_fn_posedge;
  reg [7:0] smp_res_fn_negedge;
  wire [7:0] smp_res_fn;
  reg smp_res_fn_valid_posedge;
  reg smp_res_fn_valid_negedge;
  wire smp_res_fn_valid;

  reg [31:0] smp_req_count_posedge;
  reg [31:0] smp_req_count_negedge;
  wire [31:0] smp_req_count;

  reg [31:0] smp_res_count_posedge;
  reg [31:0] smp_res_count_negedge;
  wire [31:0] smp_res_count;

  //---------------------------------------------
  // SSP variable declarations
  //---------------------------------------------

  reg [31:0] credit_count_posedge;
  reg [31:0] credit_count_negedge;
  wire [31:0] credit_count;
  reg read_data_count_disable_posedge;
  reg read_data_count_disable_negedge;
  wire read_data_count_disable;
  reg [31:0] data_frame_count_posedge;
  reg [31:0] data_frame_count_negedge;
  reg data_frame_count_valid_posedge;
  reg data_frame_count_valid_negedge;
  wire [31:0] data_frame_count; 
  wire data_frame_count_valid;
  wire rrdy_det;
  wire credit_block_det;
  wire error_det;
  wire [2:0] disable_scr_count;

  reg no_frame_after_done_posedge;
  reg no_frame_after_done_negedge;
  wire no_frame_after_done;

  reg r_align0_to_align1_trans_posedge;
  reg r_align0_to_align1_trans_negedge;
  wire r_align0_to_align1_trans;

  wire close_normal_det;

  reg [1:0] close_affliation_prim_count_posedge;
  reg [1:0] close_affliation_prim_count_negedge;
  wire [1:0] close_affliation_prim_count;
  wire close_affliation_det;

  wire close_affliation_prim_count_violation; 

  wire tgt_prt_xfer_tag_violation;

  wire tgt_prt_tag_mismatch;

  reg waiting_for_ack_nak_posedge;
  reg waiting_for_ack_nak_negedge;
  wire waiting_for_ack_nak;

  reg sata_xrdy_transmitted_posedge;
  reg sata_xrdy_transmitted_negedge;
  wire sata_xrdy_transmitted;

  reg sata_rrdy_rcvd_posedge;
  reg sata_rrdy_rcvd_negedge; 
  wire sata_rrdy_rcvd;

  reg wtrm_received_posedge;
  reg wtrm_received_negedge;
  wire wtrm_received;

  reg wtrm_posedge;
  reg wtrm_negedge;
  wire wtrm;

  reg frame_transmitted_posedge;
  reg frame_transmitted_negedge;
  wire frame_transmitted;

  reg xferrdy_received_posedge;
  reg xferrdy_received_negedge;
  wire xferrdy_received;

  reg data_sent_posedge;
  reg data_sent_negedge;
  wire data_sent;

  reg [15:0] target_port_transfer_tag_posedge;
  reg [15:0] target_port_transfer_tag_negedge;
  wire [15:0] target_port_transfer_tag;

  reg tgt_prt_tag_valid_posedge;
  reg tgt_prt_tag_valid_negedge;
  wire tgt_prt_tag_valid;

  reg connection_status_posedge;
  reg connection_status_negedge;
  wire connection_status;

  wire done_det_ack_nak_timeout;

  wire illegal_primitive_inside_ssp_connection;
  wire illegal_primitive_inside_smp_connection;
  wire illegal_primitive_inside_stp_connection;
  wire illegal_primitive_outside_connection;

  reg rate_supported_posedge;
  reg rate_supported_negedge;
  wire rate_supported;

  reg align0_to_align1_trans_posedge;
  reg align0_to_align1_trans_negedge;
  wire align0_to_align1_trans;

  reg align_detect_posedge;
  reg align_detect_negedge;
  wire align_detect;

  wire align0_to_align1_trans_violation;
  wire electrical_idle_detected_within_SNTT;

  wire spd_neg_window_violation;

  wire non_align_primitive_in_spd_neg_window;

  reg xferrdy_received_ack_nak_posedge;
  reg xferrdy_received_ack_nak_negedge;
  wire xferrdy_received_ack_nak;

  reg data_received_ack_nak_posedge;
  reg data_received_ack_nak_negedge;
  wire data_received_ack_nak;

  //---------------------------------------------------------------
  // Sequence detector variables
  //---------------------------------------------------------------

  wire [31:0] comx_idle_time_count;    // This counter will be incremented
                                       // between ALIGN bursts.
  wire [2:0] align_burst_time_count;   // This counter will be incremented
                                       // once sas_align_detect signal is
                                       // asserted

  wire neg_period_start;
  wire align_burst;
  wire align1_align_burst;
  
  wire cominit_seq;
  wire comsas_seq;

  reg [31:0] comx_idle_time_count_posedge;
  reg [31:0] comx_idle_time_count_negedge;
  reg [2:0] align_burst_time_count_posedge;
  reg [2:0] align_burst_time_count_negedge;

  reg [2:0] idle_burst_time_count_posedge;
  reg [2:0] idle_burst_time_count_negedge;
  wire [2:0] idle_burst_time_count;

  reg [3:0] align_count_posedge;
  reg [3:0] align_count_negedge;
  wire [3:0] align_count;
 
  reg r_cominit_seq_posedge;
  reg r_cominit_seq_negedge;
  wire r_cominit_seq;

  reg r_comsas_seq_posedge;
  reg r_comsas_seq_negedge;
  wire r_comsas_seq; 

  reg [2:0] seq_present_state_posedge;
  reg [2:0] seq_present_state_negedge;

  wire [2:0] seq_present_state;
  reg [2:0] seq_next_state;

  wire cominit_idle_time_violation;
  wire comsas_idle_time_violation;
  wire align_count_violation;

  wire cominit_neg_time_violation;
  wire comsas_neg_time_violation;

  //---------------------------------------
  // Register declarations
  //---------------------------------------

  reg cominit_sent_posedge; 
  reg cominit_sent_negedge;
  reg cominit_det_posedge; 
  reg cominit_det_negedge;
  reg comsas_sent_posedge;
  reg comsas_sent_negedge;
  reg comsas_det_posedge; 
  reg comsas_det_negedge; 

  reg initiator_target_posedge;
  reg initiator_target_negedge;
  reg initiator_target_valid_posedge;
  reg initiator_target_valid_negedge;
  reg [2:0] protocol_posedge;
  reg [2:0] protocol_negedge;
  reg protocol_valid_posedge;
  reg protocol_valid_negedge;

  reg [7:0] info_unit_type_posedge;
  reg [7:0] info_unit_type_negedge;
  reg info_unit_type_valid_posedge;
  reg info_unit_type_valid_negedge;

  wire [7:0] frame_type;

  reg [1:0] data_pres_posedge;
  reg [1:0] data_pres_negedge;
  wire [1:0] data_pres;

  reg [7:0] status_posedge;
  reg [7:0] status_negedge;
  wire [7:0] status;

  reg [31:0] sense_data_length_posedge;
  reg [31:0] sense_data_length_negedge;
  wire [31:0] sense_data_length;

  reg [31:0] response_data_length_posedge;
  reg [31:0] response_data_length_negedge;
  wire [31:0] response_data_length; 

  wire [31:0] in_data;
  wire dword_valid;

  reg [31:0] crc_posedge;
  reg [31:0] crc_negedge;
  wire [31:0] crc;

  wire crc_enable;

  reg [2:0] crc_count_posedge;
  reg [2:0] crc_count_negedge;
  wire [2:0] crc_count;

  wire sata_rip_det;
  wire sata_cont_det;
  wire sata_dmat_det;

  reg [31:0] data_byte_count_posedge;
  reg [31:0] data_byte_count_negedge;
  wire [31:0] data_byte_count;

  reg sof_detect_posedge;
  reg sof_detect_negedge;

  //--------------------------------------------------------------------------
  // This signal will be asserted when SOF is detected and it will be deasserted
  // when EOF is detected.  This signal will be high for one entire 
  // SSP or SMP frame.
  //--------------------------------------------------------------------------

  wire sof_detect;

  reg sata_sof_detect_posedge;
  reg sata_sof_detect_negedge;

  //------------------------------------------------------------------------
  // This signal will be asserted when SATA_SOF is detected and it will be 
  // deasserted when SATA_EOF is detected.  This signal will be 
  // high for one entire STP frame.
  //------------------------------------------------------------------------

  wire sata_sof_detect;

  reg soaf_det_posedge;
  reg soaf_det_negedge;

  //-----------------------------------------------------------------------
  // This signal will be asserted when SOAF is detected and deasserted
  // when EOAF is detected.  This signal will be
  // high for one entire Address frame.
  //-----------------------------------------------------------------------

  wire soaf_det;

  //--------------------------------------------------------------------
  // Following signals will be asserted when reserved primitives are
  // detected.
  //--------------------------------------------------------------------

  wire reserved_aip_primitive;
  wire reserved_broadcast_primitive;
  wire reserved_close_primitive;
  wire reserved_notify_primitive;
  wire reserved_opn_rej_primitive;
  wire reserved_done_primitive;
  wire reserved_nak_primitive;
  wire reserved_rrdy_primitive;

  //------------------------------------------------------------------------
  // These variables are used to check, NAK has been received for frame with 
  // CRC error. 
  //------------------------------------------------------------------------

  reg crc_err_flag_posedge;
  reg crc_err_flag_negedge;
  wire crc_err_flag;

  //--------------------------------------------------------------------------
  // These variables are used to check, AIP primitive violation. Expander 
  // devices should send no more than 3 AIP primitives consecutively
  // without sending an idle dword.
  //-------------------------------------------------------------------------- 

  reg [2:0] aip_count_posedge;
  reg [2:0] aip_count_negedge;
  wire [2:0] aip_count;

  //-----------------------------------------------------------------------
  // These variables are used to check, AIP primitive violation.  Expander 
  // devices should send AIP primitive sequence every 128 dwords.
  //-----------------------------------------------------------------------

  reg [9:0] aip_dword_count_posedge;
  reg [9:0] aip_dword_count_negedge;
  wire [9:0] aip_dword_count;
  
  //----------------------------------------------------------------------
  // No more than 2047 dwords shall be sent without an ALIGN in SAS port.
  // These variables are used to check that behavior.
  //----------------------------------------------------------------------

  reg [31:0] align_dword_count_posedge;
  reg [31:0] align_dword_count_negedge;
  wire [31:0] align_dword_count;

  //-----------------------------------------------------------------------
  // No more than 254 dwords shall be sent without two consecutive ALIGN's
  // in STP port.
  //-----------------------------------------------------------------------

  reg [1:0] stp_align_count_posedge;
  reg [1:0] stp_align_count_negedge;
  wire [1:0] stp_align_count; 

  reg [31:0] stp_align_dword_count_posedge;
  reg [31:0] stp_align_dword_count_negedge;
  wire [31:0] stp_align_dword_count;

  //--------------------------------------------------------------------
  // These variables are used to validate the number of data frames sent
  // and the number of acknowledgements received.
  //--------------------------------------------------------------------

  reg [31:0] ack_sent_count_posedge;
  reg [31:0] ack_sent_count_negedge;
  wire [31:0] ack_sent_count; 
 
  reg [31:0] ack_received_count_posedge;
  reg [31:0] ack_received_count_negedge;
  wire [31:0] ack_received_count;

  reg [31:0] nak_sent_count_posedge;
  reg [31:0] nak_sent_count_negedge;
  wire [31:0] nak_sent_count;

  reg [31:0] nak_received_count_posedge;
  reg [31:0] nak_received_count_negedge;
  wire [31:0] nak_received_count;

  // ------------------------------------------------------------------
  // These variables are used to track the rotation of ALIGNS
  // ------------------------------------------------------------------

  reg align0_expected_posedge;
  reg align0_expected_negedge;
  wire align0_expected;

  reg align1_expected_posedge;
  reg align1_expected_negedge;
  wire align1_expected;

  reg align2_expected_posedge;
  reg align2_expected_negedge;
  wire align2_expected;

  reg align3_expected_posedge;
  reg align3_expected_negedge;
  wire align3_expected;
  reg dummy; // signal used to avoid SPC violation in serial mode

  //------------------------------------------------------
  // Register declaration for statistics
  //------------------------------------------------------ 

  reg [63:0] no_of_data_frames;
  reg no_of_data_frames_flag;

  reg [63:0] no_of_command_frames;
  reg no_of_command_frames_flag;

  reg [63:0] no_of_xferrdy_frames;
  reg no_of_xferrdy_frames_flag;

  reg [63:0] no_of_task_frames;
  reg no_of_task_frames_flag;

  reg [63:0] no_of_response_frames;
  reg no_of_response_frames_flag;

  reg [63:0] no_of_open_addr_frames;
  reg no_of_open_addr_frames_flag;

  reg [63:0] no_of_ident_addr_frames;
  reg no_of_ident_addr_frames_flag;

  reg [63:0] no_of_non_align0_align_bursts;
  reg no_of_non_align0_align_bursts_flag;

  wire [63:0] no_of_transactions;

  reg [63:0] frames_with_crc_error;
  reg [63:0] frames_with_crc_error_flag;

  reg [63:0] no_of_phy_reset_seq_count;
  reg no_of_phy_reset_seq_count_flag;

  reg [63:0] no_of_link_reset_seq_count;
  reg no_of_link_reset_seq_count_flag;

  reg [63:0] transactions_completed_without_err;
  wire trans_completed_without_err;
  reg trans_completed_without_err_flag;

  reg [63:0] ack_received;
  reg ack_received_flag;

  reg [63:0] nak_received_with_crc_err;
  reg nak_received_with_crc_err_flag;

  reg [63:0] connection_req_accepted;
  reg connection_req_accepted_flag;

  reg [63:0] connection_req_rej_with_no_des;
  reg connection_req_rej_with_no_des_flag;

  reg [63:0] connection_req_rej_with_bad_des;
  reg connection_req_rej_with_bad_des_flag;

  reg [63:0] connection_req_rej_with_wr_des;
  reg connection_req_rej_with_wr_des_flag;

  reg [63:0] connection_req_rej_with_lnk_rate_not_supp;
  reg connection_req_rej_with_lnk_rate_not_supp_flag;

  reg [63:0] connection_req_rej_with_retry;
  reg connection_req_rej_with_retry_flag;

  reg [63:0] connection_req_rej_with_protocol_not_supp;
  reg connection_req_rej_with_protocol_not_supp_flag;

  reg [63:0] connection_req_rej_with_pathway_block;
  reg connection_req_rej_with_pathway_block_flag;

  reg [63:0] connection_req_rej_with_resource_busy;
  reg connection_req_rej_with_resource_busy_flag;

  wire [63:0] max_frame_size;
  wire [63:0] min_frame_size;

  reg [63:0] no_of_ssp_transactions;
  reg no_of_ssp_transactions_flag;

  reg [63:0] no_of_stp_transactions;
  reg no_of_stp_transactions_flag;

  reg [63:0] no_of_smp_transactions;
  reg no_of_smp_transactions_flag;

  reg [63:0] no_of_times_timeout_occured;
  reg no_of_times_timeout_occured_flag;

  reg [63:0] no_of_times_ack_nak_timeout_occured;
  reg no_of_times_ack_nak_timeout_occured_flag;

  reg [63:0] no_of_times_credit_timeout_occured;
  reg no_of_times_credit_timeout_occurs_flag;

  reg [63:0] connection_req_wait_on_partial;
  reg connection_req_wait_on_partial_flag;

  reg [63:0] connection_req_wait_on_device;
  reg connection_req_wait_on_device_flag;

  reg [63:0] connection_req_wait_on_connection;
  reg connection_req_wait_on_connection_flag;

  reg [63:0] disparity_err_occured;
  reg disparity_err_occured_flag;

  wire collect_stats; 
  
  //--------------------------------------------------------------------

  reg [31:0] g1rate_trans_time_count_posedge;
  reg [31:0] g1rate_trans_time_count_negedge;
  wire [31:0] g1rate_trans_time_count;

  reg [31:0] g2rate_trans_time_count_posedge;
  reg [31:0] g2rate_trans_time_count_negedge;
  wire [31:0] g2rate_trans_time_count;

  reg [31:0] g3rate_trans_time_count_posedge;
  reg [31:0] g3rate_trans_time_count_negedge;
  wire [31:0] g3rate_trans_time_count;

  reg [31:0] neg_rate_trans_time_count_posedge;
  reg [31:0] neg_rate_trans_time_count_negedge;
  wire [31:0] neg_rate_trans_time_count;

  reg [31:0] g1rate_lock_time_count_posedge;
  reg [31:0] g1rate_lock_time_count_negedge;
  wire [31:0] g1rate_lock_time_count;

  reg [31:0] g2rate_lock_time_count_posedge;
  reg [31:0] g2rate_lock_time_count_negedge;
  wire [31:0] g2rate_lock_time_count;

  reg [31:0] g3rate_lock_time_count_posedge;
  reg [31:0] g3rate_lock_time_count_negedge;
  wire [31:0] g3rate_lock_time_count;

  reg [31:0] neg_rate_lock_time_count_posedge;
  reg [31:0] neg_rate_lock_time_count_negedge;
  wire [31:0] neg_rate_lock_time_count;

  wire [31:0] g1rate_trans_time;
  wire [31:0] g2rate_trans_time;
  wire [31:0] g3rate_trans_time;

  wire [31:0] g1rate_lock_time;
  wire [31:0] g2rate_lock_time;
  wire [31:0] g3rate_lock_time;
 
  wire [31:0] g1rcdval;
  wire [31:0] g2rcdval;
  wire [31:0] g3rcdval;
  wire [31:0] negrcdval;

  wire [31:0] neg_rate_trans_time;
  wire [31:0] neg_rate_lock_time;

  reg valid_g1_state_posedge;
  reg valid_g1_state_negedge;
  reg valid_g2_state_posedge;
  reg valid_g2_state_negedge;
  reg valid_g3_state_posedge;
  reg valid_g3_state_negedge;
  reg neg_state_posedge;
  reg neg_state_negedge;

  wire valid_g1_state;
  wire valid_g2_state;
  wire valid_g3_state;
  wire neg_state;

  wire disable_descramble;
  
  reg [31:0] stp_dword_count_posedge;
  reg [31:0] stp_dword_count_negedge;
  wire [31:0] stp_dword_count;

  wire [31:0] acc_32_bit_data;

  wire primitive_violation;
  wire primitive_violation_received;
  wire stp_hold_holda_dword_violation;
  wire frame_with_crc_err_without_nak;
  wire more_than_3consecutive_aip; 
  wire aip_dword_count_violation;
  wire align_dword_count_violation;
  wire stp_align_dword_count_violation;
  wire ack_nak_timeout_violation;
  wire credit_timeout_violation;
  wire close_timeout_violation;
  wire done_timeout_violation;

  //-----------------------------------------------------------
  // Statistics variable declarations
  //-----------------------------------------------------------

  wire phy_reset_seq_completed;
  wire link_reset_seq_completed;
  wire ssp_transaction_comp;
  wire stp_transaction_comp;
  wire smp_transaction_comp;
  wire timeout_occur;
  wire ack_nak_timeout_occur;
  wire credit_timeout_occur;
  wire disparity_err;

  reg [63:0] min_max_counter_posedge;
  reg [63:0] min_max_counter_negedge;
  wire [63:0] min_max_counter;

  reg [63:0] min_data_reg_posedge;
  reg [63:0] min_data_reg_negedge;
  wire [63:0] min_data_reg;

  reg min_data_reg_flag_posedge;
  reg min_data_reg_flag_negedge;
  wire min_data_reg_flag;

  reg [63:0] max_data_reg_posedge;
  reg [63:0] max_data_reg_negedge;
  wire [63:0] max_data_reg;

  //----------------------------------------------------
  // Variable Declarations for violation signals
  //----------------------------------------------------

  wire done_prim_in_smp_stp;
  wire open_rej_bad_des_not_by_expander_device;
  wire open_rej_no_des_not_from_expander;
  wire open_rej_pathway_block_from_non_expander_device;
  wire fis_type_violation;
  wire phy_identifier_violation;
  wire ssp_min_frame_size_violation;
  wire ssp_max_frame_size_err;
  wire ssp_frame_size_error;
  wire discard_frame;
  wire four_byte_align_violation;
  wire sense_length_violation;
  wire response_length_violation;
  wire response_list_length_violation;
  wire sense_list_length_violation;
  wire retransmit_bit_violation;

  wire addr_frame_type_err;
  wire iaf_device_type_err;
  wire iaf_max_frame_size_err;

  wire oaf_protocol_err;
  wire oaf_feature_field_err;
  wire oaf_link_rate_err;
  wire oaf_conn_tag_err;
  wire oaf_max_frame_size_err;

  wire smp_req_frame_type_err;
  wire smp_req_fn_err;
  wire smp_req_phy_operation_err;
  wire smp_req_prog_min_phy_rate_err;
  wire smp_req_prog_max_phy_rate_err;

  wire smp_res_frame_type_err;
  wire smp_res_fn_err;
  wire smp_res_fn_result_err;
  wire smp_res_route_attr_err;
  wire smp_attached_dev_type_err; 
  wire smp_res_cur_phy_rate_err;

  wire ssp_task_atribute_err;
  wire ssp_task_man_fn_err;
  wire data_pres_err;
  wire status_err;
  wire ssp_res_code_err;

  // Repeated primitive violation

  wire close_prim_violation;
  wire break_prim_violation;
  wire change_prim_violation;
  wire hard_rst_prim_violation;
  wire sata_xrdy_prim_violation;
  wire sata_wtrm_prim_violation;
  wire sata_sync_prim_violation;
  wire sata_rrdy_prim_violation;
  wire sata_rok_prim_violation;
  wire sata_rerr_prim_violation;
  wire sata_hold_prim_violation;
  wire sata_holda_prim_violation;
  wire sata_rip_prim_violation;

  wire aip_xmtd_by_non_expander;
  wire error_xmtd_by_non_expander;
  wire read_data_ack_mismatch;
  wire bidir_data_ack_mismatch;

  wire smp_req_res_fn_err;
  wire hard_reset_violation;
  wire hotplug_violation;

  wire valid_primitive;

  reg valid_primitive_det_posedge;
  reg valid_primitive_det_negedge;
  wire valid_primitive_det;

  wire invalid_ssp_frame_type;
  wire [31:0] min_frame;
  wire [31:0] max_frame;

`protected

    MTI!#,#[?*o3*H{}[eB>R,[D[\}5EHzzzz=l#|Q~1R|(IiQD+E#7BCE3$Ve{=\1\G2]R}1v~L*AZ
    ~?rxBoArKm7#el*A^;\,B-_w5+1Qa,->}Exi]=@Ca[UoRBvY7kwx_!G<[2$iskn}}w}mHF||?^k;
    ]Or*^vOY=-[a&#o#T/I5A+]^R}RlkADCG7B+7jTN3{UY#Y_BWsTVe\Kp;UIH}mZ@U-TR5Bnzpu<;
    e_jQi>n2lwJ]#x\a^KU1eZU>ceksD3X27Cx+X.}ARszsnAGu<xjB=OBG_{IsKo)_1[Euo3]{H7J|
    \*7[kHYo=w1ms}u+1nQ1heB[]B+]xO$z!'Gz]eO7rKt/GE3m?\RjUv#o:gs_mIV,_<~O$$~[v1=a
    pzxDv@RKv=*\?BG{=Hj~E^VnVEIOZV,rQ}u$Eao2B#y&53uT$oW^f;s{5[Y7j/anKppJo@]#Oz3}
    pJkGZI?s5?xlnv_?T7^;1ArWp3%>AsHwvKO'ZA@)pBT*6'}Wr!UTpKAxD=o5<v!<7w_vH\#-R"<O
    WGBRC@~\~7+p;3=I!lAE#E^sI$Vt,VAT3CXY-n]EG!-YOKDDKRm*[7[!Y3mJC[EII$T*}VVKCO>7
    H1w?CQo5,Y[O[Wn,no<TmB*E:J}QZk-3~dBrnm!Y{Q[v!ezPCI$R7#<k<r=Um7rm?B-ji}$2d+,[
    B8I+\_iVrltwx~^e5-rk_K-AC2O~ECHl\wUZ,]s;]3nr_G=!'RRG^n~mali?*@jir7_olK'-xK{'
    +<~_woTa]xi-]Hv]X@$jaY*HHzlDrxTI<3zcUEZ,~v{$YwA>YU5oju!5L<CEGu]VnKE-EvD+!YwG
    OBzUr5lVVJv{@LUT{<X15GkU}'CD>4Q~RURW;uzA$rwE=V?_Ex~7JJ#,klq<7R2~U\<@{+k$JnQr
    wjRB_;r]IX;Po_D?QV1*QpeVw=InX'HlVQj^n_v!#+HR7}O[_Osk'=X_^^=AAapsQ}x75?2V,=-r
    B1{1~$Eui-[V5,E<ao=\wlEQO23o$2as*D^*C?;VrmzI8B=QYG)3z\ly[n}>5hal^;eI[]YX^#]e
    5$l{]A+=v+#A_=!V,,J7Uz=R'$yZpD7G5=7/6DK$75====A^ir*>565sTuO2W1m<[;j<{OpRRW\@
    >r02DnJ}x5r'xlCD|n]uu~>w{X\@zoAWE[BR}z|HCYXYjIO~Bji;aJDZzTs$DGaH[DO+{'~K<1sl
    {IuevaG-h-.O@nnQji,t]x!KQ^7-EzD2'>!H$?$l"OE**ez}[;o-^KG-]QDZ\WsE-AVZTE1{KAeC
    p4ormX}eUx'T=E7Z$,,XDn\+3rKHT$l7j![},pp~5rwo*^u5^ok$?e2TDJ@HU@nj<5e/1z,{([<\
    X-opnmYAzFW\3Z7kWe=ImwZtBjvD?p;[yLap}xksU'\vTnjcei1\p!T!7U@+Kz^v3DV*@[B-B5~A
    N,i2m,WaAI=\p]'QQQd''e2X+X5?v1oBQnnx[o]B}Zle7-o7;+Q~IGu$iEsE\!_n=}ZIO^-zo;@T
    R7pROUCmC[CC2K{z;V~5KYT}h!Q#<v}H\a^>Iz(3rYK6p^+-BRv;rTm]O5G^r>_B-\+s+]s1'ADk
    1~R;K$=!w>,VG@5C($sv]5$z3YSv_ix-YUzCvimA1l,\1Im!>[s<}5-'pv3gp_me,uzu/Z>G;'C3
    m-';[2[TIjgUjnl~n^AvmpE>{Q<9Rnpl^3A-nriZEBuo<<v}"[-T[q1EGlC*B2|}x~$!-K=75ns[
    al#7JmDDYU1s$Y!>+u]CZw+^5o!K}~j\n+aARm<{r!l?OAOzAu@AnVGf'<!U[DA;J}?HjjC<He@l
    5YrZHEuZRSkEAH'Os-zT_1,e!V,~^3V3\QZH=2]u*_]EIx,zDxUY_5C.ZVB@*~B<<QY,vp{mx#[;
    [!spEK$YRTVrH1VwZtDkZohRoaDYkAs'V[W[jWOUYzUR#nu1K;YnEY-tL]kCD(BjXrf;1WCF2YKv
    koi2$aRABn{_zQkR=\73*}TJ}Z5;p,llDpia8x2x'V'nzF?[=vU+A^t*#eOe'OIrCi>tt7-p~wa1
    vQ$o\;R1o]YiBqi*ZHJR!pa{T#nTU5^n2o:a|],@oYYlT<+Y'-'1jp{,^RI7W2$ppk5[a!=Qe<[-
    X~5eQ#5l=]!=X7S(Y7QKJGi?3j<B1^UK6Hv=]m{}ivH5#R_+WeiV]'HxQW>2}^VjHaI-W+w1#;za
    '2XlDrC$O{sJm[Xz+$^@sa[u@a>m\-YQDpEj'E_Du+]7mEHDkviw~jxQ]x{$mIuK?<$p~IaHJW7p
    \.?lD'J}[k'Q]-B5$\},?{?oJs'>IE}li}^rBTj^IJ0xov<!+RmJR[G5n*Y0oY>ULz?;1lvQjols
    C]wQ^p2{u^BBmCU,Q^p!u}35DCuG#I!Tz!OQiF^_v$oDu>oVpaRxk>dYoalnx@zpw3-@C1iu-D=i
    \Yu\_ill\55;_kzn]{ARXpRBrI[CoBpW*I$#UpOL3\jJ{U'spkGrbw[^;?j\Xzn,Wt';K'~viA7C
    }ss*YGzQABK-7r?5B-y(+oJK]-RCKIkCGGmVl?JE~DEkW^*JZ<jYoz]ai$>RY?YV~_>5Lo_^RE_H
    oGWlD3j}Q]A3T;5Hoir<C?rm2XAC<AB+l^}5K,}<K[*@lo=7Z-D,jl--]![R$o<vx#CXG#[TWe}H
    *i=xJIuA3xiV=Y2aO?$[?;Dw{J<,*Bu[[VQE="],lDw+W2=AK!OI,>rE}VKG^C!7}nGqSrQQ3H<!
    u4a>Hu]WU\\K[''G'IFl{5>ZA->nIw{Qr<V<YEK\+=Wq_}HJjWXZUa[C\]UKT,@r37u*?p1[w+K-
    W1wHxwQ]'Z!p]O_?rkC?\e-lmTh'0e{<T\-1[#DTw4yC^Gjo~'30z*Dsck>DEU=G-rR!z<e_BaGp
    J:rQX^"lvIDu*Q5R#]G!Y7e1ve?$OYVH=>AG[?=Lu,?{'$*;7}VJy}U5RIBx<;<[3k}?[I$>w>Yx
    T$R*IH=O{gkw}m_DzmsOuxS^a\{k<T@,{m3[om;E3Y=,D7nXUU{@5eCo-TDn7BpHU;e<z{xrYC<j
    ~+Ak'IYGV^Ij,ro=~V'I^]kIVH*R_YDTYBT3ImT!eAX2\-;7E[ij[pU._E~o$uIViwloue~==D~;
    l]DQ'B'+zCpk;<7G{$wexvYvB?riqU5$x5C2Ji5o2s^?;V!oQCj~C5'D+Vr:s**HkHX;2*2Y};<]
    ,$xAe,p*lV~3/_z5!$(Z\BY+sTUY<~x#evD<D$J{+^X}[spnI<a1z+JD]VpzO>muB[rG2$-a+$33
    }iUra]+0>>YwH_@2g}i$ABo,K3CK\WDY^^+\^G1>nKssDra-;VXW5s]5DdK7UxpZ-@J51,Q1<GeV
    D~xO{*7QwV~HWK\]7@&~ETlG[B}{-eJ]QoT3^Zja=XC]kes9=OBaQlAJDVKzko_\Kr<^YXJw.7r;
    $8@jT#aa{r$Ge{$O2xLY@o{.xT>YeCu3;a1jDUBr^i{s[LprDUE7or2*nAZY@jQZH$}]<a>p*rrs
    u~{\<[DnDR-{^@-D>+=@W]l8iIA1@7ev\?J5C$3e}'D27@_*GXE*lx$ZZYE@n\Ou1<Ci~w!{_;*R
    PKETO+^jJez'GAw\KEkK^>[C]emm>Q\]sY35o)RRj}CK\?xTxD;lxCZx1^sI3smlkpDJ&!sxHnHZ
    $KxjIxH^WK<Ta+I<R}<EaA>1s\Elv\nQzT7#euIu7_eTCn[ABLw^CBRwz2}r@{zXX~YmOTnxm1HI
    Ro*B~Y\*a}*V~DoBDAlpl-*oz=V/[}ZuC@JUZ-v~,VIm=<aJ,12Cvx7jDB5O$TY1ZaxJYlZpD]a+
    \]Jn=CHmYem~z2~2]}@mVYi}}>~v1p$'GWOC{n{<+VX,.]G>pE>>vWUn+2l{@/A\k#yV~A@Gx+n-
    5nOa[-2[Ua;<s5Iw+X#qs<\_'[>u@ao?>}~X=Ol,rJ-J5>mIrrA$3{B]1[TovUG?pr>+Bme>?-@R
    xK,Wj3,DwX<s<_?,PDpQ[Y1}<\;EQr>!IN-rn!-R{WGWD]Owv{m}x2O\vY$JERdG#e@Bnu]~Qwn2
    GA2[AGOGBx?=p{uS6OT_E!>ork_AT\eVrAC!2=z$AFCD321lR![GrA3Iz'U1@UAQ'zX9C2ZG&u>$
    D]JUYf@>rksara_^{v"i{$#IAZu;=C[?V?J$}ejBAK;l>K*}!l^~G3TSoJlKR@w<DV<]g]"7\X5S
    _!K5xHC'jWZ^eR={z{>!QEA?u'j}_AAB_ZKr[@WuGgRZU77B+CXQ5r*?E!#CR7^Z5*;9Ci_?PoIJ
    U{RC+|e>lBfLrC_VZn{!v9=kV;}+XQ7'az\WH[^l;pmsDXC^?{0B1]@@+l'G_XxvpnXO#li~Q#Y$
    ~U\B^]w7*#;>[\a@I*@=zZeeWvznRXwVX2?$exkUUC?yzWpuuO+sjQ?HlR;~Bu+TEQezIXo5L2IX
    {<55ewED-*725n]iJC5}_f1WCY&lo#?3XIeAEsE[=J=Ce^}L[x'{~zn+i'Qoxzml>E^Qv}Y_sxA#
    0KpR]*}C]gW[@BD*=#[e+7h*?^[ksvZzx2J>1BAeD<$RuGoqJV,;eRA7IK7r@-oWiB\~7i^eIP~]
    ]?!+I[[]{m}>sH^GIZ]woB^'V5<G{~<j?',K<O$D]pvBxJjnOr;t1Om>z7lpv~AQ3\Bw@D'$o>@s
    D,p>^k1iVkXpvvZvj{wB7!D}wEXOWID1mX[zQnEEVw+uO_kAQZe;--anfi>QR}_,+iw=kZH<e6>1
    ]'Cmvs|@eAw-G1;O'=7yRYQl5eATk<YU_+j*r$Z}I?@2}T-ave5UbZ]o_OW-k1z+UAYreBI}#Be3
    u<epo|8@wXC~Tl@ho+oWA$r#;so,r{3up^m*\s>o;5VkAIW2'1+shUD\x'Gimz+zZ:]x-$r]noNx
    "jKK~Hvs{q^^W+z#[BOUxi|OejZf+]XQ^oAR+$a^[o2Zzi3HlGv=MoC>?,Qu$~G>VyIEe!\=1Vf$
    2GsY3WA;'IkCUZDiIn11:J+zY7XVnewuu$=\Y^L_oramXTm]HAkkw}XI2EuiU2z_!lKP^_AVS1$'
    ]K+HCQD^#?Qz^RHDXT7H5#_pwO{{<x<QUj~H2i]@Jk'r\ksp,Y\o\-{nwn}r2qg^GClvGiI?GUZK
    j{3*zuO55Z\DC~G[CQrm>ewQC+$~luH]swBiY[}6a{^>~V^<<=Qu=Kws_7}jo{jG*_?+1=kn]TnD
    JpK17G@7-D_VBV{^'*XV_,Es/.%qOer2;^#Q(E-uBaaZG^lX{NEjz2~C}WG2r*f5EJY|XUjR4Q7]
    o:ZoDEnlHQVJ_oG@,^mxO-5XV{WE}<.oe?Vo]*]G2X@B#KW'1arow>5?X'voRnBRrUjaXED>5UZe
    7u22-JZ*C}AH,<*bGu\?woNWne{rGWBuRoW5~_ro,@k5z{3u]GAxesukX+~HAr{Tzvv\}xU3E^,W
    nU^L}BAo^2=e>I2B$mzH,}]kv<>?ZoiY^n\^~[w*[ij\2RJ=aTmY_EEUwU}W=zZ^=p']#7=@%t'Y
    i3z7*E->KTYaCoZ*_uoaQo4JGvi~BRG3Q+CO^;;*B?#;Dn5OIw*jQ+^Aj\_vi+rB_m$I~TE.RDDY
    'W<^n'o72QaTBK$[G){EU*X1BG)GAJnCR!wLjiDmsTVj@$Kr+Gs'2R'BxoE!3Rne-^?ejv,j1YwV
    pwwHo#jk-_o1e-3QwEn5I}nrK[7A@-*O^E@]rzi{omK-73+1Yp,1=w_pU,{]|;_a{-ReH?EB';9[
    lD]'\V]\-5]YAxl?p-+Gxo21=CuTwDWJBD$?j<$}XI]CT$$jrpE5iA{gx<n=%G3ejwTr]G{Jbb{A
    _]nvnrQpv#N1rVKG=5x3}Jj]R~5{YAQn1UQKxO+v'sCC*?+_-]Z3OmZ9x;mp_j\pYeTpZ{-+5Zxu
    5$X=RDj1su5C7_+?ax7ls*BzmR@m'-{,Rp7CZ<[3e2Ar@pjnV\DV_HrvMK=1x)x<D=x]xapCQ213
    C!-QT]JO_-K\Co<CUX1~azm$!jzYzGr3_@_KOurK{Wm],pTHWJIs?\yV5#Qw{nC$H2H1^a$G5Dz\
    ,+k5VE>I;=H,m~K#-,#|K7s~*waGZpJ[DTmj-RUG^T}\RsCrX+uA2weC1Du#Y2JU#<1W5OvnJv>G
    Cej=VGDm,z;*rz!pV8{XRsL]RpsEol=OUZw^lTk%8Y5Kn]*Jz)Qn[[D_e$CX_]HR<DvGn/GACv}1
    z-o_jZsu2@#>[ku+5~!la@NxOk?R{_Qx,WY'<Qm5;Hx_Y<\C.0v^{eT5Kpx?*+#T2=~+n^"?RUU8
    $HVRA[Qnh@R'ZXYzz>\Y{C'maiz=]Dxx,!j,Q5WTeMW5*H{V#V[i,I^7Hv;HB#j@\voT>Y}*a5hi
    \>1?++Hp7C5^slOli=~s2{OV32$U*r=e7j*BVl!$$,G?BT5i*'~=}ra<omuL7AB<7@C$cA-Dx$GN
    o<_sZGzxg[>{Bv~njW}QmJjAV+zGw.3Tw=X$$YIJ~;uGTupXQ2,#,Cxs3XRo$n;zI>OYkEk.JGUT
    >Hs~TD$zR$<!huhXo]["QYTnUG[VvU-*Sv!ssmH<JrT,=#Q[YZr=vD1xuGu_mT{HuXBv$iB5UD+C
    swrE~Do^jg{AHp|t<p^B(NdCBZn-{m]
`endprotected

  //--------------------------------------
  // Signal Assignments
  //--------------------------------------

  /*wire [31:0]  PARALLEL_COMINIT_IDLE = ((INTERFACE_TYPE !== 0) ?
                                      (tx_cominit_idle_time/10) :
                                      tx_cominit_idle_time);

  wire [31:0] PARALLEL_COMSAS_IDLE = ((INTERFACE_TYPE !== 0) ?
                                     (tx_comsas_idle_time/10) :
                                     tx_comsas_idle_time);

  wire [31:0] PARALLEL_COMINIT_NEG = ((INTERFACE_TYPE !== 0) ?
                                     (tx_cominit_neg_time/10) :
                                     tx_cominit_neg_time);

  wire [31:0] PARALLEL_COMSAS_NEG = ((INTERFACE_TYPE !== 0) ?
                                    (tx_comsas_neg_time/10) :
                                    tx_comsas_neg_time); */

  wire [31:0]  PARALLEL_COMINIT_IDLE = tx_cominit_idle_time;
  wire [31:0] PARALLEL_COMSAS_IDLE = tx_comsas_idle_time;
  wire [31:0] PARALLEL_COMINIT_NEG = tx_cominit_neg_time;
  wire [31:0] PARALLEL_COMSAS_NEG = tx_comsas_neg_time; 

  wire [31:0] ZI_COMINIT_IDLE_PERIOD = (DEVICE_SPEED_RATE) ?
                                         (2 * PARALLEL_COMINIT_IDLE) :
                                             PARALLEL_COMINIT_IDLE;

  wire [31:0] ZI_COMSAS_IDLE_PERIOD = (DEVICE_SPEED_RATE) ?
                                     (2 * PARALLEL_COMSAS_IDLE) :
                                          PARALLEL_COMSAS_IDLE;

  wire [31:0] ZI_COMINIT_NEG_TIME = (DEVICE_SPEED_RATE) ?
                                   2 * PARALLEL_COMINIT_NEG :
                                       PARALLEL_COMINIT_NEG;

  wire [31:0] ZI_COMSAS_NEG_TIME = DEVICE_SPEED_RATE ?
                                 2 * PARALLEL_COMSAS_NEG :
                                     PARALLEL_COMSAS_NEG;

  /*wire [31:0] HOT_PLUG_TIMEOUT_COUNT = ((INTERFACE_TYPE !== 0) ?
                                           (hotplug_timeout/10) :
                                                hotplug_timeout);

  wire [31:0] COMSAS_TIMEOUT_COUNT = ((INTERFACE_TYPE !== 0) ?
                                           (comsas_timeout/10) :
                                                comsas_timeout); */

  wire [31:0] HOT_PLUG_TIMEOUT_COUNT = hotplug_timeout;
  wire [31:0] COMSAS_TIMEOUT_COUNT = comsas_timeout;

  wire [31:0] ZI_HOT_PLUG_TIMEOUT_COUNT = (DEVICE_SPEED_RATE ?
                                        (2 * HOT_PLUG_TIMEOUT_COUNT) :
                                            HOT_PLUG_TIMEOUT_COUNT);

  wire [31:0] ZI_COMSAS_TIMEOUT_COUNT = (DEVICE_SPEED_RATE ?
                                          (2 * COMSAS_TIMEOUT_COUNT) :
                                               COMSAS_TIMEOUT_COUNT);

  wire [31:0] COMINIT_MIN = DEVICE_SPEED_RATE ? 2 * rx_cominit_idle_time_min :
                                                 rx_cominit_idle_time_min;

  wire [31:0] COMINIT_MAX = DEVICE_SPEED_RATE ? 2 * rx_cominit_idle_time_max :
                                                    rx_cominit_idle_time_max;

  wire [31:0] COMSAS_MIN = DEVICE_SPEED_RATE ? 2 * rx_comsas_idle_time_min :
                                                   rx_comsas_idle_time_min;

  wire [31:0] COMSAS_MAX = DEVICE_SPEED_RATE ? 2 * rx_comsas_idle_time_max :
                                                   rx_comsas_idle_time_max;

  wire [31:0] RX_COMINIT_MIN = COMINIT_MIN;

  wire [31:0] RX_COMINIT_MAX = COMINIT_MAX;

  wire [31:0] RX_COMSAS_MIN = COMSAS_MIN;

  wire [31:0] RX_COMSAS_MAX = COMSAS_MAX;

  wire [31:0] COMINIT_NEG = DEVICE_SPEED_RATE ? 2*rx_cominit_neg_time : 
					       rx_cominit_neg_time;

  wire [31:0] COMSAS_NEG = DEVICE_SPEED_RATE ? 2*rx_comsas_neg_time : 
						 rx_comsas_neg_time;

  wire [31:0] RX_COMINIT_NEG = COMINIT_NEG;

  wire [31:0] RX_COMSAS_NEG = COMSAS_NEG; 

  assign r_sof_det = level_select_temp ? r_sof_det_posedge :
                                         r_sof_det_negedge; 

  assign valid_primitive = (disable_descramble &&
			    (sas_align_detect || sas_align1_detect ||
			     soaf_detected));

  assign valid_primitive_det = level_select_temp ?
				valid_primitive_det_posedge :
				valid_primitive_det_negedge;

  assign align0_xmtd = sas_align_detect;
  assign align1_xmtd = sas_align1_detect;

  assign start_rcd = level_select_temp ? start_rcd_posedge :
                                         start_rcd_negedge;

  assign cominit_completed = level_select_temp ? cominit_completed_posedge :
						 cominit_completed_negedge;

  assign parallel_rcd = level_select_temp ? parallel_rcd_posedge :
                                            parallel_rcd_negedge;

  assign close_normal_det = (acc_32_bit_data === ZI_CLOSE && sas_valid);

  assign align0_to_align1_trans = level_select_temp ?
				 align0_to_align1_trans_posedge :
			         align0_to_align1_trans_negedge;

  assign r_align0_to_align1_trans = level_select_temp ?
                               r_align0_to_align1_trans_posedge :
                               r_align0_to_align1_trans_negedge;

  assign wtrm = level_select_temp ? wtrm_posedge : wtrm_negedge; 

  assign latched_close_affl_det = level_select_temp ?
                                    latched_close_affl_det_posedge :
                                    latched_close_affl_det_negedge;

  assign latched_close_affl_det_rcvd = level_select_temp ?
                        latched_close_affl_det_rcvd_posedge :
                        latched_close_affl_det_rcvd_negedge;

  assign data_sent = level_select_temp ? data_sent_posedge : 
					 data_sent_negedge;

  assign xferrdy_received_ack_nak = level_select_temp ?
                                   xferrdy_received_ack_nak_posedge :
                                   xferrdy_received_ack_nak_negedge;

  assign data_received_ack_nak = level_select_temp ?
                                   data_received_ack_nak_posedge :
                                   data_received_ack_nak_negedge;

  assign align_detect = level_select_temp ? align_detect_posedge :
                                            align_detect_negedge;

  assign rate_supported = level_select_temp ? rate_supported_posedge :
					      rate_supported_negedge;

  assign sas_data_plus = INTERFACE_TYPE ? 
			 ((electrical_idle === 1'b1) ? ELECTRICAL_IDLE_VAL :
						       data_plus) : data_plus;

  assign ssp_res_code_err = (data_byte_count == 51 && !disable_descramble &&
			     (in_data[7:0] !==  8'h0 &&
			      in_data[7:0] !== 8'h02 &&
			      in_data[7:0] !== 8'h04 && 
			      in_data[7:0] !== 8'h05 && 
			      in_data[7:0] !== 8'h08 && 
			      in_data[7:0] !== 8'h09) && sas_valid &&
			      data_pres === 2'b01 &&
			      present_state === ZI_SSP_RESPONSE_STATE &&
			      dword_valid);

  assign invalid_ssp_frame_type = (data_byte_count === 3 &&
				    r_sof_det &&
                                     (protocol === 3'b001 ||
                                      protocol_received === 3'b001) &&
                                     dword_valid === 1'b1 &&
                                     !disable_descramble && 
                                    ((in_data[31:24] !== 8'h01 &&
                                     in_data[31:24] !== 8'h05 &&
                                     in_data[31:24] !== 8'h06 &&
                                     in_data[31:24] !== 8'h16 &&
                                     in_data[31:24] !== 8'h07 &&
                                     (!(VENDOR_SPECIFIC_ENCODING_ENABLE == 0 &&
                                      (in_data[31:24] >= 8'hf0 &&
                                       in_data[31:24] <= 8'hff))))) &&
				     RESERVED_FIELD_CHECK_ENABLE === 1);

  assign illegal_primitive_inside_ssp_connection = 
			  (connection_status === 1'b1 && protocol === 3'b001 &&
			  (sata_sof_det || sata_eof_det || sata_xrdy_det ||
			   sata_rrdy_det || hold_det || holda_det ||
			   wtrm_det || r_ok_det || r_err_det ||
			   sync_det || sata_rip_det || aip ||
			   sata_cont_det || sata_dmat_det || 
			   connection_req_wait_partial ||
			   connection_req_wait_connection ||
			   connection_req_wait_device ||
			   change_det || soaf_detected || eoaf_detected ||
			   open_accept || open_reject
			   ));

  assign illegal_primitive_inside_smp_connection = 
			  (connection_status === 1'b1 && protocol === 3'b0 &&
                          (sata_sof_det || sata_eof_det || sata_xrdy_det ||
                           sata_rrdy_det || hold_det || holda_det ||
                           wtrm_det || r_ok_det || r_err_det ||
                           sync_det || sata_rip_det || aip || rrdy_det ||
			   sata_cont_det || sata_dmat_det ||
                           connection_req_wait_partial ||
                           connection_req_wait_connection ||
                           connection_req_wait_device ||
                           change_det || soaf_detected || eoaf_detected ||
                           open_accept || open_reject || done_det
                           ));

  assign illegal_primitive_inside_stp_connection = 
                          (connection_status === 1'b1 && protocol === 3'b010 &&
                          (sof_det || eof_det || ack_det || nak_det ||
			   connection_req_wait_partial ||
                           connection_req_wait_connection ||
                           connection_req_wait_device || 
                           rrdy_det || done_det || close_normal_det));

  assign illegal_primitive_outside_connection = 
                          (connection_status === 1'b0 &&
			   connection_status_received === 1'b0 &&
                          (sata_sof_det || sata_eof_det || sata_xrdy_det ||
                           sata_rrdy_det || hold_det || holda_det ||
			   sata_cont_det || sata_dmat_det ||
                           wtrm_det || r_ok_det ||
                           sata_rip_det || ack_det || nak_det ||
                           done_det || sof_det || eof_det || rrdy_det));

  assign connection_status = level_select_temp ? connection_status_posedge :
						 connection_status_negedge; 

  assign tgt_prt_tag_valid = level_select_temp ? tgt_prt_tag_valid_posedge :
						 tgt_prt_tag_valid_negedge;

  assign tgt_prt_tag_mismatch = ((target_port_transfer_tag_rcvd !== 
				  in_data[15:0]) &&
                                  data_byte_count === 19 &&
                                  initiator_target === 1'b1 &&
                                  present_state === ZI_WAIT_BIDIRECTIONAL_STATE 
				  && !disable_descramble && dword_valid);

  assign target_port_transfer_tag = level_select_temp ?
				    target_port_transfer_tag_posedge :
				    target_port_transfer_tag_negedge; 

  assign tgt_prt_xfer_tag_violation = ((info_unit_type === 8'h05 ||
                                       info_unit_type === 8'h06) &&
                                       initiator_target === 1'b1 &&
				       (present_state === ZI_COMMAND_STATE ||
					present_state === ZI_TASK_STATE) &&
                                        data_byte_count === 19  &&
                                       in_data[15:0] !== 16'hffff &&
				       !disable_descramble && dword_valid);

  assign xferrdy_received = level_select_temp ? xferrdy_received_posedge :
						xferrdy_received_negedge;

  assign frame_transmitted = level_select_temp ? frame_transmitted_posedge :
						 frame_transmitted_negedge;
 
  assign align0_expected = level_select_temp ? align0_expected_posedge :
                                               align0_expected_negedge;

  assign align1_expected = level_select_temp ? align1_expected_posedge :
                                               align1_expected_negedge;

  assign align2_expected = level_select_temp ? align2_expected_posedge :
                                               align2_expected_negedge;

  assign align3_expected = level_select_temp ? align3_expected_posedge :
                                               align3_expected_negedge;

  assign notify_det = (acc_32_bit_data === ZI_NOTIFY && sas_valid);

  assign res_notify_det = ((acc_32_bit_data === ZI_NOTIFY_R0 ||
                            acc_32_bit_data === ZI_NOTIFY_R1 ||
                            acc_32_bit_data === ZI_NOTIFY_R2) && sas_valid);

  assign wtrm_received = level_select_temp ? wtrm_received_posedge :
                                             wtrm_received_negedge;

  assign sata_xrdy_transmitted = level_select_temp ? 
                                     sata_xrdy_transmitted_posedge :
                                     sata_xrdy_transmitted_negedge;

  assign sata_rrdy_rcvd = level_select_temp ? sata_rrdy_rcvd_posedge :
                                              sata_rrdy_rcvd_negedge;

  assign waiting_for_ack_nak = level_select_temp ? waiting_for_ack_nak_posedge :
                                                   waiting_for_ack_nak_negedge;

  assign close_affliation_det = (acc_32_bit_data === ZI_CLOSE_AFFILIATION &&
                                 sas_valid);

  assign close_affliation_prim_count = level_select_temp ? 
                                     close_affliation_prim_count_posedge :
                                     close_affliation_prim_count_negedge;

  assign no_frame_after_done = (level_select_temp) ? 
				    no_frame_after_done_posedge :
                                    no_frame_after_done_negedge;

  assign cominit_sent = (level_select_temp) ?
                            cominit_sent_posedge :
                            cominit_sent_negedge ;

  assign cominit_sent_changed = (DOUBLE_DATA_RATE == 1) ? 
                                  cominit_sent_posedge ^ cominit_sent_negedge :
				  cominit_sent_posedge ^ r_cominit_sent_posedge;

  assign cominit_det = (level_select_temp) ?
                          cominit_det_posedge : cominit_det_negedge;

  assign cominit_det_changed = (DOUBLE_DATA_RATE == 1) ? 
                                 cominit_det_posedge ^ cominit_det_negedge:
				 cominit_det_posedge ^ r_cominit_det_posedge;

  assign comsas_sent = (level_select_temp) ? comsas_sent_posedge :
                                                   comsas_sent_negedge;

  assign comsas_sent_changed = (DOUBLE_DATA_RATE == 1) ?
                                  comsas_sent_posedge ^ comsas_sent_negedge :
				  comsas_sent_posedge ^ r_comsas_sent_posedge;

  assign comsas_det =  (level_select_temp) ? comsas_det_posedge :
                           comsas_det_negedge;

  assign comsas_det_changed = (DOUBLE_DATA_RATE == 1) ?
                                 comsas_det_posedge ^ comsas_det_negedge :
				 comsas_det_posedge ^ r_comsas_det_posedge;

  assign sas_rcd_count = (level_select_temp) ?
                                    sas_rcd_count_posedge :
                                    sas_rcd_count_negedge;

  assign sas_align_detect = (acc_32_bit_data === ZI_ALIGN && sas_valid);

  assign sas_align1_detect = (acc_32_bit_data === ZI_ALIGN1 && sas_valid);

  assign sas_align2_detect = (acc_32_bit_data === ZI_ALIGN2 && sas_valid);

  assign sas_align3_detect = (acc_32_bit_data === ZI_ALIGN3 && sas_valid); 

  assign soaf_detected = (acc_32_bit_data === ZI_SOAF && sas_valid);

  assign soaf_det = level_select_temp ? soaf_det_posedge :
                                        soaf_det_negedge; 

  assign addr_frame_type = (addr_frame_count === 3 && dword_valid &&
			    !disable_descramble) ? 
                            in_data[27:24] : 4'b1111;

  assign addr_frame_type_valid = r_soaf_detected ^rr_soaf_detected;

  assign addr_frame_count = (level_select_temp) ? addr_frame_count_posedge :
                                           addr_frame_count_negedge;

  assign r_soaf_detected = (level_select_temp) ?
                                  r_soaf_detected_posedge :
                                  r_soaf_detected_negedge;

  assign rr_soaf_detected = (level_select_temp) ?
                                  rr_soaf_detected_posedge :
                                  rr_soaf_detected_negedge;

  assign r_soaf_detected_changed = (DOUBLE_DATA_RATE == 1) ?
                    r_soaf_detected_posedge ^ r_soaf_detected_negedge : 
		    r_soaf_detected_posedge ^ rr_soaf_detected_posedge;
   
  assign r_sof_detected = level_select_temp ? r_sof_detected_posedge :
                                              r_sof_detected_negedge;

  assign r_sof_det_changed = (DOUBLE_DATA_RATE == 1) ?
                    r_sof_detected_posedge ^ r_sof_detected_negedge :
		    r_sof_detected_posedge ^ rr_sof_detected_posedge;
                    
  assign eoaf_detected = (acc_32_bit_data === ZI_EOAF && sas_valid);

  assign ident_timeout_count = level_select_temp ?
                                     ident_timeout_count_posedge :
                                     ident_timeout_count_negedge;

  assign iaf_sent = eoaf_detected;

  assign initiator_target = ((addr_frame_count == 3 && dword_valid &&
			      !disable_descramble && in_data[27:24] === 4'h1) ?
			      in_data[31] :
                               (level_select_temp ?
                                initiator_target_posedge :
                                initiator_target_negedge));

  assign initiator_target_valid = (initiator_target_valid_posedge ^
                                   initiator_target_valid_negedge);

  assign protocol = ((addr_frame_count === 3 && dword_valid && 
		      !disable_descramble && in_data[27:24] === 4'h1) ? 
		      in_data[30:28] :
			(level_select_temp ? protocol_posedge :
                                          protocol_negedge));

  assign protocol_valid = protocol_valid_posedge ^ protocol_valid_negedge;

  assign open_accept = (acc_32_bit_data === ZI_OPEN_ACCEPT && sas_valid);
 
  assign open_reject = TX_INTERFACE === 1 ?
                      ((acc_32_bit_data === ZI_OPEN_REJ_NO_DES ||
                        acc_32_bit_data === ZI_OPEN_REJ_BAD_DES ||
                        acc_32_bit_data === ZI_OPEN_REJ_WR_DES ||
                        acc_32_bit_data === ZI_OPEN_REJ_LINK_NS ||
                        acc_32_bit_data === ZI_OPEN_REJ_RETRY ||
                        acc_32_bit_data === ZI_OPEN_REJ_PROTOCOL_NS ||
                        acc_32_bit_data === ZI_OPEN_REJ_RES_BUSY ||
                        acc_32_bit_data === ZI_OPEN_REJ_PATH_BLOCK) && 
                        sas_valid) :
                       ((acc_32_bit_data === ZI_OPEN_REJ_NO_DES ||
                        acc_32_bit_data === ZI_OPEN_REJ_BAD_DES ||
                        acc_32_bit_data === ZI_OPEN_REJ_WR_DES ||
                        acc_32_bit_data === ZI_OPEN_REJ_LINK_NS ||
                        acc_32_bit_data === ZI_OPEN_REJ_RETRY ||
                        acc_32_bit_data === ZI_OPEN_REJ_PROTOCOL_NS ||
                        acc_32_bit_data === ZI_OPEN_REJ_RES_BUSY ||
                        acc_32_bit_data === ZI_OPEN_REJ_PATH_BLOCK ||
                        acc_32_bit_data === ZI_OPN_REJ_RA0 ||
                        acc_32_bit_data === ZI_OPN_REJ_RA1 ||
                        acc_32_bit_data === ZI_OPN_REJ_RA2 ||
                        acc_32_bit_data === ZI_OPN_REJ_RA3 ||
                        acc_32_bit_data === ZI_OPN_REJ_RC0 ||
                        acc_32_bit_data === ZI_OPN_REJ_RC1 ||
                        acc_32_bit_data === ZI_OPN_REJ_RI0 ||
                        acc_32_bit_data === ZI_OPN_REJ_RI1 ||
                        acc_32_bit_data === ZI_OPN_REJ_RS0 ||
                        acc_32_bit_data === ZI_OPN_REJ_RS1) &&
                        sas_valid);

  assign connection_req_rej_no_destination = (acc_32_bit_data === 
                                              ZI_OPEN_REJ_NO_DES && sas_valid);

  assign connection_req_rej_bad_destination = (acc_32_bit_data ===
                                          ZI_OPEN_REJ_BAD_DES && sas_valid);

  assign connection_req_rej_wr_destination = (acc_32_bit_data ===
                                             ZI_OPEN_REJ_WR_DES && sas_valid);

  assign connection_req_rej_lnk_rate_not_supported = (acc_32_bit_data ===
                                             ZI_OPEN_REJ_LINK_NS && sas_valid);

  assign connection_req_reject_retry = (acc_32_bit_data ===
                                        ZI_OPEN_REJ_RETRY && sas_valid);

  assign connection_req_rej_protocol_not_supported = (acc_32_bit_data ===
                                       ZI_OPEN_REJ_PROTOCOL_NS && sas_valid);

  assign connection_req_rej_pathway_block = (acc_32_bit_data ===
                                 ZI_OPEN_REJ_PATH_BLOCK && sas_valid);

  assign connection_req_rej_res_busy = (acc_32_bit_data === 
                                        ZI_OPEN_REJ_RES_BUSY && sas_valid);

  assign nak_received_with_crc_error = (acc_32_bit_data ===
                                        ZI_NAK_CRC_ERR && sas_valid);

  assign aip = TX_INTERFACE === 1 ?
             ((acc_32_bit_data === ZI_AIP_NORM || 
               acc_32_bit_data === ZI_AIP_WAIT_ON_PAR || 
               acc_32_bit_data === ZI_AIP_WAIT_ON_DEV || 
               acc_32_bit_data === ZI_AIP_WAIT_ON_CON) && sas_valid) :
             ((acc_32_bit_data === ZI_AIP_NORM || 
               acc_32_bit_data === ZI_AIP_WAIT_ON_PAR || 
               acc_32_bit_data === ZI_AIP_WAIT_ON_DEV ||  
               acc_32_bit_data === ZI_AIP_WAIT_ON_CON ||
               acc_32_bit_data === ZI_AIP_RWOP ||
               acc_32_bit_data === ZI_AIP_R0 ||
               acc_32_bit_data === ZI_AIP_R1 ||
               acc_32_bit_data === ZI_AIP_R2) &&
               sas_valid);

  assign aip_flag = level_select_temp ? aip_flag_posedge : aip_flag_negedge;
  assign done_flag = level_select_temp ? done_flag_posedge : done_flag_negedge;
  assign close_flag = level_select_temp ? close_flag_posedge : close_flag_negedge;
  assign break_flag = level_select_temp ? break_flag_posedge : break_flag_negedge;

  assign connection_req_wait_partial = (acc_32_bit_data ===
                                     ZI_AIP_WAIT_ON_PAR && sas_valid);

  assign connection_req_wait_connection = (acc_32_bit_data ===
                                        ZI_AIP_WAIT_ON_CON && sas_valid);       

  assign connection_req_wait_device = (acc_32_bit_data ===
                                      ZI_AIP_WAIT_ON_DEV && sas_valid);

  assign sata_xrdy_det = (acc_32_bit_data === ZI_SATA_XRDY && sas_valid);

  assign sata_rrdy_det = (acc_32_bit_data === ZI_SATA_RRDY && sas_valid);

  assign hold_det = (acc_32_bit_data === ZI_SATA_HOLD && sas_valid);
     
  assign holda_det = (acc_32_bit_data === ZI_SATA_HOLDA && sas_valid);

  assign wtrm_det = (acc_32_bit_data === ZI_SATA_WTRM && sas_valid);

  assign r_ok_det = (acc_32_bit_data === ZI_SATA_R_OK && sas_valid);

  assign r_err_det = (acc_32_bit_data === ZI_SATA_R_ERR && sas_valid);

  assign sync_det = (acc_32_bit_data === ZI_SATA_SYNC && sas_valid);

  assign sata_sof_det = (acc_32_bit_data === ZI_SATA_SOF && sas_valid);

  assign sata_eof_det = (acc_32_bit_data === ZI_SATA_EOF && sas_valid);

  assign reserved_aip_primitive = ((acc_32_bit_data === ZI_AIP_RWOP ||
				   acc_32_bit_data === ZI_AIP_R0 ||
				   acc_32_bit_data === ZI_AIP_R1 ||
				   acc_32_bit_data === ZI_AIP_R2) &&
				   sas_valid);

  assign reserved_opn_rej_primitive = 
		      ((acc_32_bit_data === ZI_OPN_REJ_RA0 ||
		        acc_32_bit_data === ZI_OPN_REJ_RA1 ||
			acc_32_bit_data === ZI_OPN_REJ_RA2 ||
			acc_32_bit_data === ZI_OPN_REJ_RA3 ||
                        acc_32_bit_data === ZI_OPN_REJ_RC0 ||
                        acc_32_bit_data === ZI_OPN_REJ_RC1 ||
                        acc_32_bit_data === ZI_OPN_REJ_RI0 ||
                        acc_32_bit_data === ZI_OPN_REJ_RI1 ||
			acc_32_bit_data === ZI_OPN_REJ_RS0 ||
			acc_32_bit_data === ZI_OPN_REJ_RS1) &&
                        sas_valid);

  assign reserved_broadcast_primitive = 
                     ((acc_32_bit_data === ZI_BROADCAST_R1 ||
                       acc_32_bit_data === ZI_BROADCAST_R2 ||
                       acc_32_bit_data === ZI_BROADCAST_R3 ||
                       acc_32_bit_data === ZI_BROADCAST_R4 ||
                       acc_32_bit_data === ZI_BROADCAST_RC0 ||
                       acc_32_bit_data === ZI_BROADCAST_RC1) && sas_valid);

  assign reserved_close_primitive =
                       ((acc_32_bit_data === ZI_CLOSE_R0 ||
                         acc_32_bit_data === ZI_CLOSE_R1) && sas_valid); 

  assign reserved_notify_primitive = 
                        ((acc_32_bit_data === ZI_NOTIFY_R0 ||
                          acc_32_bit_data === ZI_NOTIFY_R1 ||
                          acc_32_bit_data === ZI_NOTIFY_R2) && sas_valid);

  assign reserved_done_primitive =
                       ((acc_32_bit_data === ZI_DONE_R0 ||
                         acc_32_bit_data === ZI_DONE_R1 ||
                         acc_32_bit_data === ZI_DONE_RT0 ||
                         acc_32_bit_data === ZI_DONE_RT1) && sas_valid);

  assign reserved_nak_primitive =
                        ((acc_32_bit_data === ZI_NAK_R0 ||
                          acc_32_bit_data === ZI_NAK_R1 ||
                          acc_32_bit_data === ZI_NAK_R2) && sas_valid);

  assign reserved_rrdy_primitive = 
                       ((acc_32_bit_data === ZI_RRDY_R0 ||
                         acc_32_bit_data === ZI_RRDY_R1) && sas_valid);

  assign present_state = (level_select_temp) ? present_state_posedge :
                                               present_state_negedge;

  assign data_byte_count = level_select_temp ? data_byte_count_posedge :
                                               data_byte_count_negedge;

  assign credit_count = level_select_temp ? credit_count_posedge :
                                               credit_count_negedge;

  assign done_det = TX_INTERFACE === 1 ? 
                    ((acc_32_bit_data === ZI_DONE_CLOSE ||
                      acc_32_bit_data === ZI_DONE_CREDIT_TOUT ||
                      acc_32_bit_data === ZI_DONE_ACK_NAK_TOUT) && sas_valid) :
                    ((acc_32_bit_data === ZI_DONE_CLOSE ||
                      acc_32_bit_data === ZI_DONE_CREDIT_TOUT ||
                      acc_32_bit_data === ZI_DONE_ACK_NAK_TOUT ||
                      acc_32_bit_data === ZI_DONE_R0 ||
                      acc_32_bit_data === ZI_DONE_R1 ||
                      acc_32_bit_data === ZI_DONE_RT0 ||
                      acc_32_bit_data === ZI_DONE_RT1) && sas_valid);

  assign done_det_ack_nak_timeout = (acc_32_bit_data === ZI_DONE_ACK_NAK_TOUT 
				     && sas_valid);

  assign close_det = TX_INTERFACE === 1 ? 
                     ((acc_32_bit_data === ZI_CLOSE ||
		       acc_32_bit_data === ZI_CLOSE_AFFILIATION) && sas_valid) :
                     ((acc_32_bit_data === ZI_CLOSE ||
                       acc_32_bit_data === ZI_CLOSE_AFFILIATION ||
                       acc_32_bit_data === ZI_CLOSE_R0 ||
                       acc_32_bit_data === ZI_CLOSE_R1) && sas_valid); 

  assign frame_type = (data_byte_count === 3 && dword_valid &&
			      !disable_descramble) ? in_data[31:24] : 8'b0;

  assign info_unit_type = ((data_byte_count === 3 && dword_valid &&
			    !disable_descramble) ? in_data[31:24] : 
                           (level_select_temp ? info_unit_type_posedge :
                                                info_unit_type_negedge)); 

  assign info_unit_type_valid = info_unit_type_valid_posedge || 
                                info_unit_type_valid_negedge;
                           
                                                
  assign rrdy_det = TX_INTERFACE === 1 ?
                    (acc_32_bit_data === ZI_RRDY && sas_valid) :
                   ((acc_32_bit_data === ZI_RRDY ||
                     acc_32_bit_data === ZI_RRDY_R0 ||
                     acc_32_bit_data === ZI_RRDY_R1) && sas_valid);

  assign credit_block_det = (acc_32_bit_data === ZI_CREDIT_BLOCKED &&
			     sas_valid); 

  assign error_det = (acc_32_bit_data === ZI_ERROR && sas_valid);
 
  assign data_pres = level_select_temp ? data_pres_posedge :
                                      data_pres_negedge;

  assign status = level_select_temp ? status_posedge :
                                                 status_negedge;

  assign sense_data_length = level_select_temp ? sense_data_length_posedge :
                                                 sense_data_length_negedge;

  assign response_data_length = level_select_temp ? 
                                 response_data_length_posedge :
                                 response_data_length_negedge;

  assign crc = level_select_temp ? crc_posedge : crc_negedge;

  assign crc_enable = (crc_count === 3'b100);

  assign crc_count = level_select_temp ? crc_count_posedge :
                                         crc_count_negedge;

  assign close_prim_count = level_select_temp ? close_prim_count_posedge :
                                                close_prim_count_negedge;

  assign break_prim_count = level_select_temp ? 
                                 break_prim_count_posedge :
                                 break_prim_count_negedge;

  assign change_prim_count =  level_select_temp ? 
                                 change_prim_count_posedge :
                                 change_prim_count_negedge;

  assign hard_rst_count = level_select_temp ? hard_rst_count_posedge :
                                 hard_rst_count_negedge;

  assign sata_xrdy_count = level_select_temp ? sata_xrdy_count_posedge :
                                        sata_xrdy_count_negedge;

  assign sata_rrdy_count = level_select_temp ? sata_rrdy_count_posedge :
                                     sata_rrdy_count_negedge;

  assign sata_wtrm_count = level_select_temp ? sata_wtrm_count_posedge :
                                   sata_wtrm_count_negedge;

  assign sata_sync_count = level_select_temp ? sata_sync_count_posedge :
                               sata_sync_count_negedge;

  assign sata_rok_count = level_select_temp ? sata_rok_count_posedge :
                             sata_rok_count_negedge;

  assign sata_rerr_count = level_select_temp ? sata_rerr_count_posedge :
                          sata_rerr_count_negedge;

  assign sata_hold_count = level_select_temp ? sata_hold_count_posedge :
                              sata_hold_count_negedge;

  assign sata_holda_count = level_select_temp ? sata_holda_count_posedge :
                                   sata_holda_count_negedge;

  assign sata_rip_count = level_select_temp ? sata_rip_count_posedge :
                                              sata_rip_count_negedge;

  assign stp_dword_count = level_select_temp ? stp_dword_count_posedge :
                                               stp_dword_count_negedge;

  assign sata_rip_det = (acc_32_bit_data === ZI_SATA_R_IP && sas_valid); 

  assign sata_cont_det = (acc_32_bit_data === ZI_SATA_CONT && sas_valid);

  assign sata_dmat_det = (acc_32_bit_data === ZI_SATA_DMAT && sas_valid);

  assign aip_count = level_select_temp ? aip_count_posedge :
                                         aip_count_negedge;

  assign aip_dword_count = level_select_temp ? aip_dword_count_posedge :
                                               aip_dword_count_negedge; 

  assign align_dword_count = level_select_temp ? align_dword_count_posedge :
                                                 align_dword_count_negedge; 

  assign stp_align_dword_count = level_select_temp ? 
                                        stp_align_dword_count_posedge :
                                        stp_align_dword_count_negedge;

  assign stp_align_count = level_select_temp ? stp_align_count_posedge :
                                               stp_align_count_negedge; 
  
  //-----------------------------------------------------
  // Sequence detector signal assignments
  //-----------------------------------------------------

  assign cominit_seq = (TX_INTERFACE === 1) ?
		      (comx_idle_time_count === ZI_COMINIT_IDLE_PERIOD &&
                       electrical_idle_detected === 1'b0 &&
                       idle_burst_time_count === 3) : 
                      (comx_idle_time_count > RX_COMINIT_MIN &&
		       comx_idle_time_count < RX_COMINIT_MAX && 
		       electrical_idle_detected === 1'b0 &&
		       idle_burst_time_count === 3); 
	               
  assign comsas_seq = (TX_INTERFACE === 1) ? 
		      (comx_idle_time_count === ZI_COMSAS_IDLE_PERIOD &&
                       electrical_idle_detected === 1'b0 &&
                       idle_burst_time_count === 3) : 
                      (comx_idle_time_count > RX_COMSAS_MIN &&
		       comx_idle_time_count < RX_COMSAS_MAX &&
		       electrical_idle_detected == 1'b0 &&
		       idle_burst_time_count === 3); 

  assign r_cominit_seq = (level_select_temp) ?
                          r_cominit_seq_posedge : r_cominit_seq_negedge;  

  assign r_comsas_seq = (level_select_temp) ?
                          r_comsas_seq_posedge : r_comsas_seq_negedge;

  assign comx_idle_time_count = (level_select_temp) ?
             comx_idle_time_count_posedge : comx_idle_time_count_negedge;

  assign align_burst_time_count = (level_select_temp) ?
                                  align_burst_time_count_posedge : 
                                  align_burst_time_count_negedge;

  assign idle_burst_time_count = (level_select_temp) ?
                                  idle_burst_time_count_posedge : 
                                  idle_burst_time_count_negedge;

  assign comx_negation_count = (level_select_temp) ?
                                comx_negation_count_posedge :
                                comx_negation_count_negedge;

  assign seq_present_state = (level_select_temp) ? 
                              seq_present_state_posedge :
                              seq_present_state_negedge;

  assign align_count = (level_select_temp) ? align_count_posedge :
                                             align_count_negedge;

  assign align_burst = (sas_align_detect || sas_align1_detect);

  assign align1_align_burst = sas_align1_detect;

  //assign neg_period_start = (align_burst_time_count === 6);
  assign neg_period_start = ((idle_burst_time_count === 5 &&
                             electrical_idle_detected === 1'b1 && TX_INTERFACE) ||
			     (idle_burst_time_count === 4 &&
			      electrical_idle_detected === 1'b1 &&
			      !TX_INTERFACE));
  
  //-----------------------------------------------------------
  // Signal assignments (Speed Negotiation)
  //-----------------------------------------------------------

  /*assign g1rcdval = RATE_CHANGE_DELAY;
  assign g2rcdval = 2 * RATE_CHANGE_DELAY;
  assign g3rcdval = 4 * RATE_CHANGE_DELAY;

  assign g1rate_trans_time = SPEED_NEGOTIATION_TRANSMIT_TIME;
  assign g2rate_trans_time = 2 * SPEED_NEGOTIATION_TRANSMIT_TIME;
  assign g3rate_trans_time = 4 * SPEED_NEGOTIATION_TRANSMIT_TIME;

  assign g1rate_lock_time = SPEED_NEGOTIATION_LOCK_TIME;
  assign g2rate_lock_time = 2 * SPEED_NEGOTIATION_LOCK_TIME;
  assign g3rate_lock_time = 4 * SPEED_NEGOTIATION_LOCK_TIME; */

  assign negrcdval = ((valid_g3_state && valid_g3_state_rcvd) ? g3rcdval :
		     ((valid_g2_state && valid_g2_state_rcvd) ? g2rcdval :
		     ((valid_g1_state && valid_g1_state_rcvd) ? g1rcdval :
								  g1rcdval)));

  assign neg_rate_trans_time = ((valid_g3_state && valid_g3_state_rcvd) ?
                                g3rate_trans_time : 
                     ((valid_g2_state && valid_g2_state_rcvd) ? 
                               g2rate_trans_time : 
                     ((valid_g1_state && valid_g1_state_rcvd) ? 
                             g1rate_trans_time  : g1rate_trans_time))); 

  assign neg_rate_lock_time = ((valid_g3_state && valid_g3_state_rcvd) ?
                                g3rate_lock_time :
                     ((valid_g2_state && valid_g2_state_rcvd) ? 
                               g2rate_lock_time : 
                     ((valid_g1_state && valid_g1_state_rcvd) ? 
                             g1rate_lock_time  : g1rate_lock_time)));

  assign knock_off_g3state = ((valid_g1_state && valid_g1_state_rcvd) &&
                             (valid_g2_state ^ valid_g2_state_rcvd));


  assign valid_g1_state = (level_select_temp) ? valid_g1_state_posedge :
                                                valid_g1_state_negedge;

  assign valid_g2_state = (level_select_temp) ? valid_g2_state_posedge :
                                                valid_g2_state_negedge;

  assign valid_g3_state = (level_select_temp) ? valid_g3_state_posedge :
                                                valid_g3_state_negedge;

  assign neg_state = level_select_temp ? neg_state_posedge :
                                         neg_state_negedge;

  assign g1rate_trans_time_count = level_select_temp ?
                                    g1rate_trans_time_count_posedge :
                                    g1rate_trans_time_count_negedge;

  assign g2rate_trans_time_count = level_select_temp ?
                                    g2rate_trans_time_count_posedge :
                                    g2rate_trans_time_count_negedge;

  assign g3rate_trans_time_count = level_select_temp ?
                                    g3rate_trans_time_count_posedge :
                                    g3rate_trans_time_count_negedge; 

  assign g1rate_lock_time_count = level_select_temp ?
                                    g1rate_lock_time_count_posedge :
                                    g1rate_lock_time_count_negedge;

  assign g2rate_lock_time_count = level_select_temp ?
                                    g2rate_lock_time_count_posedge :
                                    g2rate_lock_time_count_negedge;

  assign g3rate_lock_time_count = level_select_temp ?
                                    g3rate_lock_time_count_posedge :
                                    g3rate_lock_time_count_negedge; 

  assign neg_rate_trans_time_count = level_select_temp ?
                                    neg_rate_trans_time_count_posedge :
                                    neg_rate_trans_time_count_negedge;

  assign neg_rate_lock_time_count = level_select_temp ?
                                    neg_rate_lock_time_count_posedge :
                                    neg_rate_lock_time_count_negedge;

  //-------------------------------------------------------------------
  // Signal assignments for latched signals
  //-------------------------------------------------------------------

  assign latched_iaf_sent = (level_select_temp) ? latched_iaf_sent_posedge :
                                                  latched_iaf_sent_negedge; 

  assign latched_iaf_received = level_select_temp ? 
                                     latched_iaf_received_posedge :
                                     latched_iaf_received_negedge;

  assign latched_break_det = (level_select_temp) ? latched_break_det_posedge :
                                                    latched_break_det_negedge;

  assign latched_break_det_received = (level_select_temp) ? 
                                   latched_break_det_received_posedge :
                                   latched_break_det_received_negedge;

  assign latched_done_det = (level_select_temp) ?
                             latched_done_det_posedge : 
                             latched_done_det_negedge;

  assign latched_done_det_rcvd = (level_select_temp) ?
                             latched_done_det_rcvd_posedge :
                             latched_done_det_rcvd_negedge;

  assign latched_close_det = (level_select_temp) ?
                              latched_close_det_posedge :
                              latched_close_det_negedge;

  assign latched_close_det_received = (level_select_temp) ?
                              latched_close_det_received_posedge :
                              latched_close_det_received_negedge;

  assign latched_sync_det = (level_select_temp) ? 
                                         latched_sync_det_posedge :
                                         latched_sync_det_negedge;

  assign latched_sync_det_received = (level_select_temp) ? 
                                         latched_sync_det_received_posedge :
                                         latched_sync_det_received_negedge;

  assign latched_hold_det = level_select_temp ? latched_hold_det_posedge :
                                                latched_hold_det_negedge;

  assign latched_hold_det_changed = (DOUBLE_DATA_RATE == 1) ? 
                         latched_hold_det_posedge ^ latched_hold_det_negedge:
		         latched_hold_det_posedge ^ r_latched_hold_det_posedge;

  assign latched_holda_det_received = level_select_temp ?
                                       latched_holda_det_received_posedge :
                                       latched_holda_det_received_negedge;

  assign cominit_det_rcvd = (TX_INTERFACE === 0) ? cominit_det :
                                             cominit_det_received;

  assign cominit_sent_xmtd = (TX_INTERFACE) ? cominit_sent :
                                              cominit_sent_received;

  assign comsas_det_rcvd = (TX_INTERFACE === 0) ? comsas_det :
                                            comsas_det_received;

  assign comsas_sent_xmtd = (TX_INTERFACE) ? comsas_sent :
                                             comsas_sent_received;

  assign comsas_timeout_count = level_select_temp ?
                                comsas_timeout_count_posedge :
                                comsas_timeout_count_negedge;

  assign read_data_count_disable = level_select_temp ?
                                 read_data_count_disable_posedge:
                                 read_data_count_disable_negedge;

  assign data_frame_count = level_select_temp ? data_frame_count_posedge :
                                     data_frame_count_negedge;

  assign data_frame_count_valid = level_select_temp ? 
                                     data_frame_count_valid_posedge :
                                     data_frame_count_valid_negedge;

  assign smp_req_fn = level_select_temp ? smp_req_fn_posedge :
                                          smp_req_fn_negedge;

  assign smp_req_fn_valid = level_select_temp ? smp_req_fn_valid_posedge :
                                          smp_req_fn_valid_negedge;

  assign smp_res_fn = level_select_temp ? smp_res_fn_posedge :
                                          smp_res_fn_negedge;

  assign smp_res_fn_valid = level_select_temp ? smp_res_fn_valid_posedge :
                                          smp_res_fn_valid_negedge;

  assign smp_req_count = level_select_temp ? smp_req_count_posedge :
                                              smp_req_count_negedge ;

  assign smp_res_count = level_select_temp ? smp_res_count_posedge :
                                             smp_res_count_negedge;

  assign sas_hotplug_timeout_count = level_select_temp ?
                                       sas_hotplug_timeout_count_posedge :
                                       sas_hotplug_timeout_count_negedge;

  assign ack_nak_timeout_count = level_select_temp ? ack_nak_timeout_posedge :
                                               ack_nak_timeout_negedge;

  assign credit_timeout_count = level_select_temp ? credit_timeout_posedge :
                                              credit_timeout_negedge;

  assign break_timeout_count = level_select_temp ? break_timeout_posedge :
                                             break_timeout_negedge;

  assign close_timeout_count = level_select_temp ? close_timeout_posedge :
                                             close_timeout_negedge;

  assign done_timeout_count = level_select_temp ? done_timeout_posedge :
                                             done_timeout_negedge;

  assign open_addr_res_timeout_count = level_select_temp ?
                                     open_addr_res_timeout_posedge :
                                     open_addr_res_timeout_negedge;

  assign hard_reset_count = level_select_temp ?
                             hard_reset_count_posedge :
                             hard_reset_count_negedge;

  //-----------------------------------------------------------------------
  // Any of the timeout occurs, this signal will be asserted.  If this
  // signal is asserted, state machine will go to ZI_SAS_LINK_IDLE_STATE.
  //-----------------------------------------------------------------------

  assign timeout = (ack_nak_timeout_count === ack_nak_timeout ||
                    credit_timeout_count === credit_timeout ||
                    break_timeout_count === break_timeout ||
                    close_timeout_count === close_timeout ||
                    open_addr_res_timeout_count === 
				  open_addr_res_timeout ||
                    sas_hotplug_timeout_count == ZI_HOT_PLUG_TIMEOUT_COUNT ||
                    comsas_timeout_count === ZI_COMSAS_TIMEOUT_COUNT ||
                    done_timeout_count === done_timeout);

  assign change_det = TX_INTERFACE === 1 ?
                      ((acc_32_bit_data === ZI_BROADCAST || 
			acc_32_bit_data === ZI_BROADCAST_R0) && sas_valid) :
                      ((acc_32_bit_data === ZI_BROADCAST || 
                        acc_32_bit_data === ZI_BROADCAST_R0 ||
                        acc_32_bit_data === ZI_BROADCAST_RC0 ||
                        acc_32_bit_data === ZI_BROADCAST_RC1) && sas_valid);

  assign res_broadcast_det = 
                     ((acc_32_bit_data === ZI_BROADCAST_R1 ||
                       acc_32_bit_data === ZI_BROADCAST_R2 ||
                       acc_32_bit_data === ZI_BROADCAST_R3 ||
                       acc_32_bit_data === ZI_BROADCAST_R4) && sas_valid);

  assign sof_det = (acc_32_bit_data === ZI_SOF && sas_valid);

  assign eof_det = (acc_32_bit_data === ZI_EOF && sas_valid);

  assign ack_det = (acc_32_bit_data === ZI_ACK && sas_valid);

  assign nak_det = TX_INTERFACE === 1 ?
                   (acc_32_bit_data === ZI_NAK_CRC_ERR && sas_valid) :
                   ((acc_32_bit_data === ZI_NAK_CRC_ERR ||
                     acc_32_bit_data === ZI_NAK_R0 ||
                     acc_32_bit_data === ZI_NAK_R1 ||
                     acc_32_bit_data === ZI_NAK_R2) && sas_valid); 

  assign break_det = (acc_32_bit_data === ZI_BREAK && sas_valid);

  assign hard_reset_detected = (acc_32_bit_data === ZI_HARD_RESET && sas_valid);

  assign ack_sent_count = level_select_temp ? ack_sent_count_posedge :
                                              ack_sent_count_negedge;

  assign ack_received_count = level_select_temp ? ack_received_count_posedge :
                                                  ack_received_count_negedge;

  assign nak_sent_count = level_select_temp ? nak_sent_count_posedge :
                                              nak_sent_count_negedge;

  assign nak_received_count = level_select_temp ? nak_received_count_posedge :
                                                  nak_received_count_negedge;

  assign  sof_detect = level_select_temp ? sof_detect_posedge :
                                           sof_detect_negedge;

  assign min_max_counter = (level_select_temp) ? min_max_counter_posedge :
                                                 min_max_counter_negedge;

  assign min_data_reg = level_select_temp ? min_data_reg_posedge :
                                            min_data_reg_negedge;

  assign min_data_reg_flag = level_select_temp ? min_data_reg_flag_posedge : 
                                                 min_data_reg_flag_negedge;

  assign max_data_reg = level_select_temp ? max_data_reg_posedge :
                                            max_data_reg_negedge; 

  assign min_frame_size = min_data_reg;
  
  assign max_frame_size = max_data_reg;

  assign phy_reset_seq_completed =
            (comsas_sent_xmtd == 1'b1 && comsas_det_rcvd == 1'b1);

  assign link_reset_seq_completed = 
             ((iaf_sent == 1'b1 && iaf_received == 1'b1) ||
              ((iaf_sent === 1'b1 && latched_iaf_sent === 1'b0) ||
                (iaf_received === 1'b1 && latched_iaf_received === 1'b0)) &&
                (present_state === ZI_IAF_STATE || present_state ===
                 ZI_WAIT_FOR_IAF_STATE));

  assign ssp_transaction_comp = ((info_unit_type == 8'h07 && ack_det_received) 
				  || (info_unit_type_received == 8'h07 &&
				  ack_det));

  assign stp_transaction_comp = (next_state == ZI_SATA_CLOSE_STATE &&
                                 present_state != ZI_SATA_CLOSE_STATE); 

  assign smp_transaction_comp = (next_state == ZI_SMP_CLOSE_STATE &&
                                 present_state != ZI_SMP_CLOSE_STATE);

  assign no_of_transactions = no_of_ssp_transactions + no_of_stp_transactions +
                              no_of_smp_transactions;

  assign trans_completed_without_err = 
              ((eof_det || eoaf_detected || sata_eof_det) && !crc_err); 

  assign timeout_occur = timeout;

  assign ack_nak_timeout_occur = ack_nak_timeout_violation;

  assign credit_timeout_occur = credit_timeout_violation;

  assign sata_sof_detect = level_select_temp ?
                             sata_sof_detect_posedge :
                             sata_sof_detect_negedge;

  assign in_data = descrambled_data;

  assign acc_32_bit_data = descrambled_data;

  assign crc_err_flag = level_select_temp ? crc_err_flag_posedge :
                                            crc_err_flag_negedge;

  assign align_count_violation = 
                        (((align_count !== 0 && 
                           align_count < ZI_ALIGN_BURST_COUNT && 
			   electrical_idle_detected) ||
                         align_count > ZI_ALIGN_BURST_COUNT) &&
                        (r_cominit_seq === 1'b1 || r_comsas_seq == 1'b1)
                         && TX_INTERFACE === 1 &&
                         PHY_RESET_SEQ_CHECK_ENABLE === 1);
           
  assign cominit_idle_time_violation = TX_INTERFACE === 1 ?
                 (((comx_idle_time_count === (ZI_COMINIT_IDLE_PERIOD + 1) &&
		  electrical_idle_detected === 1'b1) ||
		  (comx_idle_time_count !== 0 && 
		   comx_idle_time_count < ZI_COMINIT_IDLE_PERIOD &&
		   electrical_idle_detected === 1'b0)) &&
		  r_cominit_seq &&
                  present_state !== ZI_SAS_COMSAS_STATE &&
                  present_state !== ZI_SAS_COMAWAIT_STATE &&
                  PHY_RESET_SEQ_CHECK_ENABLE === 1) :
		  (((comx_idle_time_count >  RX_COMINIT_MAX &&
                     electrical_idle_detected === 1'b1) ||
		    (comx_idle_time_count !== 0 && 
		     electrical_idle_detected === 1'b0 && 
		     comx_idle_time_count <  RX_COMINIT_MIN)) &&
		   r_cominit_seq === 1'b1 &&
		   present_state !== ZI_SAS_COMSAS_STATE &&
		   present_state !== ZI_SAS_COMAWAIT_STATE);

  assign comsas_idle_time_violation = (TX_INTERFACE === 1) ?
		(((comx_idle_time_count === (ZI_COMSAS_IDLE_PERIOD + 1) &&
                 electrical_idle_detected === 1'b1) ||
		 (comx_idle_time_count !== 0 && 
		  comx_idle_time_count < ZI_COMSAS_IDLE_PERIOD &&
		  electrical_idle_detected === 1'b0)) &&
	         r_comsas_seq &&
                 PHY_RESET_SEQ_CHECK_ENABLE === 1) :
		 (((comx_idle_time_count > RX_COMSAS_MAX &&
                    electrical_idle_detected === 1'b1) ||
		  (comx_idle_time_count !== 0 && 
                   electrical_idle_detected === 1'b0 && 
                   comx_idle_time_count < RX_COMSAS_MIN)) &&
		  r_comsas_seq);

  assign cominit_neg_time_violation = 
                     (comx_negation_count < ZI_COMINIT_NEG_TIME &&
                      electrical_idle_detected === 1'b0 &&
                      comx_negation_count !== 0);

  assign comsas_neg_time_violation = 
                          (comx_negation_count < ZI_COMSAS_NEG_TIME &&
                           electrical_idle_detected === 1'b0 &&
                           comx_negation_count !== 0);

  assign done_prim_in_smp_stp = ((protocol === 3'b0 || protocol === 3'b010) &&
                                 done_det === 1'b1);

  assign open_rej_bad_des_not_by_expander_device =
                     (SAS_DEVICE_TYPE !== 1 && TX_INTERFACE === 1 &&
                      connection_req_rej_bad_destination === 1'b1);

  assign open_rej_no_des_not_from_expander =
                     (SAS_DEVICE_TYPE !== 1 && TX_INTERFACE === 1 &&
                     connection_req_rej_no_destination === 1'b1);

  assign open_rej_pathway_block_from_non_expander_device = 
		    (SAS_DEVICE_TYPE !== 1 && TX_INTERFACE === 1 &&
		     connection_req_rej_pathway_block === 1'b1);

  assign frame_with_crc_err_without_nak = 
                 (crc_err_flag === 1'b1 &&
                 ack_det_received === 1'b1);

  assign more_than_3consecutive_aip = (TX_INTERFACE === 1 &&
				       SAS_DEVICE_TYPE === 1 && 
				       aip_count === 3 &&
                                      (disable_descramble === 1'b1 &&
                                       disable_scr_count === 3'b010 && aip));

  assign aip_dword_count_violation = (aip_dword_count > 516 &&
				      SAS_DEVICE_TYPE === 1 &&
				      TX_INTERFACE === 1);

  assign align_dword_count_violation = (align_dword_count > 8192);

  assign stp_align_dword_count_violation = ((stp_align_dword_count > 1016) &&
                            (((!sas_align_detect && disable_scr_count === 2) ||
                              !disable_descramble) && sas_valid));

  assign phy_identifier_violation = (~(in_data[23:16] >= 8'h0 && 
                                       in_data[23:16] < 8'h80) &&
                                      sas_valid === 1'b1 &&
				      !disable_descramble &&
                                     (present_state === ZI_SMP_REQUEST_STATE ||
				      present_state === ZI_SMP_DATA_STATE) &&
				      data_byte_count === 11 && 
                                      (smp_req_fn == 8'h10 ||
                                      smp_res_fn == 8'h10 ||
                                      smp_req_fn == 8'h11 ||
                                      smp_res_fn == 8'h11 ||
                                      smp_req_fn == 8'h12 ||
                                      smp_res_fn == 8'h12 ||
                                      smp_req_fn === 8'h13 ||
                                      smp_res_fn === 8'h13 ||
                                      smp_req_fn === 8'h90 ||
                                      smp_req_fn === 8'h91));

  assign fis_type_violation = (data_byte_count === 43 && 
			       present_state === ZI_SMP_DATA_STATE &&
			       in_data[7:0] !== 8'h34 && dword_valid
                               && smp_res_fn === 8'h12 && sas_valid &&
			       !disable_descramble);

  assign ack_nak_timeout_violation = (ack_nak_timeout_count === 
				      ack_nak_timeout);

  assign credit_timeout_violation = (credit_timeout_count === 
					 credit_timeout);

  assign close_timeout_violation = (close_timeout_count === 
				     close_timeout);

  assign done_timeout_violation = (done_timeout_count === 
				     done_timeout);

  assign min_frame = ((info_unit_type === 8'h01) ? 32 :
		      (info_unit_type === 8'h05) ? 40 :
		      (info_unit_type === 8'h06) ? 56 :
		      (info_unit_type === 8'h07) ? 52 :
		      (info_unit_type === 8'h16) ? 56 : 32'b0);

  assign max_frame = ((info_unit_type === 8'h01) ? 1052 :
                      (info_unit_type === 8'h05) ? 40 :
                      (info_unit_type === 8'h06) ? 312 :
                      (info_unit_type === 8'h07) ? 1052 :
                      (info_unit_type === 8'h16) ? 56 : 32'b0); 

  assign ssp_min_frame_size_violation = 
			   (eof_det === 1'b1 && protocol === 3'b001 &&
			   ((info_unit_type === 8'h01 &&
			     data_byte_count < 32) ||
			    (info_unit_type === 8'h05 &&
			     data_byte_count < 40) ||
                            (info_unit_type === 8'h06 &&
			     data_byte_count < 56) ||
                            (info_unit_type === 8'h07 &&
			     data_byte_count < 52) ||
                            (info_unit_type === 8'h16 &&
			     data_byte_count !== 56)));

  assign ssp_max_frame_size_err = 
			     (eof_det === 1'b1 && protocol === 3'b001 &&
			     (((info_unit_type === 8'h01 ||
			       info_unit_type === 8'h07) &&
			       data_byte_count > 1052) ||
                              (info_unit_type === 8'h06 &&
			       data_byte_count > 312) ||
			      (info_unit_type === 8'h05 &&
			       data_byte_count > 40) ||
			      (info_unit_type === 8'h16 &&
			       data_byte_count > 56)));

  // Asserted when all the credits are consumed within a 
  // connection

  assign credit_exhausted = (credit_count === 0 && 
                             connection_status === 1'b1 &&
                             protocol === 3'b001); 

  assign ssp_frame_size_error = (eof_det === 1'b1 && protocol === 3'b001 && 
                                (data_byte_count > 1052 ||
                                 data_byte_count < 32));

  assign discard_frame = (ssp_frame_size_error ||
                          (eof_det && latched_done_det) ||
                          (credit_exhausted_rcvd && sof_det));
			  //Should look at whether the PHY has credit to
			  //receive frame

  assign four_byte_align_violation = 
                           ((eof_det === 1'b1 || eoaf_detected ||
                             sata_eof_det) && 
                           (data_byte_count-4)%4 !== 0); 

  assign sense_length_violation =
                           ((data_byte_count === 43 && data_pres === 2'b0 &&
			     present_state === ZI_SSP_RESPONSE_STATE &&
                            in_data !== 0) &&
                            sas_valid); 

  assign response_length_violation = 
			   ((data_byte_count === 47 && data_pres === 2'b0 &&
			     present_state === ZI_SSP_RESPONSE_STATE &&
                            in_data !== 0) &&
                            sas_valid);

  assign response_list_length_violation =
                           ((data_byte_count === 47 && data_pres === 2'b01 &&
			     present_state == ZI_SSP_RESPONSE_STATE &&
                            in_data !== 4) &&
                            sas_valid);

  assign sense_list_length_violation =
                           ((data_byte_count === 43 && data_pres === 2'b10 &&
			     present_state === ZI_SSP_RESPONSE_STATE &&
                            in_data === 0) &&
                           sas_valid);

 assign retransmit_bit_violation = (in_data[25] !== 0 &&
				    (present_state === ZI_COMMAND_STATE ||
				     present_state === ZI_XFERRDY_STATE ||
				     present_state === ZI_TASK_STATE) &&
                                    data_byte_count === 11 &&
                                    sas_valid && dword_valid &&
				    !disable_descramble); 

  assign addr_frame_type_err = (in_data[27:24] !== 4'b0 &&
                                in_data[27:24] !== 4'b1 &&
                                addr_frame_count === 3 && sas_valid &&
                                dword_valid && !disable_descramble &&
				RESERVED_FIELD_CHECK_ENABLE === 1);

  assign iaf_device_type_err = (in_data[30:28] !== 3'b001 && in_data[30:28] !==
                                 3'b010 && in_data[30:28] !== 3'b011 &&
                                addr_frame_count === 3 && 
				in_data[27:24] == 4'b0 &&
                                sas_valid === 1'b1 && dword_valid &&
				!disable_descramble &&
				RESERVED_FIELD_CHECK_ENABLE === 1);

  assign iaf_max_frame_size_err = (eoaf_detected === 1'b1 &&
                                  (addr_frame_count !== 32) &&
                                   present_state == ZI_IAF_STATE);

  assign oaf_protocol_err = ((in_data[30:28] !== 3'b0 && in_data[30:28] 
                              !== 3'b001 && in_data[30:28] !== 3'b010) &&
                              addr_frame_count === 3 && in_data[27:24] == 4'b0001 
                              && sas_valid && dword_valid &&
			      !disable_descramble &&
			      RESERVED_FIELD_CHECK_ENABLE === 1);

  assign oaf_feature_field_err = (in_data[23:20] !== 4'b0 &&
                                  present_state === ZI_SAS_OPEN_ADDR_STATE &&
                                  addr_frame_count === 3 && sas_valid &&
                                  dword_valid && !disable_descramble &&
				  RESERVED_FIELD_CHECK_ENABLE === 1);

  assign oaf_link_rate_err = ((in_data[19:16] !== 4'h8 && in_data[19:16] 
                               !== 4'h9) &&
                               present_state === ZI_SAS_OPEN_ADDR_STATE &&
                               addr_frame_count === 3 && sas_valid &&
                               dword_valid && !disable_descramble &&
			       RESERVED_FIELD_CHECK_ENABLE === 1);

  assign oaf_conn_tag_err = ((in_data[15:0] !== 16'hffff) &&
                             next_state === ZI_SAS_OPEN_ADDR_STATE &&
                             addr_frame_count === 3 && protocol === 3'b0 &&
                             initiator_target === 1'b1 && sas_valid &&
                             dword_valid && !disable_descramble);

  assign oaf_max_frame_size_err = (eoaf_detected === 1'b1 &&
                                  (addr_frame_count !== 32) &&
                                   present_state === ZI_SAS_OPEN_ADDR_STATE &&
                                   sas_valid);

  assign smp_req_frame_type_err = (present_state === ZI_SMP_REQUEST_STATE &&
                                   in_data[31:24] !== 8'h40 && 
                                   data_byte_count === 3 &&
                                   sas_valid && dword_valid &&
				   !disable_descramble &&
				   RESERVED_FIELD_CHECK_ENABLE === 1);

  assign smp_req_fn_err = (present_state === ZI_SMP_REQUEST_STATE &&
                           data_byte_count === 3 && !disable_descramble &&
                         (in_data[23:16] !== 8'h0 && in_data[23:16] !== 8'h01 &&
			  in_data[23:16] !== 8'h10 
                          && in_data[23:16] !== 8'h11
                          && in_data[23:16] !== 8'h12 && 
                          in_data[23:16] !== 8'h90 &&
                          in_data[23:16] !== 8'h91 && 
                          in_data[23:16] !== 8'h13) &&
                          (!(VENDOR_SPECIFIC_ENCODING_ENABLE === 0 &&
                             ((in_data[23:16] >= 8'h40 &&
                              in_data[23:16] <= 8'h7f) || 
                             (in_data[23:16] >= 8'hc0 && 
                              in_data[23:16] <= 8'hff)))) &&
                          sas_valid && dword_valid &&
			  RESERVED_FIELD_CHECK_ENABLE === 1); 

  assign smp_req_phy_operation_err = (present_state === ZI_SMP_REQUEST_STATE &&
                                      data_byte_count === 11 &&
                                      (in_data[15:8] !== 8'h0 &&
                                       in_data[15:8] !== 8'h01 &&
                                       in_data[15:8] !== 8'h02 &&
                                       in_data[15:8] !== 8'h03 &&
                                       in_data[15:8] !== 8'h04 &&
                                       in_data[15:8] !== 8'h05 &&
                                       in_data[15:8] !== 8'h06)
                                       && smp_req_fn === 8'h91 && sas_valid 
                                       && dword_valid && !disable_descramble &&
				       RESERVED_FIELD_CHECK_ENABLE === 1);

  assign smp_req_prog_min_phy_rate_err = (next_state === ZI_SMP_REQUEST_STATE &&
                                          data_byte_count === 35 &&
                                          (in_data[31:28] !== 4'h0 &&
					   in_data[31:28] !== 4'h8 && 
                                           in_data[31:28] !== 4'h9)
                                          && smp_req_fn === 8'h91 && sas_valid
                                           && dword_valid &&
					   !disable_descramble &&
					   RESERVED_FIELD_CHECK_ENABLE === 1);

  assign smp_req_prog_max_phy_rate_err = (next_state === ZI_SMP_REQUEST_STATE &&
                                          data_byte_count === 35 &&
                                          (in_data[23:20] !== 4'h0 &&
					   in_data[23:20] !== 4'h8 &&
                                          in_data[23:20] !== 4'h9) &&
                                          smp_req_fn === 8'h91 && sas_valid &&
                                          dword_valid &&
					  !disable_descramble &&
					  RESERVED_FIELD_CHECK_ENABLE === 1);

  assign smp_res_frame_type_err = (present_state === ZI_SMP_DATA_STATE &&
                                   data_byte_count === 3 &&
                                   in_data[31:24] !== 8'h41 && sas_valid &&
                                   dword_valid && !disable_descramble &&
				   RESERVED_FIELD_CHECK_ENABLE === 1);

  assign smp_res_fn_err = (next_state === ZI_SMP_DATA_STATE &&
                           data_byte_count === 3 &&
                         (in_data[23:16] !== 8'h0 && in_data[23:16] !== 8'h01 &&
                          in_data[23:16] !== 8'h10 && 
                          in_data[23:16] !== 8'h11 &&
                          in_data[23:16] !== 8'h12 && 
                          in_data[23:16] !== 8'h90 &&
                          in_data[23:16] !== 8'h91 && 
                          in_data[23:16] !== 8'h13 &&
			  !(in_data[23:16] >= 8'h40 && 
			    in_data [23:16] <= 8'h7f) &&
			    !(in_data[23:16] >= 8'hc0 &&
			      in_data[23:16] <= 8'hff)) &&
                          sas_valid && dword_valid && !disable_descramble &&
			  RESERVED_FIELD_CHECK_ENABLE === 1);

  assign smp_res_route_attr_err = (next_state === ZI_SMP_DATA_STATE &&
                                   data_byte_count === 43 &&
                                   (in_data[3:0] !== 3'h0 &&
                                    in_data[3:0] !== 3'h1 &&
                                    in_data[3:0] !== 3'h2)
                                    && smp_res_fn === 8'h10 && sas_valid
                                    && dword_valid &&
				    !disable_descramble &&
				    RESERVED_FIELD_CHECK_ENABLE === 1);

  assign smp_attached_dev_type_err = (next_state == ZI_SMP_DATA_STATE &&
                                      data_byte_count === 15 &&
                                      (in_data[30:28] !== 3'b0 &&
                                       in_data[30:28] !== 3'b001 &&
                                       in_data[30:28] !== 3'b010 &&
                                       in_data[30:28] !== 3'b011) && 
                                       smp_res_fn === 8'h10 && sas_valid &&
                                       dword_valid && !disable_descramble &&
				       RESERVED_FIELD_CHECK_ENABLE === 1); 

  assign smp_res_cur_phy_rate_err = (next_state === ZI_SMP_DATA_STATE &&
                                     data_byte_count ===  15 &&
                                    (in_data[19:16] !== 4'h1 &&
                                     in_data[19:16] !== 4'h0 &&
                                     in_data[19:16] !== 4'h2 &&
                                     in_data[19:16] !== 4'h3 &&
                                     in_data[19:16] !== 4'h8 &&
                                     in_data[19:16] !== 4'h9) 
                                    && smp_res_fn === 8'h10 && sas_valid &&
                                     dword_valid && !disable_descramble &&
				     RESERVED_FIELD_CHECK_ENABLE === 1);

  assign smp_res_fn_result_err = (next_state === ZI_SMP_DATA_STATE &&
                                  data_byte_count === 3 &&
                                  (in_data[15:8] !== 8'h0 &&
                                   in_data[15:8] !== 8'h01 &&
				   in_data[15:8] !== 8'h10 &&
				   in_data[15:8] !== 8'h11 &&
				   in_data[15:8] !== 8'h12 &&
				   in_data[15:8] !== 8'h13 &&
				   in_data[15:8] !== 8'h02 &&
				   in_data[15:8] !== 8'h03) &&
                                   sas_valid && dword_valid &&
				   !disable_descramble &&
				   RESERVED_FIELD_CHECK_ENABLE === 1); 

  assign smp_req_res_fn_err = (present_state === ZI_SMP_DATA_STATE &&
                               (smp_req_fn_received !== in_data[23:16]) &&
                                data_byte_count === 3 && sas_valid &&
                                dword_valid && !disable_descramble);

  assign ssp_task_atribute_err = (present_state === ZI_COMMAND_STATE &&
                                  data_byte_count === 35 &&
                                  (in_data[18:16] !== 3'b0 &&
                                   in_data[18:16] !== 3'b001 &&
                                   in_data[18:16] !== 3'b010 &&
                                   in_data[18:16] !== 3'b100) && sas_valid &&
                                   dword_valid && !disable_descramble &&
				   RESERVED_FIELD_CHECK_ENABLE === 1);

  assign ssp_task_man_fn_err = (present_state === ZI_TASK_STATE &&
                                data_byte_count === 35 &&
                                (in_data[15:8] !== 8'h01 &&
                                 in_data[15:8] !== 8'h02 &&
                                 in_data[15:8] !== 8'h04 &&
                                 in_data[15:8] !== 8'h08 &&
                                 in_data[15:8] !== 8'h40 &&
                                 in_data[15:8] !== 8'h80) && sas_valid &&
                                 dword_valid && !disable_descramble &&
				 RESERVED_FIELD_CHECK_ENABLE === 1);

  assign data_pres_err = (present_state === ZI_SSP_RESPONSE_STATE &&
                          data_byte_count === 35 && (in_data[9:8] !== 2'b0 &&
                          in_data[9:8] !== 2'b01 && in_data[9:8] !== 2'b10) &&
                          sas_valid && dword_valid && !disable_descramble &&
			  RESERVED_FIELD_CHECK_ENABLE === 1);

  assign status_err = (present_state === ZI_SSP_RESPONSE_STATE &&
                       data_byte_count === 35 && (in_data[7:0] !== 8'h0 &&
                       in_data[7:0] !== 8'h02 && in_data[7:0] !== 8'h04 && 
                       in_data[7:0] !== 8'h08 && in_data[7:0] !== 8'h10 &&
                       in_data[7:0] !== 8'h14 && in_data[7:0] !== 8'h18 &&
                       in_data[7:0] !== 8'h22 && in_data[7:0] !== 8'h28 && 
                       in_data[7:0] !== 8'h30 && in_data[7:0] !== 8'h40) &&
                       sas_valid && dword_valid && !disable_descramble &&
		       RESERVED_FIELD_CHECK_ENABLE === 1);

  assign read_data_ack_mismatch = ((next_state === ZI_SSP_RESPONSE_STATE &&
                                    present_state !== ZI_SSP_RESPONSE_STATE) &&
                                   (data_frame_count !==
                                   (ack_received_count + nak_received_count)));

  assign bidir_data_ack_mismatch = ((next_state === ZI_SSP_RESPONSE_STATE &&
                                  present_state !== ZI_SSP_RESPONSE_STATE) &&
                                  (data_frame_count_received !==
                                  (ack_sent_count + nak_sent_count)));

  assign primitive_violation = (((!sof_det && !eof_det && !soaf_detected &&
                                !aip && !sas_align_detect && !eoaf_detected &&
                                !sas_align1_detect && !break_det &&
                                !close_det  && !hard_reset_detected &&
                                !open_accept  && !open_reject &&
                                !hold_det && !holda_det && !r_ok_det &&
                                !sata_rrdy_det && !sata_sof_det &&
                                !sync_det && !wtrm_det &&
                                !sata_xrdy_det && !ack_det && !done_det &&
				!sata_cont_det && !sata_dmat_det &&
                                !nak_det && !rrdy_det && !sata_rip_det &&
				!sas_align2_detect && !sas_align3_detect &&
                                !sata_eof_det && !r_err_det &&
				!error_det && !res_notify_det &&
                                !res_broadcast_det &&
				!change_det && !credit_block_det &&
				!close_affliation_det && !notify_det &&
                                disable_scr_count == 2 && sas_valid) ||
                              (sas_r_d_or_k_code === 1'b1 && sas_d_or_k_code)) 
			      && valid_primitive_det);

  assign aip_xmtd_by_non_expander = (SAS_DEVICE_TYPE !== 1 && aip &&
                                     TX_INTERFACE == 1);

  assign error_xmtd_by_non_expander = (SAS_DEVICE_TYPE !== 1 && error_det &&
				       TX_INTERFACE === 1); 

  assign close_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                 (!(disable_scr_count === 2 &&
                                    (sas_align_detect || notify_det ||
				     sas_align1_detect || sas_align2_detect
				     || sas_align3_detect))) &&
                                 sas_valid == 1'b1 &&
                                 (close_prim_count <= 2 &&
                                  close_prim_count !==0) &&
                                  (((!close_det && disable_scr_count === 2)
                                   || !disable_descramble)));

  assign break_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                  (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                 (break_prim_count <= 5 &&
                                  break_prim_count !== 0) && (((!break_det
                                   && disable_scr_count === 2) ||
                                   !disable_descramble) && sas_valid));

  assign change_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                  (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                 (change_prim_count <= 5 &&
                                  change_prim_count !== 0) &&
                                 (((!change_det && disable_scr_count === 2)
                                  || !disable_descramble) && sas_valid));

  assign hard_rst_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                    (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                   (hard_rst_count <= 5 &&
                                    hard_rst_count !== 0) &&
                                    (((!hard_reset_detected &&
                                     disable_scr_count === 2) ||
                                     !disable_descramble) && sas_valid));

  assign sata_xrdy_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                    (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                    sata_xrdy_count == 1 &&
                                    (((!sata_xrdy_det && disable_scr_count == 2)
                                     || !disable_descramble) && sas_valid));


  assign sata_wtrm_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                    (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                    sata_wtrm_count == 1 &&
                                     (((!wtrm_det && disable_scr_count == 2)
                                     || !disable_descramble) && sas_valid));

  assign sata_sync_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                    (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                     sata_sync_count == 1 &&
                                      (((!sync_det && disable_scr_count == 2)
                                      || !disable_descramble) && sas_valid));

  assign sata_rrdy_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                    (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                     sata_rrdy_count == 1 &&
                                     (((!sata_rrdy_det &&
                                      disable_scr_count == 2)
                                      || !disable_descramble) && sas_valid));

  assign sata_rok_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                   (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                    sata_rok_count == 1 &&
                                     (((!r_ok_det && disable_scr_count == 2)
                                     || !disable_descramble) && sas_valid));

  assign sata_rerr_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                     (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                     sata_rerr_count == 1 &&
                                      (((!r_err_det && disable_scr_count == 2)
                                       || !disable_descramble) && sas_valid));

  assign sata_hold_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                    (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                    sata_hold_count == 1 &&
                                     (((!hold_det && disable_scr_count == 2)
                                      || !disable_descramble) && sas_valid));

  assign sata_holda_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                     (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                    sata_holda_count == 1 &&
                                     (((!holda_det && disable_scr_count == 2)
                                      || !disable_descramble) && sas_valid));

  assign sata_rip_prim_violation = (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                                     (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                                    sata_rip_count == 1 &&
                                     (((!sata_rip_det && disable_scr_count == 2)
                                      || !disable_descramble) && sas_valid));

  assign close_affliation_prim_count_violation = 
                            (REPEAT_PRIMITIVE_SEQ_ENABLE === 1 &&
                             (!(disable_scr_count === 2 &&
                                  (sas_align_detect || notify_det ||
				   sas_align1_detect || sas_align2_detect
				   || sas_align3_detect))) &&
                             close_affliation_prim_count == 2 &&
                           (((!close_affliation_det && disable_scr_count === 2)
                             || !disable_descramble) && sas_valid));

  assign crc_err = ((crc !== 32'hc704dd7b && (eof_det === 1'b1 ||
                     eoaf_detected === 1'b1)) || (crc !== 32'h39c8a638 &&
                     sata_eof_det === 1'b1));

  assign stp_hold_holda_dword_violation = 
                              (latched_holda_det_received === 1'b0 &&
                               stp_dword_count > 80 && sas_valid);

  assign hard_reset_violation = (hard_reset_count !== 0 &&
                                (sof_det || eof_det || soaf_detected ||
                                aip || sas_align_detect || eoaf_detected ||
                                sas_align1_detect || break_det ||
                                close_det || 
                                open_accept  || open_reject ||
                                hold_det || holda_det || r_ok_det ||
                                sata_rrdy_det || sata_sof_det ||
                                sync_det || wtrm_det || 
                                sata_xrdy_det || ack_det || done_det ||
                                nak_det || rrdy_det || sata_rip_det ||
                                sata_eof_det || r_err_det));

  assign hotplug_violation = (sas_hotplug_timeout_count !== 0 &&
                              sas_hotplug_timeout_count < 
                              ZI_HOT_PLUG_TIMEOUT_COUNT &&
                              sas_align_detect);

  assign align_burst_flag = level_select_temp ? 
                                             align_burst_flag_posedge :
                                             align_burst_flag_negedge;
`protected

    MTI!#?]$=,EVj,*{\sm*B;zVw<-J#i={uh@a}[:-RtFj!HE!D|7?ED=?Crl<{[oTQe0#v_pa_56e
    ^Gw7~*1#7+2XGW@,O3~yYHjZ#5oTV}WTG['Wk5[3E+AzG2lT\nQHB,,ANL{-^@vXOjr\j7oJTWDi
    K*~]un$*A\O"!I}Co-CO>+xGL%BW+O'e{'jlz,_J@]-vG7~qU]\mI~@x5iBU*v]#ekYl=ZUG#+*z
    yR'?IBI5OpEkUh]7EBp?V!_^>$M<^-v,\~p-,R\}@,1]2DwpIRXJCVaF*@UG<eVv-wJeq<zU5FJ|
    is?Yyp'GT=Ew>$]AW1_r~oi$*1?rDhYHYr5woK=x5zZoN1+^O]#~;a]D#A{mnlpu1kIZ[nT@A#w!
    oiG?I>RX{]OW$pek5IY$J?XlBRxA<@-[i>jkpQ-~AT7[X!Bl{#HuK^?zW@{}ZxjZ;*nVJlJO]1Ce
    ]tzv3~ziJAM52e5Fe>BR7@I3B'+QCY5sMnV?p_-![+Qm<XzHUC]SECmo7@DjuCGIB;;#e@7i75V3
    nDOwF_wAkI2K@;T,XBJ{;6+Dnz(eC}<\~!AuYY7eWX2-\iY,kD77A;Wx,rCAzwCt2Uz3G>H^'[\~
    >}J#{UQC=wRJ5wD~Ks~}ye5UxoJ1j^u+a$+er\Ke'=TVv}'n2z^\k1eJXNOi<}TYZJl[uUXI7pKR
    \'O@RD|[XDG;se-WV7[m7lDl7r\a{;Q$$nwO>lG{5oi~'?OwD7O5!;*F"s@B{B>Q_%EA+TaNT5!~
    ^5xTYw@D~SR*\~H1x<Y=*{He@*@EQ5CPC2=T*uYQz-*Ju$m~Z=Bie@$IA5\HR$k;pR<Ysaz}y^}K
    j5rC+57t\BYDoD*,rpI,a}n{[1~JqoiGY2n\xz2[+K5u,{j2=$z*ap#jHOQkpOQeiz[{5H_\~D$?
    \o5xXA1Qsv@Os_H@TomsDW5}E{Vli2vYO4JEw<~U3kDWjjlnZ;iHE!WD#x]^<!lGou'wA[KUV\\'
    ^H/+az@kC<-jG_5$I[>}$#DU^VIlp3*IT\~+R?@Ge+G,r?}/1W+2PQJ>l=WOUUY5$:"*YW?->>v1
    ]'UVWuUj!!]Ewuj\>YnZ]+m;spIV\GQ\wE~{+<,l+2=+L_BVsv]_X)z5pi]5V2eSl\@W[Og[<[_7
    JxE=iCm,Hw>uw;a/peH;#^mY+,VQ?a>p%GO,w@<OiYY@~7$<CSDuU;Ora_Kp]+=^H;x#Ga>-o1GB
    ??mT5W@Ewj'wI3EopIiGnQ?GuV?v5J;$ZZKx+YtQW^CcEU-]Grj$'[JZ$u>CAYv;YG|G#\,]lD@z
    s1p~>@VDx{?1a!ov>~a,<l+_Zs>{<eH,_XD=[-+[zAH(w]'z1p{k~*vWi<==bKjG+T$5~HYZu>}?
    E<={-'p}eVKTnEa+#KIv{XwJ23$~-_Z5BMAo-CC=v!p<7s{^rx?$n,p<V^JIJ$%}O\jNnYY7$OzQ
    mO*i?<[ZQUeIU1TO_YDJ]i>?aGGlU+Y5elQpAOD3<5<{nV<^C**B7ET$(aD2?@,n{Y[Xu<=ris<G
    Rj}O~W_iV1Z1Y;HIu,r!'p+^U;D_=Z$^X5[?Bl?{V~H*A_m=mYVmal\n*QAVl.:k7Bj~$jHA,,w\
    1C1+Yw^l^E-RKoe>a5lRUruhU$ke*^?wWR#QyG-!^+XTzUYlHa>=uU<XR=\LEKCa^uaUzR+@9}?<
    D_n~mp?zs7[CCaU~GaDXDZ9R?v\RBrVE57pxnRG<B23:Q,jiGmRxi-D#1HeB<-@x_PIiBwv3~Yz5
    vG=K*s?EpUG<W~2]*i61~[+rQ8~'?}=-2*}'E+hE?;WN>{s>GX7_pp;!z?rA49Lqc'NHox'1ie@.
    /FwU+jF^Y}E!]@j}1i_Q,U[lm$v:(_*>[l#ID]v+QC=Q<,s_iek]uc,@^peVA7O[!RUsj+r~*5K=
    {*^EDW>lml,urBAv#Tgx+U[KouunAKToBv<A+{l1K<o[H$i5w2A{L7ZZoR]>H[n]+'xua]>^$rZs
    BRdr]nWjh][7l1{7Ju1l-<oQ^;$UBUCYYB.+xDu_=rA_,,zo0=mVD]eG2?I,CGQ'1Y~Z~~]GvI;K
    _V$kO\@wXx#Z1sJW'o[AC]ECizG}[*zjvI'pK5un7-U*T}!DYeV@2ZDzisvT?Dx7xXG+>o-ok^J;
    v]v$G1C~-=U{#3[Wlexk<,jAK12ZY'j;\m}[5KX3?<AA$onU<B#IZXBKY'D*]?5U1TjDmxD{+OyT
    G*5Fv[Y{#E*2U5*E?rkRTs!jo}K=#[E5,-~$:nsvV=#_kRG3w]@rDg7+@![lUYJj@$!oZmQe=Hee
    31H]C_H{EkE?A!2e=1Y'xC<G2C$;+$2-XHSnDiH@N3Hw{ZHVo#+,5Q3{55V*p)rvJV07]e2'~H<I
    2v#,uV]cT'$I#^wk4H${[-lm5,wQIZ$VwdcH<]$[pROrAZTR-A@NA<{R'*-IXz!Ow^{TW_CBf?D'
    ;%"Yv$;u\G{:Ae5WYA==D>G,{nrVOHQxO$\O?5X2OX**I>dBHs+Wt!w__A,r^w^DY[557ZA1?p2u
    ?-\I5^Zu<y^>UjVJpDcs%{,Yw<+>p#lr7aw<'jAR5$p!_>+]\2EjnCT\Y$YB1e_RV#Y#1B<$^$UY
    +;XeWB;ap*!'u)w+-?.lXA_Ca1ZU1C\qP<HTp3-Z@vHAvcBx@r'I?vH^3xsiBiVs7VGpm7%CDY@[
    .Q==DcI!vwGv]~#O]?X]!_fI-wsITmXIk3B[aOY%er^_p?vI#$]r1\UXTO,^YU|=#o1*BVllz]D>
    5~D*-xej+DB(I,1xIX\7({x?]O[o52sp'js2~7$oAx#G;VB,<S,=~nUlau?Hs*X_]eDDQ*HQ3OO?
    n$QDr+}tuGB]XY0!B-DKV~?#w}*d>nOK4!IKJ3}WB3[$GrAl]qORpK[vYvnHBkYmV\_[>Y$?,H,R
    x=c1SC{A{VH,ueI*D?Qa';Y];{xDu3*xInwoR'K{#2*Q~C@[mC?j+k<H5b%=i-Dr_zuO[Gm~Y11x
    |U^CBKUJplHZKU+{W,*n^A_+z~\?7ew2\AX7GooTm:%VX^DeCGRms_>O-U52Yjw4o[uYTwjpkCzC
    f[u[7^XvH.j&j@w-G{_pC9m}1xYi}}IR!}_5;@R?Q}0DiWHQ2\vG@OOjHn-=zwlHXQ7A-]DB2A!k
    n*IwG{o7_=+)-{^O$vA}GT[j@$,aj]THis3RZ5^D!H]2ADlzNLD>eno*^]C^\W/xn'^peiY?D5\p
    6\@W3Kv32g@pj!sn,=i$Ro!5J>x=}H<5kAe<w7W<zupZT{^<'T[wI[E3nX\D?ZZ'pAF<XDJVr?I5
    !a{l;->AxKrZD{^.-7]rg+sG#Y;3R=IC-KI]l(jYkQRIe_"sIlAI@7J*r*apeklR'[Tj{U;+nm<#
    ]KK(7ip~8$Xrj}J5Go*~r^z}G!C}>q]'u3a+!nG6Zrro!UO$gCZw2#'nHnY^,JRs5BVuJ{1,nj*Z
    Oio>Qu^jaQ+VvIjl1eBlzRZ@+?\X[I*Bem(aO~O_~Qo'!O=vRe\3l3#Ea+[w_UpQ,HUYjzox,=VY
    1&X}TIE_}E/vnR,H[\-avQWxzQV_~'oy8i]x]_Om=7k3x6GL?vQOZ}ul!G\\@]!D@<QT0{pojC?E
    ;low3s*1G-jJ7[Ko2[w3'R=\D=mz;2qDI,HIY[[@alv>Va''Ko3OjVkmn~Uv~JCm,v,2R7o[r#=q
    x?{;[oe!aQARW<'DsH,JUp*XEm3sjJ}5eR3,w*7>~ne'gCsElv*7Cu[w!5m_r^jT_$=[Y=TeTX}'
    B7i<3_3{WGH]_V7,5$*Tlj#Y5X]eYZ^{*|5QQI^DBDk[VXrsQrpO=aR;-pH5Em2zImy.~xiX7'Di
    nI1}Rwn*Kp7@5{CeaDYXB2ll^vQ[HT[7GRAn:l*{3%m+BB_*wIiO3C)Ww!xT{vCm*_R?=Wrpas[j
    E7wldkB@A=_juVke+pos3W}H[JI1{pj$Y>RDTe+xusxxG-}<~=s$n5k[k<Y7ae-7]\KATzmOi;*a
    XLv>uoWzu$+sAU+\GR1<!CLD;Jz1>T7VU+H+CV},v-z=A~nOV@eWR1!U-2ZKs[OvilV[vV!Xn>W=
    KU+@w+KQ]]]RWzZ<=KoYEzzks[Uo@sn$]Em]u-YqRu,Y!]}lYm}1Q1~jWsW{G-E*kl;G5[~~@C]B
    lG-^0->@2aU$7IEe_vx'wA]ruW{UJVO{O],_{^32WT<z'GT[E~x-oQu3'?[JA]BroV@Jk+xIYEkR
    A~5Q;ou^3_e}koK~}OO$A<D{Q@Ym[Q7{-v!{e,YZEUXOj$'HB^X,Q,:U-l'K53rwGRnI;wJ~_!_x
    eKXr^zs0{7vs9pI1u\U<wxUz\OuI~LBxa2x7uRU[UDB+o3>sRJ\gbr]i\bRWDOn<>I:G#\1#5wKj
    7<raROv'_\-=r#'koBm$>OQu}xi6x}*x5EKk5G,>1_Kl]!=5G*~u'7J#Cz}1dz1Rp7\Bwc^;<j]B
    C*H-I[n,,5GG^_sDG=EOE!BQEGf6Ms#B*?j}[=$+U'$xTlmaBWQ^j6vJVYwHoYsw,ReBWU^D5p>*
    l+>$s3ek<Ci]W^Es?sar7i3r}'2&<+*+zpv}oe\\$Vn<6sADx+G;Be_Ca}},su5[^mYGOQ[xRJp}
    sn[pT5NaI*J|ZjURVTHlIlp^ma=XI<xijwrCZ_KovY}*3O221j,eIJm{QZ~VE-_Ew]wmo{Iu#53]
    j]G]lI<+,kaC{=ABB$Q^^=ap&bHp{!D;{p]JJ#mOAx#=aGapHa^DA7n*xBkAI\I5^1:'BaC*5GZD
    Tmpp?COoROo@RCmGTCVDawH0['zA@GA,]D,2'sK~T$'ox?jTj?a$B}pim>,uB-]T@5[}CCC?}eiQ
    Bj;Q'HYl]}->7Al?N@Gej=]pO6B*[l9Z$Euwv[ZoBwwtIz]3z{jXO=Je#'?{nOp5av_XWB=OIDzj
    puO~iXz<^pj?UsmQ3]a7[Ojm8CnZ#]{C}7Z7+g3}Y\V=wEjEuVTr_v7~\o6R5@oAnVon>O~EY=QX
    x'kUQUo<C3<w1lz]+KOGXW'z5]E;a2!R<HvH\k~pQo1R,HJ)s@<GzQHTpu]\m$pDr1wVY$nj2V!3
    zi5}eG<u?_~aj]CI8E]1n5vWv$+r'Hrj\eE3zGa\vGx#<zpE?53_JzWXr}vImkqv'@}ulR=>E;@B
    x\,m>7_h1pWY{^x@~B$\\[usjG-eCAY!OQE>xu3]p5@CU[!VWXw^^=1*0Y2Ij}ZsYokjp'a-XivG
    J$!~<G@{vj^7kL$<wjiU'~lCX7FO'Hwj@uKUjVaBC'zZ*r1[CJZaGU{^O?'x^H>w}K@^vDD;-zGZ
    QE#e2Yz2$x5kX!n@\*CuV*DWAQeVu!nawm2jsnQ=R7-*\w?'jxuj?B2zOC1;T1Es]1ix#Jl_'xlp
    is,W'rEz!^I-7ATC@$R!5vRmUumk[upO{JAKvOA,zlO-E?72O[;h%DoY-lBWB-wrx+o~D?<@*#Xe
    lnpoIj#G~}ll[ioorx5W1Q_}YCIzJez0Q?7?ID]pmx4rmn'L{}#zY$Hep1vx[iWv+Xp2T[YJsKp3
    z_$o*aZRzV5\7U]rnY]G:4Q~~U\i@Ig-$p!=u~TA$D^sOjDfHUHnxh\I]ul#JGk$kk]JKUWQTD+n
    X_rJ~eF?Xvyo_uU!(+}K3cl?,[9ToEH8s^XXIveaO[r^*'DwGw-xQ-~#?l;+mU;,fizi}(PEQUYE
    #]B9Via{,$ep>G~QmeeZV+}[e1BYnvE$KHzr\;2$Re_2YesY%ZE^w+-+OYXorDGvU7/Ow@uoV7T7
    !z->o@<k1+XAV?$CDCHws>HRRGU_2B*1~suXvwJk>a>xXxJ=XHOUX>eTr?#Rrw2GGZ=e1'GLBAX7
    :EpYY,]@mDLKrDx6\>OXGaaR^ixs'CvV-Q**Jp,1lDD?C;pa-ssm<QjjZOla<rVK1!Aw<==!';n]
    v_-~Z*T;-G5DZ7r\[[[~xA12*?1{+-jv}3_\+XXC0/sv7n?{w1_zX@7mu_R3IzJ]Urq5w@~HY5;V
    1ae}*O}BlGU<{*lAA$W_mDAoop[{HHTDOV^X5E?B2Q'<'*a7Km_l{V[YO_'I}\p#vmo'V<ozw1TE
    Yk@KIxujokA@]3?>s=^}!}}s#U!z*}[wT<;IsRCvkArp>v;qz#H$^lp}m1jZM5ORB>1Z=3v~,*5^
    +=$VG%CoYu_]UnlJD7Va>#'$E#KzlV=n,p'EnjlT*~uX]Xs=5;d}eRQ,]+o5tw=Ok!$nWJB_3_#<
    YROzn^#}Jn*V+:\rw#*ZjZ%UBl#b-TX^T\[~?}pVwT+2ZnHp?1XsKH_jT7~@/6Jerjrk\3aC7l?[
    [2<eE;8JBnnRiYl$H~_;Oo[}[XEAUXpzi@]7[QpB53IL_$pEm[QsQ_J;QGkTCO=lQ+}Jrzz2;'EY
    pGH-ApB3!^E^jo@Og:c{{~2FXD!~uGx,I!X@ZC*xxDAnoOa__'!\0*^$3zXJBGYXV-UmDrTnAIIe
    nuAX'1QIk@eJzdv-=!mv[Xs0*Tx>YzjkWe=\4ux~$T12>wET]A]Bn[HV1m<2IYA[agCKzRQvHjjr
    aURJs-V\D~7nZRVToC{<=O?r!^TOo#17>\GCXT)C^+^yvAWC,Ww{G5CJ]ED^=},@K[kCli$[1!ep
    Aa3*z#GQsUru]sGR:zH';CVe*^aH!e'-j~wXsnvnZCBT,^TvDbIG-UV+!TJQws_[QY=#I_l1?O;'
    Evc]s'[luaz'^Xo{$vT[p*Oq\GTC_YK_63$,@%nG_ISz*H+zkxe[@;2?A$T$=@\7-Iz@+{*5E+2]
    j~nO\7A-vHK4Z=QJ>E=<@Bj1*OH!A^2sX7GTC,j7CxT_;pXT'$5jiOkDBEU,JToKh+CaKG}v-EzW
    zV[s#CvRwEvT-\Q7>as7-Vzm#O7Dk{Ck*wV'?3U_TdQR;oV^2uJQ2*+GA-;ToG~rJ^nlvaErw_+$
    ~{]J2V@aml7C_Kqep,jW7_v\BTz^!\G|5!1jc?Q@Bge#WTY5m+^],va'm;ro;I~<xikHe'e7zEB+
    zeBZE\@,@5ZliEl=,D$'\=XY2z_uIHj]u#Z>R?exDVasx'KH7!LKVlAS^IGHdjY\k12==RInjl;v
    !7WHH9R<aY5!xx_*li\#nJwsr^\u!Q#GH\Z.W<j>uGOnBjReoEG]%Cw';Y$zIO['A-UwKW$rKJ_>
    #A]D+mCUWleHaKj=T2lD;7<o1AaADEIGw8RZ-,F$k,*C^Bz5?X=mE#!A1X*B2DIT$;]WvO#?n,XU
    eulVrH_DwuxIr5pC<>j]s]jw1KREA+e8YQU$o}@RQ1\Jme5XE<j#^A[*^*5QAGww5zXzw'!~#T_e
    p;,rzZMo3~X+Bk[Xl\U#Vjkf{z@ra+RrTY_$pBUZ57Ykt^~e#'5}=aU_]3jTjLTlYDVK}kmwa*Q_
    ~!_v$x'GGY5*2=g<U2vH5~C'YlxA*n=s2KVC-pj$@I\&#1IYekJA.!'r>OjO$p~Cn;YO*Pb![,O\
    @$@<\o,i1ZQio!!v@1R2A,E0G?xGlYWw(pYIe\5DU_Y;lM=Hz>I<xH[1!+OY\aHYx>9"/3Bp1wDE
    ,T}vxTz>+=>a?n7KZe,xeoT_'^^ooTXxo\z1~DGaB&JRZ*[sJG1CJ*;[H52-lOt-j,'?z?no[,!5
    xH{>'Y\9G,Y+'UOCy;>QTRv3=+E=E{*s*nB**eveRlC^^{B-5!],C;s<^rDns_G'er?zKSS_-wK3
    ,+RYDxW*_eRj[_l42-I#HU+J_]wvlJ~CV,nI9arvVD;}wKUOiOB3'iVDBje+Zvn5kL*RevkEBBR*
    XC~T$IB-=>Rsi~?-O+AXlQ=kHGp_*\KATY5[G_1uu;/CQouZT;=vT,>ynnR1\{vX7sk2V;A@rVA^
    criov)KQ[Tl=VG\Hjevk>+KeA[UO!Zo{e[;sXV{GrZRov31U,kZw-mODiw'2w@2H,O#x!zxpY-[O
    2vs+$ssr]Q.7O{D1Oie~$_3[RAVV<Y\pD1pLs;I+IMNsHwp$r-WkUZO=w;3$CHU#w}A]2XrIosvH
    wR1)J57pv,,'Vw_*{HX5M@wVT{EC+E_OQ+5K1kjTp=~xO:s+uYu1BBp'nGal2^nCmuGKO,}jv?&\
    QRxIV=ZVT-pWEkWa\pewV+pYO![e#XvXwp~yQr\$e'\E@Bvj{p[G=5,r,O7Do*kV,s2T#X]\e*7Y
    Uw'i'7YvkTe1U$T3[1=EyJH2I?^x[H5w}W$QO_5EKT[THEXjk?_k<r*vw5v^et~r>mXzuC;R}];T
    }UXUrGv;~~\,=^YE>{UziO0C'~rAxlBx*s$dezivVIUH_,rQ3rpK1R;!UBn\;C,Htp#CYrwx<mn7
    xo><{?o-^rJ-,xYi3er{*0GG#HVeRD|e]=vq.]{-Xz*mla_KH%E~p}Y<>rijBKE#5RSeMpUK59R*
    G{el?1XVxV;>RIrY;sW>l}}@Jer>CAMz=X,QzCZ]Q5sCIRQp#oW{s#VG+>#*IGlZ-!*zVa;}VDAz
    Q\*}O7<vX~#!AU}8V?B#zmDrIQKpAp5ZVi[\;UK!BVemr$?],eZo_ppIn-je<=Ge^5>\sEaXaB~k
    V1]*5s3'>V#ezJa_,@a+nOY*TR>oYz7o5U_;-_[R>++A2GQ#b]klk\7iIiseK@Y,A;'kn-Vl?CIG
    Z3}U=]wnzoX<U<73C_X>UE2*sQeInA<77){7_Vv[ei*@>>I7[$(C=\HGC$~o2opq^5+-pvVZWvQC
    {<Q*'ADHA$3OE^5X\j5V}GB<3,{U5Ax].VleOJ-p<~Q+aY]H*G9uDm-iwCBKO5n*C*I}esk#5-VF
    K\u7G=m\eQvx1n12*sCAMxwjrrm<_2a^Q*am$,z\ZK9zBrE^In[e@Gl$xO!YQI;>>K<5eaBjosn5
    B-r'rDBEY5XLx,ij[ru'O<aR~>{5JvZo=7!~2,D5}jHQ]vE;EOsQBCBuTBA<xGsUEADV,Bz+Kwe<
    \!{nEz!VrXUCQz'GLl+W1%?s=~EX[OxwA,<5!e$Al$zlm_Ytw+5^>w-,B>[OR1n<wOUj}W@O+\Qo
    poR~>$]DkE\A>5-~mCmz@EX>p*_VsIB5J$'',U]Kl:as}<*Uz+o2R;<+p+l\s<9l=K@3}-wR$J2Y
    !ekfRDQ{l1*Bp]Y7CmA3r_;JQY7XCUs,m{aW[Z^~Z+JmOIo^uaZ2>X{,j*xrWr@pn,rR5v!TpijC
    !VK>Z7['R7}W\<Jw,mETse#}*B;+I}Ajeq!w+lAI2Wx)=s1U!Dll]>!^-s@$azYH=u7UMC_uBI[
`endprotected

  //-----------------------------------------------------------------
  // Sequential block
  //-----------------------------------------------------------------

  assign level_select_temp = (transaction_in_g1rate === 1'b1 &&
			      TX_INTERFACE === 1) ?
			      1'b1 : level_select;

  assign level_select = (DOUBLE_DATA_RATE) ?
                             (~(posedge_toggle ^ negedge_toggle)) : 1'b1;

`protected

    MTI!#,~1]]B^V={@J;rsmz$5jWvV[5pnn{r,u};<H,Di#[%#si=a}lV=aDG7@[OeaBuKAGpFN7RX
    72XaeiwZ1F7ZYe'm7!OYx;[*?ptmeDCy!O~^=o2E:Q_CZ~=l'A'?G9uj?jciXJQDIf'HY'2}K=OJ
    TR^\D7'5lY7#wBt'pi;c[?s=R{nE,mQ{uHj=vZ+G{rK-JUwWOCn,|o?{3NeG$CjvYs)ZX<}riCDh
    wo{^G->?'Z~O=#QuJRjIv;1T+^<I~IA7pB{u4Y,RI]H}$nT13w{<3nw~om{+~';,VZo}'1nm+[WJ
    $]A~s!{QiBX1$zp1\A=x+W]i^.o+-jVjHr!5'@nG]U1!z{Usn^Q#~2Q@1GI(K\_{2XOK~{5sD*!V
    ;DHJ5R?vOTIJi\i[%Bj@r1C-\eeAx,3W<sv+!KRGX^u{Rr^uoaB-@'xnClmHI>pmC*>zR/Hxkrie
    @~oW[]c\GQI]7\_O{m]}AU#dAE_!BW3om7A^]$@J!YG@#'\U}@2s!zwU?[T<e3e*pnE[sB*?G;$J
    <n\a)'"eo2]r\5ZdQ+Bw;<_3p<[x=RV]>vH-{EpE[;DRMJ1'@QVEa'w_p!__A^7AURsi[^H^;YK3
    ex11><_on.E{<]mTp$Qjaxy1-+]^$BRVj~Rk}K]17;;*27W\YeCU<vT;a_RY?^'D^<uTpI]"-(=T
    z{MYT$r+lmTvlQlo>BBhWGp$Bs=;y+Y{!z_!T]LF]?z]-CCWFUv3pfUxxI$ozC8%G?RZ{[k[YXUk
    HI^I0jvuW5[#Q1Y@D~D$!@n<^><aCiwsJQv<1NV^&5l-}IJ3B$JxBijU]>R[=a++z{opoju3?}~7
    pATC,g"o_;*2YDCA'n<]-j3YH2OE\EW)YZU;M3]<1+V$J_C!OiRoU,kKBu6a_3sf-'-\Be_vo2GT
    !+I*Nrr+DvwJ3EzHv;]UnXVJk^?YDe,B#Q+2wPEe;]IHxQ!$7A~>~lXo*uI;x'IG1QilCDQJ'unU
    Q-t!jvoTr7T5HRJI;I$meuAd+r}^>sT^8J}D]p-zo?e^IU_n<hPHV~'p\'[ZQ*JQz}'$EQ#$<JsE
    ^wldo\+~p~175}Dwl5o~c1suX=r,<\3JEb[i'1Dk*^tGzxQ7RHw;>Ene;sk7n,i4eWsA_;BB5}XE
    ~T(kUEU{IV<j5@~]G=5\zR{kazo\1B7U$j5~IkC.wXw{-7]}"L?'rKkraEJD3k2-rRm'J23U,7x$
    Aws,+@<]Ya^nZskXQa=Y7r>$H!6OG!-OJ7{B{x>i<z@eDx_KRN$C#Y^{eT5'!<#<neA+l-jlmH7'
    13oJ3^s''{|ZV>+IT5Z%+'#z'54pI'[QkA'DX,sdoKAzna]UHok3]V{]0GH5#@Dsza1Qj-e{]-RZ
    R[EWmZ7D_8@a~]{UD<;H}3f/2nh'+EU|Q?U@2C}[?pm,={H-pp+\B+~uP1~wRG,3+Q1#Ax#z[lVp
    oj~r['v*#eupx2^l]i=<_#\oBks2DI+1'<E_rSPTrKBG[DYu\Au?H!HnVRGw=}ZjJW@,-7+lsD_X
    TKx1ks$sZBXz}OXKeTWZUU>]x=ivZwnv;Dk&2^UpZxkZw=pCQ<VljQX5jyuEDx}v<JJl*uZvI]3G
    w*#o}5@}YEzIieAYCIaT+Em=R]VinRo-Q[\pv#v7B?Z^*B*Kj2rQ_-$K>zbXTeaz2a]fYXeVb\oA
    o:!\eYq\7lR==eCu,iK;\zsmwKr--<W6pn[~O^J]DRBZ\'Cwd&SxvW1[s*O%xEg5ZO@;Re-5ro-K
    'Cx>[l,(\?lX$z+*lC~'u=D<J$=5V5n]JXOAJEY\V_,J%jkU@#nD#EB!kz[D*B51*[Hnvis+J@=[
    {{TQXV5JvGlnwI,2*x!<pHxoDD'u^T=U,Ioe[Q'a=mB@J?1r''JDWb^k3urHHpk'2k6or$p1'O]}
    ZwTY~\![?~zZ^2pjAx!O-~~,W[I2HvZ{-n]E-*>IDlmR{2nb@>^rV1@=VYC,<^7eyjI>s$,\@zWH
    YY7[@n'Q_$szYviz+#H!HpOI;$RWvS-5Aw[VkQrvisBk3$awlO7#}[l!eG+'!YmnOY{TVAQ*}#(S
    }-IYZ-QUxujx#$-Qwa~#vYYj]0Vk<l1lR{JnKT>^QjW^GJCUX~[7TYm>V#<XQ!'zT[\me^BQu@CE
    }\xRZO%*vZr2n<7[RoujEZCBCO5|u-<#~^,*IVDED<u>_BHKo1R!onzo|RpRz[[z4'uZ<@YzRn[r
    <3*+VI[_{5;XA{pHAKH5O_!saIwEjaz\-Q=@']J<e55k]~w}VTXV2^;KjYmCo0q5rIsJ$[$GKn2[
    l+nmozHw],rw^7'wI{l?O^vZE@5oJT'UXzij6E?n-[2B+Q_7JVvVa7XT?l>5jO$AJjw_V@sDw(*{
    _-!joZ>wV<|GiKC=@Bj6Za{Z3sHR-aZ#O*}<$Dp#aOpWmw}zvl}3uApHuDUK<EATI3s$^r_+'l;K
    's]u}RK['@G2eknDG~*\a^#l|$F3NwGkIc3GeI904u.<5_Q}JITZ'iK;,@-xVtEV,pQj}-,s1~'H
    1V=AVYXD@v=We-OaIkI?wRxI@=@o;UAHKZI}JXk-JInoxTmT$KH<Y=!^XCCps*Oo]*e>o5IzuoHp
    D?'5uVYABO^Kz-Kjjz4n]@JpUZQRs^,JY@R$(z'[wI5TKG=e;u^-1'E<,V<Dwox1Yi-x2$'_v2Qm
    =;Q{[zU=$Y@YuY~<>%n>I=%vR1[Yar_s?2#\AX2Y+rn7VRj=Cm'xiC^QJBD31nE^el]B$@Ka=pQ<
    xw[np{;lZlH5z,uG]{]NAYl[52,lIQuD!xG'I7@[XXBQ}J6>VWQ1#3Zxa<KvwrH~^$e\cwEU=#CB
    +vOHVDW7z}*27Q=swvv}7rYZOVQ!vix?G1QmHX$-x'o=C3vOTmQr[o=EIGuV#z?}n;7,HVXsuxk\
    vwn+szlY;6_JG$]>B=>x7WOCTX8QG^K#U3JL,{To,nWpG_,?enmOOR;+2H$n~C3l\I,Bv<oCXzz-
    s?1O-*Tl\VmvDvj7#spZ?<nTJs[,wI~_^]jHN,p7YBjWpZ]-^pu5sC\o25ujpU,K$7Q#B&,CDJ<*
    Z[x33}poO!xk\'h(r+zxoYZ,1=n}X=BVT,x<tMW=_\2TwEc,wj2]ix56[uz7+xEp12\5J+XU[WI+
    _'lG$Ox{<Y*=IkJ>C{K_*Q5rXYn;<aX_^#o[7[K[^rG2YOlVO[Xes?j\DQ*\ICRZkal$j^a]1UUu
    #_xZaXI7;{$j]-w}^Q,;ivjTY}R[#aY]p;]ssI[Y*[?@XUEH=@p^FlCeno>}E,Do-;x;w*z,<Bz,
    O7}n;]EBrXh}w=B{=Q[I~^=t\}_wk&{oze7wWuo}mZ?]Z<@HoBY3$DeJ_?JG3][CJ>\6Z]R}oCu$
    <5TGW[-?js{}axHT_JHWB8s'T[rOJ7S5'1_/reBWs<,>7m\#)2-+O2YC]Kl+[x[Rn,Hu~/{vTOep
    [KU7'IzV2T6vkn23awpkQ!Op'-+x<J?v?=-{}n^ao}A7Dn$pG2z-\!}z?wWks*~$,W,$'GiQ*];-
    T{znET'JeKw<]nv2Yi_#7Wo9->mX9='aro[a^g-X'umoi3|[w\B]T+mG1[C3YuTYim#2V*]sI?I$
    iEl{lYk@>CHKQ<erEC_?XA_^bQKpW.0#_{wXT'J&xmQQ}"R3]j35}o4KCuv5rpz%O4Kj7BBvQ=pu
    TI\-{_Re7],$$uj#wxeY]lCX>'}GsVn{Rm?5[xzVE*D@1lv{]kj[kGd*#2U5~1v2\D[s'iC^"^$=
    5rZ3@c,-^elJz-4Zxjmx[anTR!Qn1o'oB>azQ~$moRXC^@{TO$YjI]@aXC^'3*Wx-$ag\z^\'[,V
    pRs$>}-1:AjsHjr]OHCv$F_VC#s!mX5;]5CCY'I+BIpjiJ2\Gz_,la6KU]QpVzHwCrx@BY}p@W?J
    >ml_nwrm^n'#azaRQ{@@D_E~s!JoRwsUQ!alA5,J5k]J>^Wjs3XG;v>#a1?kV[>]KH{RWV3'U]uQ
    #$j,*U{UH<<>7]{lH^A{VCo[G1*5i!uT]]J;1!K1H@;(/^JDT><<w\\A2Z=z,{B#Xo?$@'|vn@@b
    a^xWJGl37EK=F\]H_v{u'!Gn$pDE7eiojGv^{'Gv3HGoC;E['YUu2eY7;np[UKAK+4xI'E_?WA>A
    RU>}AZ;*nQ5GYmEjp;IjukGxVG+R*uJtCYI'nnY?m}TrnxoY,TXr']F*E$Uuew@;Tp**@CzGx^~X
    D#1fOsD'!5-px3RV!*{ovnE~}2Hw;nlwm*~URH<Az;pj{w}!'Pg}7pIM1#C]4Cj#B>BL2.k-W#oC
    C?u$<CD7d,*_HZCw7IOX[D${nRTu!^z=*TEl3DrA][T@v<*C}#-A#MC\pV^Rk\52xiYdo9Ei2*Ik
    JaiB>=jasu>Ru$$1iD,,zvswE@E*]WxZxYsrW7s7W7*<!E|5Gj=cTrXekaQR2e~3zw'pYW~~:jAV
    mk^!>n+oei{~DrG7>rDejjK-+A^uUo\]}OviH8HUX#nIoj7}evCBme'A>m'r+E<veVy@H[@C}Gwf
    c4I,5aCD~vD*KB^TmJ;+A}GIsI1o?G5\<Dso<3In$im1wo+CK~}$}J/t7"l53Q~>^<wXH2}rw,S,
    <DeDC1v$\i!rGl,z{$,_l+ZV;UJHI5sE<!l1swsZ7Wm'}~e$Q4?zZxVQ$>jC;onz~[ym^-;u$$I'
    v\22e2ova;Oq]aElm.C!V3]_nDYue~SXC-+ksC,D1>ZO2VUAo/5=sCrC_uF>R>sW1AA^TJsC#CKE
    ${!=ew}sVowV7W',3{UUIws,['O1<>s#G;e3Xrie}l{QHrwwa+R^H<~?QRwQ{^2^almA_X_CXQ'w
    <BZGwZr_>dK*$2Z-C;q{zCHEWa2p@JpKwC<HT7*'Ye^D'_WEBl2QHG~EZVZGmRJj>,5/UERCfYw2
    OavGi*k1*t;6Y^3^syt[=Ts%ykw*=Ix_InXXD7D3Y<l=*=7iK}kjue]J{qRWXuZUzkRBJ;'X_@J,
    xQJ,#R)^;C7Bm7xVJjXaRiJZ\7QA-1!?nIrn\uXOaY\4Fp[<QqU,IZ[pl{p1X^jB$nDAV[4orY$_
    [>$*{lHFpHXei}i]a*tB+X2}~Qo6I;$xCj5@vWUDb.#a{>={pGU5W$,gtKx#_\o?3K+WwaneGuQ]
    a;\U]DWrwk_i1%el}Z]J<>I\{+EAarBJUuD~xY@EA+JBH;\U+xZX~jrCz^3_!KO,#J7[z;ZpD]nw
    rYe-[=HG<rueu$5VYRAIY<52j~*[+T3GB\o^YvFn7$k_s+D{*5Glu+{nap[<R{\<XG*a}r=T*'@9
    H]?_:j6iX^lTB!I;Ce1<pDH7J5KTUREIsupH^Cj.UD?+<]JB5rnpG;jilsnkHwEHr5T[1]YeW7-[
    tmw~l;[3=<YT5$]BY\9ErQ'}3=J3D2-G;'rOGzU5_$nz\]IB1_};7^}Q:m};I4a>5YD~;7WTo~OX
    REz3ei6?[^ekje$7nGO/^Wr2{jiDn{AsV@~[{eDk0_Ul>AYuG0zDQU?Yp~-I[WVuzjDE{,L717>;
    A7DF?lImZ]1*vH]lJ'o<GY~lprne$72*ORsGZ5$olzO_oU3I!OxG*>1rT,!Y|P|B]\\$i1<3_ruE
    a$~,JT?z!s+W_UCeCYeGWH2IRX-F5oe@2vZW+]VDE={'(J<]u,{pH3UHR]GOV^6,Io5~>_5V+!C{
    vo$p,u?MiRRX:Zs?U~rKG'*AJ#lzGuzl,VB[xB7#^wlH]M=X15m(BQ@{|}Y~Ca-UY+'I}XDwVQB2
    ^_CB{C13]3+}Qi<HzsTa}Cx,{5wA+3<=uqlr$xWs\AxIr,~el,U^m[H$V,}7{1fJj_uWv2nlounY
    ;3@!l7oZOJ#'wX{RaOu-}u,n,p~zlB>w\{xI,Cj.wQrDGvn5vUB\%dB<*~:vC2Qjn7Y|nC;]U>C5
    'sB_nY~<l#-l~Ho-&<ax$<oDn}zOWgo2T_ACE\k_Tx.->Yl2rG~*'}VpWTskBk!:DGQw|euU$UD?
    1|2a!~EX$n2A}_DoR{R7i!W[@n@YCxX>2WEea$Iznx52$pWVsK\^~,CC~kKs\J>_rDa[T!$rMe^-
    Dr<5xEiO+72!}Wa*3\H-u,K[Be!<~o3zU]evB{CuTlT=wp-HQj~HpXlWKx_{xGs+YZz'r=xJWwV7
    J,{ZGC,!pGsneD[=z*1#3+<A{w$T'[YnvyKUlZAUlTKH!G]#OA_lHBZz\[^~x^4vjJ\~R'5!<1H0
    "w{wKBA*UEO5j<^Euk$Oo+GExnT$@}n5$8Yps]Ba^skVjui=I<sIrsfm\{Yue>mlRgq#*kBGv+-}
    aaHxuT{^3Y~W<@1vRJDmenulF}e~[Fmav*K5eaF.3Tpo=swW-Rjl'Yj^jGR~r*Imse#vCQ*Q\Up'
    RZTXG2RQwYm!MYB<<$a]}q_*I]]NG[A3z5o]7R,1_!$WTADljJID7s_jIq2zvpTQk}wnW@P]$;#B
    d*3]RHeIl[RGp2s712e_WlEHT5Q#I~o'V*-H-;{li4qO-uR@X}}WOH<c!s2>A*pZ$QEw3U~?Qzoj
    :V$$B@o!ZBDkwe^U?wl,CWUjH\;}J>{Y_>wK7G?T;}HpYr7,Vrr$ok>'ue-\sj_$]YaTj!B[Uow[
    D7BA<QrZ\#\Ii5EOIIA;aBD$mSGZG\'{+EL^',nlrzYV^E^IY+av'w};T$Jl<m$U7E<xCZ@V]1nm
    <nxirr,\JJZI<^UO\uY_$IO}uu='^<o{EQ>;}WXI7ZJIY!$@^+kR}TU_!ve7i{DZ$uB{{-zXEI5l
    juG.j_+lDj]5]eC,Y=-G0mxzADw@CEH3DZC$5WsY,?*rRoG}]=?IIO<GH5ZVQ*rUujlv-;<3]~a'
    ol2@[;$3-,D7j)jQj^tPpR\JR7O_oKp1'D[H'Yu>PvECxQ?Zw,DelOYnT*o7-e<-p_#Q*-{VUD"G
    ;Gpk{xrOWQ[WCo!Lo3CiDm,*@'nWC={r_~j{\!v3^JeooIz,o3Y,@.,VIanCxB>YaYw=p#6TwG<2
    e@R%Ca;wKol-zZD*B+^JIwJrSlB!UYCa!EIl=1euDe$CpXoVAul+'nEOHOZ_'Y]7<+1l=[i,mVl2
    aso5wD,~lfrYx^>E[Ezr{7?^J'BnC*7V[Xp5a]#C3w>+KEHS=12*CW]x6H=Aa>UQk,V''O?{r1$}
    wWrER^l>Y$p3nVk*i!BGojx{pX*Xs$5,[1-oC$Knxe3a?3IkVBzkwx<vUn^p'w5+{}^!J_l1+u1*
    W61~Wrjiviz7Uz[iUaXTIRw<W^>DTnRBe,xxn<=}1]uo\G>=-H^U'^T\RwZo1^-Gj'ZvpCZOVZNp
    _DKX$Tr#U77\wZKzCRwaw>?x$V<5<r~R,;Xv2*Y>QYlS^!D,%>xCI@+D+pR}<upkTR7j-^UJz=*a
    ozI_~2<'xdrj$}msz~kn7U=Jaxo5+W>o$Ts_Yvx?'l|]ijwsnRzV2amD*[[HXGHgIW_<Gv31<pvC
    I>O_('EvlYEu@\jDXpB?1vI#IZUj{G,>wjxBCIr+z~-xRep>3plsse2XXRjC{l2jBpT\3e>$X:wU
    v$_i1R\l^5VkD^HznW#^^YBaZ[[*]]OwW>YQ$7:@Xa-[s=kVv*w5;vn!]2_\$jHC?![rjZREHB<#
    r;?-O51D_XEC,YX}{,e5Cl3_XnsYz,~ABnQFhIl$sDx_T~,=pi5D?>7zIa{_DxY<l*;YG%,V;_a[
    B!,'#er',3rn!Dv{ma'!EBuByme-ooQD1+aZ=1K{_j_js"2A<@1rpl1<j,G,QU;z3$$WG<<ar737
    >T_z;1[TA[E\-WO>]G>_C@lJz#i<vW.UwD'i>5;p+sZ=K=l'7{*jxA3e\n>CD\e1XwGAlRD<s\*c
    5IROBwvBA7;]7!,!!&~D]K.o}Ew{sr~Y}H-#<^zI<J;k]zs*GUxUQEmsT'WYpHX<D+DL}u7T!CIx
    n'3Iz<[j!QnuV;'KXHxkE5XnM;I,Z@,u^11Zm,',Bz_rG$=!@QI+*xuR@mj>jpYiYDnKAWX+k;_J
    Xk'_\?jeH|[H@,Go#jJn-O*C13OOI1O,G^SoLp$U}$z-{?,;OlI!7}#;o_K~7S5,n~5zYKN*zYYi
    O^YkE^mj~v{#r\5ORwW^HpeO3CJe,@{pC?*XY{ww{p_<RJJ2{>@e"\UYlc1DTO'+u=GoWO%l;HwD
    *{u~YiU*\HDV<'CQaA]xp,-+7\@C\$eBoO*d*H2EYelI5@~;5*21s@*,*@D]-Bi3~pz?Jx$QzDxl
    dsxU*I^BurRrOxOW5TO7Q&'2+u$3]ZU]jAlVwwh^'j1oXOUvKOR*AZnj+[$a5zj(p#CTWGH3Z=Z1
    UT13G*EiQ_AWJ$2>u7?=dl\RzTr;!$?rjH_Trg;pGRwwBw)YaKnuVV3B<>Z/*Ru5lOO!31O$W>zY
    <>_Z'>[5*XzE'JI1r;n][wZGnCEmK'J#\<HA;BDl87a{J^seu(rD2$oHwU\;z+$OV}#AY7KO]~<Q
    >Ae1w@uvV,~eUBx]I;J*2?Dll>'E>Z]TKwpD7}s#O=u*<]B'iv|li!m,IB;7z~!5X]rs3l{GXp\,
    n=}5V\A3O_5pGXToYrU3C2@Ok\rCKvWAoDvDYTXVHK<=~rE^CrwteK7~E*nA@Q;AV,#]2j=<B#Ol
    paoIl5=A1Q*E_3pluVCOvT'#{l{31*~JzepizR$OUzDO-57$l>GaKAs^+]o{zY+^(X<~uD13U]P$
    sm!vsQe\eGjJ,wCJT-ZVYrm7mwalGD{EYQ;';7]WX[evBil&I@E$e;+7BpT16^}]Jwex;U>UQPkG
    pei_RY<AsH'#3o_M_!OI{pxI,}U_*iAXUj[x;]!@e^rC5u}+]r'U@pHYz1>}D[@vq7lzEoAe{p]=
    zoC\^=@XC*}<ClB2~}DEK1{G]vKzi+-3]@n*3BG37rnB<zplztEX_[I_WH$47-V-W}Z[a<'kS>B1
    =MOi>?5-p_$!+BB3jA\D=Ujd^A3\c,=3s+H{2*vGzK'5QRs?l*e#@=;U!\Yvx\u3kmYu_f",-~,l
    U-'i[i<{en<x+*-12V^Bs6~IDiJ<mzlIvvm-jeciC#~7]2=V2G=xi^nRw}Un7!!5!>}B*-jGw3T,
    vmI\uvarvRo&To{R1!za}Hsu^_x[OGj\k,VVDC2l;{1~Xv$lWT*31+ODkD[AE_IV'-}J#wYHHErz
    U5urA5nl{TuHlv+OVa>lU$=3UoVT?jwYok{vwD<ZU_Tnc:}AQsH7vE}]V-;x$pU,HVS^$YsD+GI>
    Os=XBJxK'CJXYQ~7AC;k^j]]AqKV>zR;ax-eCZ{pRIv;JCv0tBB9*Nlo<1,*370DlK',V+^~CKm#
    Y^x7/ajpTIB?7E~HU3D>AkeY})vaH-*[r-iv]Vu}ZHWYv*Za_AkRw2OUas1}oGOUWoYGel1wp;Mp
    HIGvlvvBQ7^M(Cv;#Ogh#ImjDQ-p:$v@TiU<HY\@,cIHzm[]z*BZ]s$u^m6XE^3vWn?lx[3!<[#v
    oiG+j{'\J[2,Waj=1HH=bVKA~\+@k+v+#Kx@z@C?53-Qe]\'VG\\-r{o<'[YR]4_pE;a+opekElq
    aVCHU_X?I{eEOw!**;{OsJ*[z[CvGe-OzpiW:G@TRekZ<zA+$4G_Uv\O1I,C\C[GYO{>HWb?eCr{
    AZ''pR{<5xVrOj]~Cz_@xoGV>W3*=K\?Rzi>8x5{,pAumr47s$el#v5IK5mG_-AWUYHH[krXB{,$
    ZwpOsvp[{rn-$TpT'ZZ)vul>ex]RI]D\ZDpJH{e?rw\2M'~{$'6Hx-OBO~{}m]vU]v1KA@,WV$^:
    _*3GV[E}+s-DO-Do"^j1YFm'@UZU^B[Cez$*ZTv^AO5_E~;},V4]eIr[3Vw37~3,UT['GBaR\,Tv
    2WVW[-A+\m\"j7x#jF@Q,isHQ''T=39Gn{_vOB@BH[^-xEC]]_T(pE]I,5WO=]#oV#nE\_X;CB+}
    ;aBG,kW}Q+}EwH;V"!$Dix[VW]=#{5[{Z~X]krkKE,G5p{_Vm]*eYE[Au5{z$UOlj7rCBa{fVQQ5
    mVpDkjGa,X2x\71YjvlZ!U$Jo*sB)D!lpB2w'%-B!v$!1QXe=?8x3Vv=,C,WoWTnaKZTwaU~XK27
    Y+-EvA>rGEnpK,H&V2724^@1mZsosI,*nGU11n\?j(1vT{3r^i-X;71RWUYkXn~(mn{wEXKY(J'B
    ]rYJ$*kQ3laT]j<Bu}{[W:;^W->U=jqwp'oTpRUaeDuV,i?~<$e_A$$>=eJ[xw#N*DW;'^s?=-K-
    DuRRCJp-_GHzqR?A!uCKsSxulwiRuxYH_7;QBnwpAxsm=>\X!lk^2=H$-WHa+m3G_<~w{OK5k}"V
    _]<K='\Y2}{D}i[\]U=V!5~\,HGI@w2_W>ov\G'qhuG<IWIu_jJu+ZT[os^{31_~QCG1~X'oll1?
    UZ=>>Ytg{1z;jUm7\o?sxn{'Q>ExH\@'rnoHA\T~~[lKR~B=_u*]?x_E^MeITvs5,Ezxw?@>o*Q[
    wD~CK'8Oo[{_;[,R*>pj,$>Ze[nE,Xm[n]HE}xTuoVrTR?]mxpkWalD,CDpQ!7?p,YO\@1DTv5so
    U[RD]5w*>vlswvpG}W<,!w~T\[pz'E]n^+xm>*m4ehBORD(I$Y+'~-*SkC[<B@,T]^A,ee>pOsYH
    Q7jarP=Bn$Al\ni-{OkR[H*3QUpJq'ITZcD]AzIlR>YGn*GXCXATw,vK1~v}\VYs\XF1]V{7O;z;
    nzTgeW>~62pZR31AI],TwzIs2!5wJ\;YVToOX-+wu\tYxx$[PJUj[Q>;2exUQ=zZ=r!\w@Io#[ov
    Jj@,{JA*R$]j^BBpQDv$U;}^mao-;=a1I[I;HQCG'[=X3[z2uYj<+Eor--OposEkJvn37+{ZHO\>
    s{vi$}W_IsesKw<EAp1W2Y\,~nHn*G_<mI*E7PQCEK:2ORVc/{nw-5;=XB'+'Q]\'{-5J<\D@%;x
    jR^K,~LA{Qn8o?X}_Nm_1ZqmvuY,JJ_>G1!D;!kip*K8Dk^ak-z33pEr7J{*Bu+1UU;5&zz1$T>o
    u[Yv5inaY#>H?AnBagV=uU_n-2^IBz=-eQRnABAov2Ie[z!X5[y_"le{rz53>ck_B$5[poV3+vsY
    V]XvJpaj@_#e!=7]'=^REuiURWB;Y,#zIl0b~,+k&j^lj~*75i*UIz1Goz{xEA\ZE\%1Jam0+5[J
    meBax?z[KD}]HG?^=X2R--J\%es,}7Z1YH}jH~*Cl213GZ,eQ[*AVG5?=AjC?De@*GwCme+12eV=
    ]_wH1AAskf=_pX^?n@Bxr[]*w?uTje}I2\R_^k'xE.H<Bvl*+={->5}Km2-1k;H7rEO5$Jo$Omvp
    lopx*je!o[wo@Vp?<z^_=Q;HW[Buoje@DBH<OwnI~UeA~{UvwUruzk!\$G}xTwYV+BQ*uWpd#ou,
    l]*EQsK#{H!OS)$e]2Qi-=o#$G+{,Z**axo@!ssk_vjB@v^@H3=Z5_VU1D<7H?n1l7el*1$}f+az
    R>xrBo]25UD32**r}<e=IN1n{Cwxu?>z~n]1{Gp-G;<TUv=o>vV<+JRkRr?-'K$\>?wz2*E5R*K[
    3;Ri<xI$GZ+zKIH-RH;EBw1H;>QiB--LF1jCAj@pa(HET@R_OK@_j]iIliQ!;5HplzIo$}YT3$')
    x$}YX+3}<jkKWVT1sH}-?CO1~xRrMJs$me=U]nwl];z-a'${GPQY2Y2+\,Op}ivKe?Ns7[!?\z*_
    ]_G/?7i_zip=-'n+KY~_~ap,X^Z~+p'#twGDO%e^D^#nIpKCkorJC[>>,T(Cf,a]ZoBxC?eiDeIK
    B4#GYrEilGC7R>sk{mZQjZa}<J'=n-Djp-]Y$n?YK~_l$Ga,QI3BaoIB,@YR32RCaC^-r;~p7{Dz
    $]V{3]"$n5eur$oIIWjC*{2MzxY#Y{rk?xv$BAEH}WT~,~@}fK\k;OjW@awRr]Ue1euUj}nl+Bi=
    ~C*2e(sAY@|Qi,'ZaGmwE#28Tr7Xw{j~,oVWxc2snOdpaU;}Le#,3]sHTTaTI~o7uI3!D<w@kp2>
    ]!{A,*Ryo*-_*l'm#TEJeR=Ve_nHVTZu}8VT$-Kr}X5Vj__,F?rDK5onZJpzm5}?OH]p<DQ,Jg5-
    o?kx#W}p~7RKw3'<><gi=WX@R@$UlLnw^O[#C51*W?-npuJ,Y;<sT@u-!oO=CaRRsOJ-mvDQWIj}
    3^,;ZX~Hjz3CZ~o>Bzww7HH[2AG@UwCZ2Of^,W7YX3^2wBXAoe*#<A5P^_C+MUB;>@}i#3=Uey!V
    KIj*lR]}C,Y3X\[2+}{{ms2[uesBxp,UK'DzJ,(llKkGrmYsu77uAuDw>J]4QQl*OlsvSpzujV3T
    HZ1~Uo2HU.I{l<'G3[t>+'T;7T1JT+A/={oQ_eJ^^?EBaBl#s\AWU_lY>}V?nVnQy}=Iv,z1@]Kr
    sk$*C;n<k^k3}-]_mYs5r]zG-U11v$\+kJw5onA7HJ},OO><}1r*Rv_+QZoA^1OuK;-]^>[_[sj7
    }+QCkn7AV[3Haeu-W;^e}^I3onGeuv^s3qG3AHRJ,rgDmA<uOK2GB!~DE\KhzJXOk{T~-$i?JpZW
    ZC[[a]G},ZxvYIDE$7=]BU*]:\=7$uB$H[{I=[2Rl&ZVAwvp>R7eeVo7Di7x#!'@_*hs\Jsjs1,~
    Q;{7k7J_<}Dl>Ezv7n+'a3HG1^5Bd7T2Yv]V>qUoQ?P>UECp@=a\2l$a$isIT52\]5xnp,vuD{-a
    1Dm4p+\#8\Yu$C,@U;j$vYE?vjOx?xQOxEwC2g!A!>[\sX=vH2B5,H]5-zop[^VI,?!55\s]p\3v
    DlG_5V{=k5r28\\#Ol*_*m_jaOYi5DD+$LZjw{2rB<u'_]h5wu2~EAx*UXaPDOpsm\C1~<z,JA}J
    #z<U5VBGu^_#X5$5BQJ5G2OvvTsu/Qk7A]RVnJs]T$$s~/r$i?o7D#5OuAe$[[U[Z'In@W[*j_YC
    1XD5KJlkUr!_#B!&TrX[W=@<Y=jo8YOn~G#XxE@v,#Y\xJ-}#1\]*Jj,C=K{B>I,!x)}ZsIlT~O}
    J*k_!3C^2mJ}RCWIw\jB7pjc1zmEce.Anv']ZjwMRrV#0TU^\?'IkjUA\1,YoY=sQx}a3>5RaEu_
    @xJOk$KorBB<{soUZnD1+AV?UZ,,}$7TT2a@nI5{Z'/}Q_\[ju3XsY{@ojAR'}uKjxa1IKW[Q_Ke
    k~rvs?at>j!VG~{eeH;WqJx<C?7zk}\rAk]-kRiz[GV^AuGC?}TRCFDUXvj;R2_AR\YG\}3<>Rv2
    Op_E'siB~{I,AYq}va>tDk<l\2sOu[X#8'm1p\_3$/<O5+bw*2BvKB~k1#o3}2p]7*Rv1xVa-!G3
    AnAB]G}#_Jo/'TDk='To!EJQ]<Q5-wwl'G@_U{,Ww>,eR,KJDAz5jQY<oEVJ$vQw~^5a5ZWm#C!r
    2X[HDp+kTwTD'*3^]>pI,$'jJC3we$=WK_Zn[Bn5'Xp#_\A-j=U[2GCK%Y~2+1I#{v@r-n^v?L;p
    ^TR'Vs(epvO*]rAH7V>ZVX]<xOCfRO]w'zO*-{xkJGr[ETxeN|u>RBh+BWpkTJ#=<xisp$v21+TJ
    <nAIWDGHT2J<$ZRYp=JG?'_E#ws+UO#Nu,JYV_HK<,+Upp{Z]>V,caoj~w,E9'Z&|l[UKZG>wMTI
    !#mY1ZHH3}]Dv{Az,eE~J@{<ODpun@YZn@Ng}GDi$H^i9^~IWslYKp3\VZ>Aa7ROin]!GKa{X$*2
    ^De+zp_~A_Z$GDm!{nG^^^ji~'AK$x?Js@QRTv_Jm<CB<ms_\]L=3]@mlwroeH^<}?5QVZe+U[n8
    !_xD$&[ix~kG+1l]D7SLT]+[xQC[Ck]a[;A!W72z,>+@GYR2foH]_G!uWax,jGo{^jEB{GVa<[H7
    T^l-QBHQRB\Qmu<YixSi{Ip}$Xu1,]*X}<R,_kT]vVlI?GiVHEv$Zle(}Zj!QuToY*[[^zp}G!nm
    ^]krtTRk!Z}o#*TaT#C}Y^!EsRD!le<eolY+e#Y\zs^+->rEigl+zEBURA3Q-u7)lZv?O>*I6*D,
    Ztx_}HE[i-'!]_I@Jj1oln+j]@{xuH>rjAp5plB~2!Dro\O,>U;Anx-'1ip?B+&rzEu'5o2,_Jok
    H^+KR>CcoLEa{T'n<p-[$<}3}D{U{3VV2e*wC>1;ux{\Qwxd^*XkT[i]wxIaCYA-J=0?D*\35<wa
    x5vQ[sszkXo(i5kTf-{KIiS,=']{Y<=w\<^K}j?;Q^Cm[@a)G]TD{}@w*_C$#6@*mn(rnz^OB\UI
    zm;i]DI@zUW})5jZ*JepJO{<7Vk7OD$eiY?3JjwXY^k}BoUuQTD~@5_#j~]oCCI.H[nmrICIG2lv
    *{5x^3,X,B-~[J]k~osn~_;wRs7J_n2rV1}-!pjv*uH!K>B@$zj{zaewU+K7eBKR]TsG|t,^Bw3Q
    5EBK+v$e!JxZ_#gC77v5pe<se<*!Xa<l}=x]BK+avrW$'jYeer5v2XDEH_Z^z2xysxYu1cYVx}%2
    DQvr{K?l~K}{YkDkl,Y*[zp*C*xOT>#[n_@+ee}z|nI@pKo?Gza_~\YIG5'DZ%^h4c)'O$Tm}X1D
    RBswvw*1Ka~*~}Gw}@A~]ss{v+VnYBDjEIQ!=K;JYTXD=?=XlA'#_Cx\i\2Ol#\PNCWY5Z[vZNk\
    Zm#1>e?QJZD[COA$DRl{\e{+I$&QJ@!uwC_nzsEpXe*^VnaJH+~1z!^qGj{nwU!3T^nRXT{>\ej_
    ]xz!OAX2U^Rmv,!Q[_]^?AZD@$lE;{w'~GX}UsXGNID+2->xT>ojlr'w?QKx#X8Y{rpwamE7_'vC
    'kw\A-H_JZGvkj^2I?[z@[^@<]}j7-OACO_*eZAlpjTGeTG?$KU<nHj)qza^u*DHQKO5avuH$#E>
    sW_3>Aj,ewI,WA\aE/Q,7Jj!aE%d2qgE*sZzxV>1jAX}px^a=Z~*=!a]}]W+Y+n@R<rs~7mB+},I
    HrCCuH3ko,K~<jn;lsrzZl_UE$xmCXw@jm}-j\u-<W>5?11X*{v<GQ^/{G7E{TCX<s!QCbnlE]E'
    ~E=*sz2=GA,05\xH4_$WK]DTZ[2=?b.~szal*}]rTw[I=UGRrW\q0Z}eTq5_1seGW{l{u]$[w2$T
    ol5s@]~nvBO2>z!}Q+_zwVlO!71w2=W<eu>vo@\=mH2Dwer>Hp~{z[~Y$7]DVZDtB'jz{{pn*THu
    B;o=[\p?+D,1T7v\ZVZJImo;$-1WxKK~Wal+eY>rp;~pY}o2yw[xU1GQuOT7>Za2eDmX~.B[_1WT
    $[^w\Io~TRo'TZ3w2V1epU0o=kG{X<I$*rvCZO1]JZUZ<-^izuO1vC=T'i?]#T{YdZQwoBTeV]!G
    ^r=lU}~2o}o=rjG@D^e{{|*<\D*vKaEZmW#5J!ID2#>l=ZVrX~TTJ\]&=prkzA_kuTsUSr>Ba37>
    RDDva~jz?S-{\Wr5n{|^}xA-wEZv]RA>RL?1',Kw+,J_}U/]_oo]^=T!eH~aA;nE}5jsk~3w<}<j
    <->^BUwV'pJl{\C-$_wCE{j7=K^j*3?9@oY3#=#jJBaV\Hl;,!$Ak_?Wvve~Z[R{41lx\Ens\]-Q
    A,>B1(wTHmn[A$R~!V|JVvn[ZCE9HX;e^Aj#5mWBXe2a3X-z!a\G_[nYEPrR?#X>2~0Fz$TD{}~B
    f{zG}PE=vrBWQR7KVOmC-QBj@+,U{REAHmAH!u#[?Vz$kYCJO3Rs,V:I<+KuCAQ]uxQD[1?kz!v{
    N}kw7][*!XjW#&^[?rLVv<C2YjH^1_siQKAWI3rKGa#8[z7+llH23T+5M3wXxQ^>@[p^x^Hm'Tnn
    I{vZ@ssrW6'Y2O#x'2]Ke@7pID1]}BuE[jK,{sIoR22C$=2>VDJEmp&p}JwFAOuGDI>#$n}5w[ip
    }\~p^#Ve[ww,*XDkwC>Y^H+jIZ_zE=Ox_=<1T\75>C=D7;VKE1]UITua^*JZYUE'orrCYs~s~8v+
    R]!z=B8FT\5[eO5_eII{y2=jV>Ia\*KxoKwQ@'7KnuV7]DWIv}W3~^-G_^3=nsX@u<oxA5B[IsrX
    Yxj<^+lupl!U>bOpp$l=ACdM6-'#D#'xvIU~7D!1R:suH+f#O#K?n^w#I{j/YX\ETQ>K1mOxhpun
    =YJA{z^#Wv]I[_TUVFO<E-ZpIuC{oCL2v?]2Y]wsi>+Y-}Q.U]\^XrpO{aAr,oX{=jB_*+GVla9{
    >vZVmC[X_oAmX=~D=1s{-}r}i2<v7=\#I5HNDr{VJ\m{^KW~AOnk?TCpBGZ~<wuo!EJm-]z\?lm\
    UxZ7Ks]x~Y^?z{s=lD^'Q7>;Ix5ORRZwl3'j6So}Gp3,ln,QEC~>a'o1}\Cz{='E3RDQxRFZ>A3]
    '@\o12{5;e^c>r]EH>l_7CasHjxRVwBCRu<__mo{*aJ-,<C3^;AEKG#U5H$I%^QkVv+RWCJ'swV[
    pE[v\?sKI@V'xBwYwNB"-*~'I$_-7H3us},W+[D5omA'^$7UipK\x\{zE}\Y5ZeOsZoB1~7R;$QE
    \QT#--^\2R]',TI>,Js~'Iaez<]rQR]Alvz*3]w@gnnBB-{A\]m\@Wl}T'HrO(m'zaT7X;>GT@s[
    jpJlrA}p+{_z#!DT{RV7JUI]-v-=C1z>HjwlT{s=#{p]-Wj-OO#G2O;Oe^^]#pnI^]{E]>]vX~?l
    _\Z<H'>$325Jaka,,<xZo]W{+eD^~w~vIXl'YRwaZXHzuA}?Bw'jQ#s?77VK\xd'W!pblKe~)$zs
    nlA^'i}{]Ql'ma{{O2v\WUvGW=;UTRB@wf%5Kawpnxku7]?;-usB5G{?TmX=DCwn+{U[;Hl=3uz]
    }VX4G@_-{o;oE>rBx{1x3-H^axH3]*e_>zur[A<QEo[I+oTj_^'xQ~w2^HTW2*QQ=l+YupvW!'U5
    &p}VK<${B^TXWIv!R"$Dv@qE15DD!WDwQp?_1uHZ\jYQi\HHXmjO},QT^hR<U}is_X3zCHoaH~U'
    7G@o@HV^TYA_jin>eC2V>1nVHm'D\HQ[r!B+r]k*DR|Q5?**@1-vOZ\Ru!\*5@R^^]a1*K[uz*j[
    ;_Y>=k}I+;*uVOQ-S|75ixBU;D<E,@,_TQ!o=K7RR[$7nBeE5+Vs3[p#m~2[}$"~<Be=CxvYx#DE
    _mn}jTZ=OJEO}2'r*AGJjs2=5awI1xK!YxxI1-#+,xX{'>jP3-1ARk{{_R@;i_>5p15R$zJ~;1<1
    Z<jE>Vm<2p{jH>{DI}_1K$VHBis7@$=lYTJa)Sk{lv<\k\*Dp7\xEAVKrD]-_n5Y=Z?<*;pr?Z]*
    D@zH;]QeQ^^!\^x>}@[[Be=ipEiVp<7ao'!jkHZpenxD={r5Y<BtXaDU1H<om^;G2Tcl;$n:C_a7
    sH+RC3}5^';#/Tr#_'H>l1;TmVY>naIYV,~$Y,1WV_}Aj,ozru}GjAj{Exa,v_IkvDE<wmX['_un
    KHRT["~AIpTGvTr5~[VIoza'CDO2\iBV,l*R_3t@=R2WDTz,J<?aR6r]u~ws1W7B;{EGvTp?!O-v
    G3BA^-C(E>@KAEGv?CJ-=r+<n_n!CB}<ua~Ra,!-(I-{7H5^Jz#Z@;oZjd<]a*u1Xn+QU3Sp1H^U
    +H552OUmHQIp_HaExwE,jT{+5X]z$CiJ_1exmD~Fq\w~![@!\eAjXase;J*[KxpE~GE=XdT]@A@H
    R~$\*j:-_e~,-D1An*;rl;$6}?{\HQu;Y,r}X'Q7SiUEO3lCDGGnp9^jK{Q8X8RKXC~v^a&v{_Y;
    aJ'EhKzpieiYY*HAvN|BAKxI5X,pT~}e;K@7x2R^OGz,JCK.kYnu(1aU:~*pBD#oDjz>}-C_HU\1
    VC?lXC?VD.GB7-eX;p:lAA~Q;<s<lH-VO*u=pzZM7l,iCJpDqFQ\1vOX,V\=zE-\B#Dz{nYamww'
    5e<<'z]w*eYY,2~Iv5\M6!=;ea[5@~<]<Ev^^j,;Uj\@H'ojIjh[*ju*Z;]o!2$w$\JxE@r*2zv,
    ~O*I5]v[K_rqzB?OCVEI;Vw0'{5}$m+>kllGRv<>{aEuDi,k%=;wT*}v@U[iU5is^XjvCR5sYs'+
    WS[YR1<osuDaQ}*lp;R-W_sTAA-Dk<C\}j$irDu$=5d5r>$6c7;Cx!+n>7$u*9]l~?\lA7}{,jg,
    a'#_usm%no$w1_Y~>]sw^QAWQ{-vn>YCV?AAIjTRRGmC{131>,3W<YXI15#w2xx<CJ+jB]T3CK=X
    ]r7v$IX[*~~XOXIDk,-Is?<{1'XRIYAwC-Anj\CCUeG#k=?^qQY1a:^PKxjeCa{w@'1e{Cu^rH,=
    v35O)HI7B;-eijpe{ezs'G[}5[TA!=]=Aw'Ap?x7]j'-Brex5k^[agzH@'(7~lo{z??AvQIsD?[w
    nUa4L#V@ovo{KW_uU8+>pGZ],Xcy<zY;s5v>De{ww-~m-'1v_,fTE\2UGGx[z7bj>lTKnw3=Usr:
    !(NBxx^v=1RABw,{Q*wG_D@erXprWol\s]',};lEn>+]I|lmH++lr'@5aY=V~jDG@KkC*x_Z~sH7
    -K$KZwx\O^VEHn5?AG8NoTj?OpB=~}*vT7>O_#^Bs}=Q"jIWv[5*7i=G5BvRu77iJp5=l~N{7Hp!
    ,X!TjKuoAVsw\xv,W]zv#A]>X,ENGw=J}G@mjr!juBmY^'O],${>]xR'fr7je3ExT+B<Q'pQZrIJ
    Exj}}@lu72R2?7z@1Hj\uw--p,m+!n[77o@@HaYkTOjIT;szUesiw{[>Cin~o]33B1[aop+*+@^e
    =r4#^#a!=!!E-BK2aw]omG[x,z{lO]al#nBiY?jn{spCp_BIZ\kr7XawnQY-}HT<5_DpT\^W^~au
    G-Rk<\'kz,JupX~Y->E'[rWKTeJ}YaH3O=\NH'nO+w,xQ]CG?vWU5owJG@v<Yv'!=%nDxk^*Oxih
    J^#^1Y+_E@'rC}^ea7r!DW$nfEwwW.3}Ha'E{{\k~A\\K[+w'D[^'sO<EY[Enj2=wHE-55TG{Evx
    JC]U+wo?V'nHj^ksTAoJa+eG2Gu=xzIax>B}k@IuRlpn,<O!=Kq\{15H'mkpv^{[UrZ:vz+s~1u<
    [E;~1B2eC8JYT<,Bp#E*w[|-[J~72<#{1+XG=aI]^v{IBnkjz;!IOzG\#IZI;VD-Y<J''5]-[o7,
    2EvB~o^uAul5,HB2^@Y=Ii'Ck*p_@@HI7mYOCl\r\$-r$3e@Q2mZ{zV+CQT[G!Dww;*>1l?6oT=;
    0Bp<lwH}OTOsD2DOT]W<jB2O?>}n_m-tJ7lC*5u*+DwX;QlWjY<O,Tl<Ue2l>-7R?sj-jm!;wp!?
    j~IuoR!TcJsTw67uQ36Z^2mV;u]ippZ!w,U9lwsme-RUWa]s'usA=IOHBu{ejzD]DAE'AO1CvxCv
    ZBnGC3[xlrzH0F*o@aQnw+NuDke51!+w[5Qra~VnR^p^iA3v!mrEuT1?^Jo/sYDu_5\xF3C1IHR+
    3w>AN5Gm3BQnxs$>w?ovO1O@-~Xzw<euIHoVKG,;o<VADET5*#n[,#>7O2Io$na5u+-TjZG1Z~Aa
    ^4jQRp"J*r2$Ju*r"${HHYT-?HjrsC,5;r]uJRE7-=Am!;R+JvA@GI{Eoe#[+5j#nInEY9a{-rkw
    ~$2oYjIo1pIRVv^p@*,@O1^Dvw{+e\F}$?U$z~xJ+UCols7.{<si,{~eY1AXGH!R>VKu%1]{\#Ga
    nY~x}enX@CQorEuW1OxA_KsZEMj@wDoR]3aV3}R^R@Z{pxCsvYC~W=/JCGYy6QH}'^?U+vzWE[oC
    jQ!7@#TQY>D-!~[X=Drp7#.vEY@$WXjWa{nJ<,](C}[i#IRTW*ETQs^HR[EH}@O}@]-v+VIZ]}RX
    m$[HOHD3f2$j1_*oVk{;!zE*m5Iu2n$K~p#QRKHFLDpl#M>17Wp.5KH#,e};5iu5k',T=\V'dgNK
    {_NlC^H[2~$p$mvY@X^/^Z}o>]iU}7@e}Z@<VmeJ-7Bm,eBIS'nwj}>-JG^ie,}BkBm@#,swD'W'
    ]Xr#E=o*z7rA3lBw-<]AH-T}ElDZ^H[;U^eIze5ZaxBm@=VCa[[jQ'{$CWRTWG},3[1aX~>u!UQ'
    DwBI,[UjH^n>;uEo3OKJe651,}+*J?Zsr]}xA]3$ziURK?}>2Kpi2<@YOBo>owe{aZQ1_I,$xE7v
    ^u)aBA]v<3kGW_$+p'}}71W>pHB1z~-gVkC1X>1{HzpC$I!~){vnmVnw5Q/^?ZEjs{J\55v1{7n~
    'CrD5^'\7>*wB31xKV3_ij1Do>w=O-H/&+XE2z3uZn8l;vo<7BnWR=5>nCzs<z3Ts]I}@ZnqE\o{
    Q<Qu'OHaR~v?ErTrrbq;x[$^]ar\@j25BEH<w@,^'>uV>eYu*e*VYI$DwYV|Q3*};+_WQ_vQD+Y*
    <1-'<lQ;s_k7GJVWu71}0R<~-xH$R&lD7Y<Q^i#s,s>]?ll]ppvZ*^3T2\'G[,#R=v]eUIYjw@rZ
    U_G]KjC@zZ_i-{aR_nT,v5a^Kw*UO'x]l;}Xn*lp~W_jrO>oAHn1#E_3tw^rT#.z{H#ee@zI#@YN
    ~v]\*vZown[zygzauDj[Z5aa,_]oR\A{u1vwV{odkX+pR5[=Xe@[Q1Rr]pvoQZ-x_iWDG5{'=eiG
    1aaE)y^E~^#{XDB(Dv@ErK>zNdiCzUezl11DU3W*vDQYe@2[-1I'NxA>;^w^I?lkeT-';o]~,@lz
    1e>{Dv72Q:fa]rUOkKulsC#Buj]EeXWl5}QQb5o*3AH*<Z1npZp\E2sEEvv?~}mBGp1Jr'O,KB1!
    ;aaa2;=-TG*TzJrJ+G5,_3*in'VIp-_zahlT5C~s{2paAp&>as?_#I?\n<-zXmX!vRZY^zs5@{kz
    JsVe^D}woum'_Wwzr1u)%jI1GTHvHrI]o+$,[~6@CH^1*TJ^@B>m[z<B3ClA}]{'CE{={^xo5a<K
    _Z>nXs~O-w?}aA]=QT^I@lV}XZQuolBfgp~sa5k'i\:~$Asi-Z'>TVo?U'-m7$j_,3]?<3\plKK]
    $u[U5sYs?{xoXm}q2D\u&$WZ3Bd?RBBUaK_xBwG^sH>FY]_O?Xu_&p]K!u-=!T\zz>eQ53Ya@_^5
    T$}vG,+='E]nRCV5XE]Xu\Tx-@13oe[eeiXWVUezA-V}[3wwI0<Asjk+C@I@5nomjo-7V_C*3@!+
    A-Epxu}<p^wVVX6{oGxKs&?B1mWv-Ck\l^ym1WW]!r\HeiI,vw*Q?]e#De2de~lG]o[}@5[1_@We
    N2(C>[pj=$W<O3[$kTx]}UmT7T2C#-nTju-Wan@gRA{;k>{$]-Bmm*l=k{Qw~XwCxB}3Zzjl]H'r
    [QA<T{u]v,a1;C?;-[+u;[;jiwa={<I<yB;Jx7}+k]=lz\^lE7KV2|#n75,K!3(n1H#UpC~C2,+<
    XzvvZ$T%?{>p7Y}TaT\IH],T#7om[G_[xrl$vnU@O@sis\vUjZWws@KeVsQ-5s71v<X_uB!OBm'k
    2pWZ{v<A'=^etXO![E+{_WR;lmY}$U=T__\}ZZAp+nHU;q7uUr/zz5}t![o[EWoz!OvprQ22fIIx
    TGTxEv1ral_r\,],RHYX+CZB;p#zxxG=Qzp_vpU_JDd7\Rr#OeCC'jEG7l?H{}v}-{ABDX}3IJsP
    >I?+8TYrJ0Qr$'G[[eYD,=3-m5'_j+7s11ox(3ERw}$HeOn$<%}E7$G3KYJD+Um_O=1oZCzA;JYG
    is#[vi;\VsT=A#\X2?}|jB<m3+7p^eK=%c?jB$3Eo2ppTO!]Ya7z^w_*-U1#J_KD3_i>B\@]=,]>
    *e)O3=@<jUQKjuE7>VQy}m@#m*-o5,[!<G@5^Cmx2>z1lZzW5?AKpe<nWj+[HXI?*_Qs{5$wuO'v
    BmQI5!jGB7=37B~JR>}zIZ^1rD~aiHraT[wE_U}V~e'#5=^i3U,,Q{u5E<w1VCWXOiXn@z*vJaw'
    C]>?jimeOzBkwomaC\n*=TpaGZvm_XG2^CBxM0K1O}J,]vQ$\G-x7UXoo-3Y^!DC=RIYa9zCewG+
    7]mqAxeQ5JuO1+^,HoIOCH^}IGjHxIkaUHJ*P2rJ13RnCoT>IA-Bo+p],[<@Ku6<<R=B7Kw5zU#U
    7Z-3Q*'0fn1ZEQLk\<n-C#[W+z3dV!DDYB5pjpGo[A~DP0a^2?IW<kXpKV7}XJ1R]V'_KrQD$Kzj
    @pv3us6mCkJ3on$>B>X]HEO7;-1Q$]KYY=GHOC3,k'um,nH,eDe3zYnv5$Cvle2HT5<xp'D-^5_\
    n=j-^a]zxCW~_3}2a+__wz7Z,C?;TmW$\ETlj=Q7lpuz;w[{{>x+IIo@1^Xol^}2Bo;|YZ,Up[%q
    E1s~]NusjA?,K}bWTOR_va_\iHu5>mG?H<#Rw2Y]eZv~\iAa^YpQx;BQ,IwvTJ\DOHl$O>CB>TD*
    ;jR#]x<Rx>HJRD>C@Upa$2-~Q_#Z5e-~+5x~<G-W1CQ,SEe=e=!{;]G^#y\=;CW'e;Y7$;{CDo=_
    [kGOe-R->*;hvpQ<7Yrx6{Rx;5!1Q3rD@Roev*jarx]!wi_pYk\sew+C_gnr!x_1'mwU7'#w3reU
    \CEpW@UEl~*D'>o-Qk)+}=#vV#xn<GvCz@^xn}Y*,$54*B5~<wQ<Ls1wkI@Wx%2rC\}uz5Qxw]ok
    H5C<RQ{_=~E$lw5IC']X1*Y!$UAAAC+Ur=SBs*GxrVGSIp[}*$G7[B;Di{vDB<7or^5pH7U3qCWA
    YET^YQ[n7\B<7ine~0GXTn'DE$YH^[lpm#R3{$JpH;me-BMvBX3/+oK~;QnXRGZOlujD1ExU1Ei$
    ;lH]wV@Db;}52:o<z@'D7Kb7ZfVY!T-xjn^l,WD?z\MbfM+CQ77XBeD_n21$<n}[71o>-mVw_vtG
    7'YR+2#FW}_51OHjT^opYw=2Op<CxG^$V{1xI__iO=o\AX>#!DB7SUS:Q}J~mYz51p!K}J]R'BXD
    OaX*DRlnyE~T?ToDIB8>Qp\P=;wKoV='=j__U_\ChO!]Ofa$B#VBReD5T#C\K5X1u!xnZ,G-Es%i
    s,XP\Daa?5YZ\3llC@*r1$!Z-[1KjUIZz~]Q~]'H/p>w\=1XTC[a>lY~-<pDG^E7-!*@I[@QV['I
    =#DH<)(uTXR$WwrXC[IW'j!x7+O%/!\pUBsvR]V>=5=wzi7wEoW@]UxXm]u3\b;Y*eup*RR;V<Zz
    aHE>H3wX{1.2{v$17XIa]eX=2UvOoU~[n5AR?1#@[QaE!Do/Az#UgZ>2-E*rn<{K*sma\lAe5Nrv
    p7JzY$D=z^sYVsvrTko>r"Dus-Fn]sk(Doe^llw5.+_HVx7v1Zz@Qk})VOse1{[GJ}#D,YHk^R[Q
    1VI=vkUuGnmm;rJJ>}nQ'^s55_=O;IOOz#<xs]p;v@>J^aTsoAX-)BU5;oRsuxB]$I,o?iA!ksTj
    _i,]r\2@niIH*JEnj-^QmCiZI=CI[xK-2Dk$J!=2,)K{,-7m5+Xs~=2]Z^JUz^>l@U7{$ZH<YTZ5
    XRwX1'\=R}{=R2Y-YA#1DOoN/B1vzG%#,+,Y;=3+p3}6+wIDmxYk]mXW6,1WZ}Z3>UC-O,>7G>HU
    ?ssIIYla\n]7j~^3~fkE@3tD;UuRY!e=r\A~r?rk{I@?}n-}u<E@5I@!UCp]O3UeUuwGi2AKV>#f
    ;QVs2r>2UCH@=$X-3}Ov-,z}PZG'o[,^{KDG,YwAa1Q$^B@}wo>DunRR?ss[pB,\>]t'H,Ben{rY
    EX]QZp>[+JAG>eaTBla9#hlAmK^\Bl~T!+\<V~I;ma%l\RO};e@[fQDCDP5T>{TE['IU!Kjj+*@1
    zu^maXo3!G~a]z]VGk&jQvOoOA-VQ^!C3nXh.3-^Q):ATs=I,si~rx^Sr1>an5?{mQG3E3p*{[a$
    Z7<[EzQYr}zj@w1kszxTXDCKBXQEQ~WO]1E,GpLJCw'&N'#e=ZGKj3Gj+w=uZv@<Ko\lk:}hn$J_
    Wxp<X1OQ6zz]U?A{\{G$IxCRk5+K!IrQO2DmIK-}O#\G\;R8]l,3rr@~3xYWxnYuW5Cp@_HTKU3l
    zh]~>{yEWsIfXHH;ojY3OKO3?UWu9;eVW5{>Izs3;)wBl{o*![}V7XJ>Hk@,k'~a$,vT1m[k=1xE
    }RrmTYD7CaxZ3s2sjB^A1<D1BD:E;R>(Y,7RC?<,1CoK2<+sX[^\jJTm/<\EA>=J;[=\~-V3#o==
    IO-p$_J<*(vD+Yz#I3<U|]rKJ[1z]H-Av)l}mz_sUG1X1pkC{3,sp^vJCJJe*TTav</Jxel<s-;H
    E#,brU}wmo%6Y\iov*JRWQr\w++WU>!\iO+TyCCoxJ]ip<Sy'@~we7+AWX]mNTR]}^_DCKlOEQiG
    _5I]=mG7*EnjY5-,Yy,UYI:eH1xx#7rVKX+?<umiT33C<xQ'e5n_G{]5rYr]~jj5WnBI,VC*Gx@*
    jUe*w!a3H=jJjGG>,_CkX,DeQvT}WQxGH^C(J,=uZD\n'$;5THluWsKvlVQaVE~w#*K~box?sie^
    ]'Wr7X$Zm7W1xD^5$)$Q-''U_r0DJ{151C{^pnlB!A^*{]@QU2r=krZD)5BnB.Axu;!5n2D*=zw{
    vr~*o*OQ-2^z]@Jv7i*ajZ?Ie#BIY}&?U2#iUA+EE+!J_E74={{5aD$[*$;VxZT7U<3\XH$o[#ra
    U=JBzYARW_5AO!;{8na^ie;l#}EHK_JuHzQYZIm'CG$]ojG^i#HrXK,K-JS!7r=Q;-Y-Q}=l!*jo
    YB7CC!pzC]XWA*a,vkKU,x_!*i1A1!B]}u?||R]$<,<v'5s+UazKB}Qz;s>>Z%+{aliYo=1'@wqG
    UeUeWJ,KVUruBaU%Z{=\{ARnj=BUj$<Bpam\xT}!urn#g~,wK\D$#n15[,T=15hx?Zk<pR,vxY2)
    x+YTv1?JG];X'Kj!4H${#Q1HQj?E+J$,]R]+sSYoZ_~]Rjjp{C_!D*K7U#D[^=7E+2'\i{,z~pRz
    2#_{Q<EZ72?xD<^kHK)TG_J^@*+_YR\?YolT=w@WO,7e+_\\n5$21=TH5C7VHW_kx\Cgusn3[j,z
    ,njwIjlDzI-oxx!HIG*T@CUuQR'w=ACv\~;>;D\~j{3C.^D!I&luA<E7C;g8o-'l7!>o=+}D+}r'
    AO$uTH~XLwlY=zwUAKUKj^$,?7V5iaX{@Y{JQMG3Csi7[EG$Ex,>T~,H;m]x{D-X<^KlXnzn+-rk
    I71xvCWB~OJ-CT*VUIe_7GVUDBY3AGVQZIOO#xe3CQvmUr^?Uw$j@;{DW!oOmZCmWV2GQ7HDZuK=
    -[R++\=BA!8_x_WW_BQoYC5V~us?In@5Y>5e?G;m>7#S?OWHVQ$^1E]},;EuSaeB]mGv^p@D>15;
    TmQ~$ZOWs$>]svKz'rG!Gc>U<GJj<^*w!U[J,-4L=Ae\Uz1~vVQ1H5X!PDipn\+!x!]#s:A-VrI?
    O[T5,Z,C=Wb{z52w+[$ZQrH5rjae,O@t+w*Y6>[5'7[JxARupEjvBDT*@,k~15p77J[<Y[vBJ_>'
    J;5{BDHzAYm_o=R*}H$=,jA==DWEAQnRm,vH$pr_@uEY2L4Kj^peIv>KBusCJ@2Ev7{Q{ea{-Xnu
    '_s#UX#ir_TWvZxHaVkCvmC-rE'Olav#1i3#B>;1ar!#A15J^DTs7^K)n*_uSVY_HJ}2!$lWm'zZ
    KXAxppa,+@Y{rzoDUo\$zk\^=!-oUeJzG7oX>D[<z]DRG@e5BT,v2#_Wa\Q~*MHnQ,j'HJ?$)__-
    'oQke3O?r6ri,lS__i-TBirwC<{tk}s1[GK>MG;v+PBCD?v_W$,J^x@AObljzeUqT[s;y4>^$ZaY
    ,_V<XjI<'GZx?ws@,I5O]$[,@W?em,iTpA]#D!TlBIwpEs2+{VulnZlusl{+vxg6o(A^1>T*?H+U
    BI*_rQx>5wD-*a7IZzTV^+UBCjuV7Ks+V\Tw\zG]\O\!lil_O$#C?ji-'my>I!GkX15oZZ,3pi=5
    A,'xGGH>{~Z!<3!$;JvYB@op7'I[A=>,]5kwYi[G@7$wGm@RAlA][@v7DuxGmajmQl[jj{n%*n_K
    P}#=5i1av"NmjY[i|t+]}![("}jei;RK$Ot?a]1ln<{sFc}D~^}Rr+#{1^"lI#_K=@p]Y1[6;[iD
    (IaB7^HG;p#pmjE#{wr[lBIws,ZYia7lY;R@>IH;C\'OGId*e-O;7*r#T@uaI?we!1X|,rBCTnD+
    QaE~_a+pWxWWr'EKKpH}7+uAx<~vvu@5]K]e^Br[3a>Wl_e@CX\+?A2;_1[;sxTnz7+YGnxWDmQ7
    =Z7Y,7i2s\l^|_$#k1;n3fmw]k<,HHwsiXi=iD^\#[{wJ'lsiD?EJ}HH<U1-2O~+x3NlEWa@Y>YD
    HrZ?]_Rf7OZvDoICz<,B#R's7<Cl]'ZU\\5]5+I!Vil@o}uw's_!nC#CE?<;[=Hk6>>$QTxkXs$;
    \$B;~jB^~ij[i^Zp,5UTaoW\G<Tnek=r[}Zvr?U]l<9SlB+auD7U/iraUQYX}zvviOmDB#{'2qve
    Qz4~'BJOP8BKRiJ['J[25jOE'G#=DivB;J=@smACH<QizHTT$p>=-R<Ri77e3m,VY#}+_K_3<I=x
    +pJQxHY-Aj=[i^~S6A_!nm*T'R2]aw'X-}}QIRi<-on;<pTEp1ewAW[TX5DZVoxIiia_o_1$aloT
    rDsGT}aY5Nbz1JBs\I,v;a~w9QCuJ@UE}^o#_1Z=$UC+r{R!u1anWQj^]J<ea_RX=Owr\>*RJEYO
    #U1Vr#C1>]^#<tAli*AGB#zG$>sAa^IZwJ}meulA,k[wVwW<+lRaXIkx@CV*UOE+;\J5$v"}[Bv!
    +'{,W+ki}5OvG5_[~a>,=-HBeE;'mZxN?wu<-'A{B'k}G3B^L8,C2$w<Vr>A!lEa7*5Je#=<5{sU
    [?BAKzJ(B^\_C'e?VzmB9kY55$Tov,!*D$x\sZj\+^A=u,v3J~v2T3D>$k>\nFp5h'k]weR5x\Pw
    C<@TE+Xf_X~u{z?kiBD}(Bres#}Z}*T-JhUY<G{sl1@\7vZB~Es',rIUTOT72uc*DRnVo[xpCE'C
    v>,+<z5?XUJ*@IJ}>Dm'mK,kH{{9qHTB}2=V,v@o]ka,rlA*{VUTBZCDr'-lnP}\-^D#Z5JrUR#_
    Q?@DX<H^}n9un1W',;mm[}'@QDX0&L_V>RBCezCijr]?\*e\^+#C;-[AX=Y(]Y<Cp=}]~z>KB<p3
    1$QikBZzjvp@<UBQ%jqr=a_R~m7xRXUURZs]]QW{A3O*[JE(rUGXt\<][xC!XQdWsJO*5o~'opzk
    U@2UCmKlX}=5z3HCaR;qA+ua}Iu5kv@nA<jD-s_$srG[>X'aQ3nGeTR2+7ew1GJ<ljiph~{l-Bru
    }Or#7>IGih62[j,+7T;wz!RLFjHs?nG!Gro#Uxp@RnITC5_n**[a_3YACX]TnJG'T.!^k]rin_Ys
    Ur;oU=eR?RHlla_n=rE|sX,$_s3x8~wAHV==OlnnQ3YoIdT]e~I^'k]{jOY+AC3[p1y9\B,_DWe]
    Pn+C*KXvr]A;~{^^Z[\;^OGQa1!2sI_k]r{ukb+zoarz}kITaC~q7s_!,$jE7eo$X_lHOsK1{eiU
    GkHoCDjOn^+W}Ko[$UK[m5EA2hKj3mW}~[7-@r|8>XT[[Ro7>wJ,'7]kgg0QSHQ!}1k~srm3wv[a
    eM};*1]BA2YBw2>G2ReKpWDRQ!zHTpr>$er2vnB=zr3r-[eVX,oZar;[n_$>o[s{DKir\p57p\5H
    sWM\sB^:3,<J)rl\$i5YxpjJ$?-n7S]sT7j0pz]-heBX3W]~uY'i^B@V@\!7<1=nB>-ErO=_7+OT
    oHDUnOxW!D|ef]{^wv]s@x3N;^]=7U=Q,6kvU3<nW{l!UJKo}<2GJm7O~C!B@GCD?\z=UsOi^zq#
    {1E~-Ew[][EX<Z]}jZ+>zmkOOC]X${~Vwjn,JI>\7Z5]es$1e?Ua+5n<x2r2B\#$z#],o*u1$kKs
    XE^@[>w$AleH^VnpC_T'z~DtYDO#me,i531RvkwG;X\a#n7?EpKYJn}2Q,e!oej?lojt~vCks~Kv
    vJUA6ioGm6z*_'>EOa>}zaY'~on}C#al^ep?mad3=\uj?}#QG$nGKWQAxipp-Co_j=V31lsi<K3t
    ?a]2$\R3KY*Cjp_pT5\+_e[+.bj=[[{^I_[eu2GUG\;zE}vp;5P/s]r^,Cp#VvW32_WjEOW!Hz?H
    *uG},WZn[HTryIUj^<7V}x~u[n[Juvp'r^1mp\o$!p_+\ECRQclRX{v{O;ivosc&3T}#]ap+j*!@
    ?RpeR}^#b3I?p~[WWK_lHV_lXn=ouN->DiblDRx51E>UEUQw^lX3$+-wHaJT^pzIHoj'zw$eClwG
    eZv\>e2mG>o41_w=$ORw&I>z'15^[}AZ@CKU?V[[xt,}~Gzv>n%IoH@|I-]$xGkXv[{mKej\?wpT
    \5j7B<{!7jJmF'^RVduQa~gss'2,ZvB1O;pLvu];W=k7-R-IkvA}sH;V7i_[2-Dzv\aVE_<Ex~]\
    qlQlkZ\r+\j,pG<>GOr2u-'RKz,_Vz[JI3*JT,BQU2>x$uXTGxJCre~;WP;{aa$Ev\2XvxRkA-RB
    7AO<{7V}Q#1#^2R-e[AB\ZNe#U]\';l$OOE>vVK3'a_YY1$RHxkUxDreVva\xH1{7#$;^3ApCB2A
    wJUmo1JH-1XJHnk;{rwNxjDRv+*1mOjE;a_$zs!~uRU]\v;o!wBK7#mzOH->VDIx~OW1GKa!>_=2
    anos!sYW8ov>z^*^l-5jljQzKIGRJoIu<IO-\exU#p;mQKGVQV[W$7ZQ@I}*]\inY,'k;\&vVo7F
    ;\mR\l\url}px<_GH'\jflTn{-zwUtO+>eXz>~,X_xx=X,>^;E^DD-DY]s+{zwQA=D,RajHrR@O*
    *@T*HsrjJ>QziJZ{!XTXsnDaq?j<BaD=ZTA1X_Z*D.=@e=R{IJ'-{C-Ajj,,'7EY]klpjvEv#TA<
    s'*SG-5@YI\#x]H]2XrU#]w@mXUnvIk~nY1w/E~{I>je@XR>5G{}##>C-UUKVjX$]YYO,z\!x+x2
    jk1wwj$^r}rrBef'2U7r2=Yc?B2OoO\#]^zVGjYn1]$#r~ER{X-}VG=u{&O;Jk!^$W+>zA_Wznr_
    D=%<B\a*;=!fXO+z]\}>D-\{D{JDvk${knwJ2woA<r@2\HmUnxv>Y[O]$J-[*TuYT'EUpv2YIYpe
    ^>jI-le'O}T{T^R!*jWmJswK]i*GC,lvrxTjT'eJC25u#A@Z017\E!Xw-73J=dLA$x<!^{3m[Zn-
    GxHo3T$V5<^Dl@Cul=H,Zq[[AjJ\zsk'W{IR*aS^Ym!\!UB\s3V={Vzu^jaI7]=^Rj$z@,!3_*<5
    KK{~EZEFeCH*3zo,q{v!p!]UGxGIn,57rdiek]^RY{x]$lGNbs<;v0>X[{DYX'f=-DY-s?;h$Y-D
    A];OdGT~o3DQ288<+3T}F9s5-uY+D^^mv-,pZD<ojw'}{si*V$rZE}$;X]}AY'+pYiGiOl~DTQ3o
    ]I*9JEDD-}sW1kx<Ya5#**H-aEz!'+;@O~p#hI*=@*Z,e'vKK>[22vme[@H2jBHJjC7RW_eeRC7]
    z,urD\wT3@+>E7xgIzX2u\-w}H3un*z^#'BV_Wa@Dk@@1zppAC@#5p>'p}KwEymE[$<Vr-j$oVJ]
    *<{-Zou-='v5C*nH*WR7pkm<OJp$Hm$YJ\G<Ol3$Q]FI;+J{T=C^U=kmRzw+E*=4fr-m?orZ-CkX
    wj>-$'^p?^m7Q.7v~R#Vz2HXl3RTJ]VBD_il@Xrs~][R%rf,reV%$+slo~j-d^v\2z~x\zc[5G1A
    _CpWYmz8e=*kIjzxJE*'K,ls{e+'shgRWEj;nHx[a@DY+E*~seVeIBQD}V7xx$Vk}wzj=e+T_v+@
    .ox1^is-'sap1vlTuvx}TC;XC\2~{vW$XPl[+l$eQWe'KQxXY<5~^]E^=]=;Z#_+Ov,jGI\z${*u
    T!A8BDuWB\j-3=]vX1c,urpETHD{']KlB[YGsUDg_ZB^N#[pxRBcmUrV@D+=e*-Jf>xj<X$YX~w\
    Ym$Q}l]W@R-A?QAQ[2*~^#G-w!-R^3-JA.]pj[*\wGZ-Yrv}o${EO5q7l>%EA[{Yj_uE\lKG^;n7
    XK^Q5]^#a7YrE{vGU!\1'n?C+vDbsKaw53aW^g{vsU^,ODCzrBuXHe#Gk=f_rBZDHzGQm-2z\RX5
    kV1oeep>j<'3$TVN51#,REu_y7$]'Ae*Y*?EAO{DDDH[{YLR}=W+-zB[n+GD?A7E3*''PIOZ<'[A
    GVm7J@5V=qaeY*O#xI.ro-<$*1j'#J]Qm~Ht}Ka-R+J+v&QKI<}<\rN""=U^D*'J1hCWD\fvnZJ-
    5Di=^@CXlEuI$o^RT+\kj}u<p#B1s,C*Cz;,J*@OWo]p*XvuEeV^Qa!$w-Ws1Em)ae;$]{!Ys*~@
    p{xlp\Q?]s$=E<D=Q[zA_GKO=1*1j7G}L~55WRaOKO?[!1E,uVC>\KA+OaGo='}IUUXQohzHu'h[
    a^<AX$;]DwwR<UY2U_WvDZ\QkO{ez-O\?l-2RQso~7D^'p{a[_iujZVRk*?S\@^@ezA^ka,H;^'\
    |o*Q@0A]~e3}5_xi$Gn_silj5]wQxa5'2j*[aI17's}VC5K>m-M~T5[IFo2,a[r$=v+3?,=z?I^T
    w)}]J-2vu;zmwpf!pARW-{Hs3;=4$CB5\G<7./s*+xCmVz1w5G^ls[k,UE2\B_~Vm~*l-DBrW{H'
    G#5525,H{RuBJ>{XDU?x2K#=uIeBu2lzJkK{U[Xa3J=pGe@5\wEYn+=-vTXY<s>o5!,uZjWXjwkn
    _i-sKQ;Elv7WBwlTOwA<OieI1*VEDnz+u-e-O!z@K^{QA2C$}nknA_l?euy$sXO$VwAGT';[Rla%
    =VroJ=wu,oBpz<@;pe$G}]V<*=Yim>7!I{C13G=Qc=~72I#U?,\,<52x}JD?>j!a<b],1zURjlS_
    }p>v[I[mC5xVuK@LqokJC{C>[kQ+[TR{a>{Y=uEu[,noV|,Cl1xyD>;@Y$ZZ]IxmQkm^mDI5XeD1
    G}iJ-njKmo?3Tjs=vXa,,<xW.WA'1VD{,v@wz}OQTo<eaa\R];>OUG57@;TzA]O\1om}7Evm1Xn<
    {-''Yej-wxX1YRBUCxm!1Zj@x6YZZ-jQA,DH5G"J,'E~V<Xzjes?}-\^X+I!U!*Wz->*~T^;,~JD
    ROCjlWK,OH!%*>3$!-p/aURQ@'A^A[Z;#&ElCI[2{\[GJr2C$k6>eT7'o17=lDvR<XY0-neaF'o7
    ~ZGa+k<j\va>R1sBG[E~;D!73@HI>H\WBjK{TUq,w2utAEX,S&;x3n1X-5<e#H'iOlREpTO~Ze'5
    $$p]Cwjj,>u^GS?<7n)3>2,B=--G[X@s/z,v_D{~R=I'+wGR-7+[[Q*!IAB[mO_uOVEou1lj,k<B
    Z}2]DD?X!K+w\\]=2OZunleA<hx{m-z>O'Jx+Xx-C\Aw]T27a^zD<w\KjxCQE@:^Jp~V7v[J'BaC
    #OW3X'Xs+=2jBV3-*~!#'5#VIjT7-~<*p]*2*na;=1u$=orKvjo3DoOAIZRBW=UYp?'=*RTBY@@r
    AvC=jVo?vi!@l;a-^}Zj<@$JIHDe'~wx[rk#v,{[x$Tn'};]e@5Q,]UbG$iO^*Aljor<:rIICo}T
    [@raDuspl=$;]KX=neNv{Z\,![QGa-o[u3;[,ij;'Qj/cj\!AmO-#3on-@><s5H7uABvmt*K*RpB
    ~z\2+_7E2o5oCx3YE_Vj*5h6x_@;{+n\M/b$leYj6'~JADK=DkG~kEEHUCJ[;?Ex@Y$D=_G->I7k
    w@e5HK1<GKvVGj#2u\Z'*B$Di;_<EDl}<x_H?n7!!sj++'J*x"25=;BB?EI[RRTpAT3X7'rHK!RV
    k@uz{UzKarl{xXNQZ*+ks,alI=~CXJloA5<I;Tn]2};Li>_@VI<w2-]Vj}#uC'o#5eo>->XWC?a!
    V{Y-7H!I#lK>IW<7'Rou/Eao'RowDEp$w{5pTY2X=BZ;2a*1XwTzRhBuY^B3UoH+C1vWjU;B?VI1
    '!{=xv1<$E"7\EK#no]BYi#^;mK#T+V$^Hp,#GpBoRU]#^C=Q!C<{[7$*oXwwsWP{+J}YiOQnOU=
    <_$k>{J2z?CjrY#3sG^[O;D'}z-rO#Y*y\;{_1^*o\Za}l2X$$r=B*s?kyYRB$z~T-u'!#@[57v,
    e7O~C#5!=De2@W[Bo@\WeV*Q]U>E$\r#_@HnlV]xO<Y(.l+;p7_VUkHV'mYETKooDsY}^5e5s\[R
    @}\A='oA,1JA~&cooJz_X=1$Qx}A5mezQwDTG@?n$wDB|iaZYsVn}:l'eemh;+}i>av_3+WCp?TE
    {{JlaT~@okGr,{E#De?XX{7o6{[lXVDB3DeTZ?>}+?,T-W1_?lZ@=@D=Iu5e52<jY*U3v3o~oR}>
    Z=[~seC<1\@;EaAlp3j*W[5I$vHVrw'1^Y*OrpI[AjO\}5G?}=CiJZRWO5z>V]<>=jZ={ElJ'vaA
    xue'U**>A,?Xl,\mEl-Dlqw]$3vlK<B{_YQT=Z:j@1BA=<Og25GBE?7=E5JK,Reju'J~GG^i5|/G
    D*'^-;B\uBA'@s2uxx#mIx\[!rX?,\C$[EZ+*G^^{Yp5C3s}WwDD=uQDo<sp~3\Dp>7'[=@\[D=O
    @1KGnnBYB'KysDDEJjp~:=>$TkDr~7E<xk[<JjOT$a-,1*J+~G+~r9C*![^Ip\x'xU_$+z21}T,Z
    Yp5EzaziT}BRpIrJ-+oi_T[ive=ro~Z_krm,;^e+vs_HoXsH]!5V-!!DnBeCK<3ojT'_[a[-A]]z
    ip[rOZJ,*[^IXZ2,zUn>jTl$xj~}@2Q-z3RV3+DGI,HT]Dsj!lgCCVE\UnxBxvvHU\3{Y@O4]~vn
    Q#3X7$WVI_^^gI>>3]nlEr$V*7#o'17{3*A=i{V+$NVk}2Ue!#GIUksC~X3xRW}Jpm)rH1$]GIk}
    WE5_r5xz]l'(^,B{{jnC9Eza}-1sV:JEDjYOVup]]H?I+@p;*i^^_!qLO,WrN!Gw#_'D,raD2q$@
    O{}SnU]]o]yv3m7|<_OR'>RWA=2\#,*G^lZ_-T,x=zp\u<nKHROYr2onev!3<[o=-BCHV_L!nBT!
    7I\JrBBEzoRi_eG7Ck1=[We>Gz-=D>#]E_WHnAX*]Hn9F\7YCDl'\,Vw-<IH7$O]mmoa@1!r5VKA
    5N9W]uv*~>#m{-D}~wY,!,C6x;zs9UO#pOR=QxrH@eV;-L<[_BWrmJQ\EWxUX#~R-zuQC7{Hp>mx
    XD35X<picrx]Drp\nqo7>@IO*'_7BTq/n}QTkC=;kC7pTnCkT\3EiQXzi[JEvnx*jQHBl#U!al7O
    uOlUxs'2z:-aDZ4+rR*by=}rv;1e3CGH3{{E{\+a>eC^KSLKo{Z}kj1}sDGs<IO$2Y=,oCe>HD_o
    K7CoR[#c3w{p3sz'G~2IYGW2I3{{*eO;J=*ES53DA[Cz<Dov]?Y7V!\x@dS=wGwBsvnE^2uF,R{j
    ^\!'C\x271{]AOJC8KL3ooaiX=sD[GiSw5-~F~wG5jE=3j^_mwQe24<{vvEZjT-e7\@ns'YJ$?[j
    <\\3enTo,I3O,G?1m,7,e_nt+*ij[kY-k<\$J}-QASJsx^uG+XVmlXjA^GE'_<~AA<2Y$pM-7i+B
    7,aYHJ@?RiW8~YYXX]<v4l|ro@w}XVEO'5~\Ci5Bi5Dm>^}JC_1&/D[+mYozEB,{rqr?}z!Cue4O
    !'m=,25j[RYD>me%hiB*'zj2;zE-!\}C_&IZK1HTr_Oj<]U,YinYnOD_{[e!!,r<vKzH$j#vYvAp
    B,#D2!!5w$z_!T&~VOC@TOV1=TI[_}?!B,@Px\Z#BuTQ2rn-D=]2!er[~zu,]+*[UE1CXX'pHVx*
    _G7>xVTpQK^2;p[!*JoWn*GWCJA!w\EEECYTQ-pa+Bo?*^}k5nDXU}7AI_V?;HEm1'}Iv'kw7VTW
    U_ssne~v'_ZrG!C$L\[U$CJ1T_KB;1<Y7PnCxsc]!GV=i;IYYe+Wa1p!+mx~=A$SED\5-eKC*lpK
    BV-BGOe#rlsm;z[r+}+ajvi['~@2T,n{lXHKZe\2ZvlZTDr>\kXjoO!ru=YIKB~G{D]{;+JpVZxn
    Gm+@[D]~r,Q^,Kxp#QXs>]xl'Q=IQC!W#XZ5n\*BkG_Raj+zE_zQV5Q3:KYXBvB$R,1xExf_pKG^
    }Dw{nG>OHXBIWn'=wn$us^j?H+>pmATX^Gr^@7+fwHA<A$UX=v#>y}j+OA,u~rGrr~_V33<]-YvH
    3p2Ku{X+<ZQwEv#7{l^paeW<2N.UQ_>[$=kHY*3pvY\:AX<}1Do1~1UHv'TER5[KCHul;\Tv$jIe
    @HJBTa_CriOI<<{Cs3I'Evj22lWr{<l[C^+ZxmY$eWH7+XD><pp!5eERCpvwdI]@{3X*IEsx?5O=
    $wa=scrXBw51~~,\AC5}[QtVGkWxa]Y8m]XU~$\]}o$*<YRQelIni$,57!>pX1a,[*>A?Q>[3^Y_
    O5J>p_VIxA$*!EOn*TD{-7XXW,ja*]joQ=ejjkD'k=vz5v#2?v#sU<KoKQR,}In_*>ZIEjHVr5n_
    ~BYp13Q\@<$UH-+pO5@_;x;Czz#@UCZ$x{}}#*XsH5]#jaa*DJ1#A*wR[YAE]=@plXX'-^TUkT'3
    2Is3VWVH$sr]@+HBV*kDm<~xB7;{_^;vzeHv]3Hm*>1'^nT=]k-YV}}*aQ$CzrnmUC#u&rlE]j3}
    ]_r{\uYjsr[V5m$#r,lrmmTDz[DGX,eZw\r7r9.VruH1_w?f\Iu<v}#!zA^<^GmrS$QajDRUG%BD
    aa3^52J{C3nrx!BZ_EsWO{sYU3j=<KWD+r7mn>Il7W$u!^5EwHlvXv#*;+rnw*II!llmerrWaE-j
    n+K-+2zja;x7DC#<e*:{>$U3E>Uou^Y'Rv\Us*ZmxXHcY5^!3{KIZ<w;Y}sROnaj8_GXxizw}I}H
    pKB>*@UVrHwn+2xlroa}$'Ymk=si~n*,3.k}k*4EaG1?wA^EG1p;-ekXR$Hnr?ox3AoJ{OWIYm\D
    5-wvj>!esmTv?vpGT$GB]-$x+Qw{_E37Yx##^J}-,=pps*@5]1xr-~_qKeE#_\UB3=OGj&=GTx~E
    3DDOaA=*}UqO5@G4u-!sTT^vH[WVaA\ukB\-R^sC;r7r,1n2}VY<Q7^W)2Om*Ux{A!a1j>+K1uHp
    1K=l7^>JAB~pn^^[DR!{2;B+Q6\<,Ve,>=YV+^El\vjA>\y^*n}|XlYQr}D-#Co{WYJ31[2pQ;>~
    71xs=>+v.5#@<>pSn*=xY&\^2HwX!3aX+{=o^*is;Ejs?UwD.YVX1~}<k-_7,JCUsx7{,AwH3O_+
    pIJ_-S,s$a?7ID'Z]~ZYojheuGaJUwE4Y?J3w]eoDnRn[KxDQA'5!w[G\a2o~XQ$TVx,zjOuQvcB
    uJuLoCa5x?ZBQ=$VCwX~Ap^_%QZG}7>!~C*T$I<1uQeUm!\CD#>52O{ljcJY+Z#z!Y[@X!j!B21\
    eBv+u1aH}-swnAdY5~[FPBi7hYlpTq{E#eOhlH1=#'vKxI;7ipXalV;EQ15-w5@sD*pH[p5j['~E
    a1jWqB'x]*C>=XrperZ>_+Co#Y\YO[#OR>'>aUo^x5Yx_yR_UzvX]_OG@WaI^v5a$\laU,&-CjB^
    ]wCQGzR!T>*.mC{}BmYU[5HCY2p,x<D]{[UVo->\O@V]QA}HlppXuHUR35pIe$X1znd^O}ak[-X%
    6BsDDV'Y?a^lmI!X=T{G;v,xG!Unvmr@zFG&3z*!vVE^*IVx?^X1j>ZGKTE$B#\kKasXaY~IMz\]
    @^s1[$$7V78.2l?v,^#pY'ZY?HKR?rVnO$;!][E{*Z\keTa'O>3Rlr=mrEo7wQXCWX$1z\Waxw<D
    }*+V'i,'Y*YlBKT>]>OA1+3uIojeEEpxG>pEIeum,'Ro^?p?q>n@aUO@GCa\_UQ<jsoaWiUvQUIz
    ~A'<z?TluY#HjNil7C[EE'C]!HC2x]Kj@!7kK+__k?&QJ{@]Ze'Q!Q'p7AUT[Q^H=aR;D3_+qFmG
    EpFJeoXCme1V35},IBGxX1jUlj1Ho!or^U^CJ5,=$R}uw>{kT*Tu^VWKw,7=+ORCE_$v=Z?=BHTw
    j+aI;>s=3+zUoR[XH*am7W\07-[5\}$nB]7wC3*~12zXGxK,XC@jZapE1@o7>Vk>.hwXoO_%&3RC
    Bl?r@VXrEul*l!+RVm<zZ^5Z,-RnVh?DX2*GeeT}>Vue#,><Ae-sJ']x^rr\}#21+J?AIG*YX;7p
    IO%uGC[wYZ+lEe2Q-5p{'*rKAE@YIe2VYwG,wRkd5TJU$mU>OY]Q}CoR4>=k$o@vHgeEsAlu[e}W
    >\O*V'@]$?RH>Zqy]5*O}T]!woxwL{[1=^rx]BQ+o@5_ii'wKBn}Jfe$Qnmzz^j5_!3+2vxO_l#,
    7v*RAvXTYE;5TkH1BrrBjvso+VUCwTn,>G;oZ_x}v-'wTrw$T-<{aw)A+p5DxlY)OJ>ATTHj^^l?
    bYoH-+XT]x^-xDWHwsa-rEDOY>_B+~Yx_yImX5l]X3m^OG1++#$G>oJaw^nV[TR>T!~}uu,!@A<G
    Ke1@XHqu\An}}ZO]H,}W'-{*-Tx[[A?pO1Uw5=x7^k~1#3ojYH,,*sV'!1@OJ-x*TjwzZpKIOv,5
    -RO2$;#?1]w,Z2xu]j1@L\u1H<vv?jV}mnBH*RY+o?V{EY+Y^e>o-2><!RUxz7Wrn{'?_V2<pXIi
    '*OB^TO;+\>w+[e=Ao3\pY_=_C,2lr-Y12AvQzuR[j[>_D{>saXx_^vXQR7$?l#1z[+W<-[,;]RO
    E$UQ^*X=J;zs#_WVjSOipx}+sIV_;\^usGwUl}*um3'awr-*>nJUx{]?xp~D_v^T=#1\NAwR2TxH
    O<eEVUennIa@O*5lz;G,O<5lj'kI$/EDR;z6lD\OlRBnC@vr3s5vkvYwF>_{$zjOvG*m=x~$~HaA
    mz$QrrL@xVTJG*Cpb2>XR=?U]+,w{B*3WBz+\Q?^{H+T}eH_a*uuI'rKp^ErG_nK3?{VJnCkRCem
    ^zYVOmB^YL"eE$usO_B<p@1)3r,_X]in3E2_/z,e=G{}~$eUs=#_Jd^u,1Kz<I~nI1s[eVkvexmo
    ]#,^DjV@VHIjV@2,u,sBpDZ]\v*]Gx^!vU_;uCNRlaT-nI3\R,z<vHz}A^x2}!CW>$*i,?]*lTpX
    j{53TvBEeVT2\_eY#or[jln*JR5*,Ru'CBG/JTmTIAW'2-$j>lmI^<a,3\z5VT$JY,RJ[eEruGK<
    ,!\5}@1W1o>k}H11xX$nb%-e^'/$vH{*x*OKE=]HQ_5EmK+6jI[H@U^Gs_$[4@Ej_WlsG$}u[!rR
    W.z=HA7;A21[VO5oE1\,~wxoY+_#H1H-zW'\_DDy@[AD|s,]=@5{}5v5?vz;28pzDRbR>wQ=}>_B
    \eD!jxG-n7#Vq-52Q@v!X_2-Yj@IHSw]_Ij=+3TwwXCHj?ZAlusDErp}!uxRjmBCI3i&O\oEVp7^
    \]}'o+J^<Tw+!la_*kAR1$ez([2[1nHe<_jaav?nwx?X35#\mr>r<UIKliDR<x!Wa$W!aEume@>J
    s]QHz$w$TCUz$noY{-{}$g*DWz}ZJ;v1BZE}e"5oTG]_z292l77#XRC]_-7TT1r7T_<B=21@j?v<
    lQ~R_OVV=!wUlBUpCz-'#_iR>n=!Il-~Uv5YQO_1XK+2{wl_BZA'$a'GEux@H'ofao{nGz-@nw+^
    .sUJ^\[R-AD,p_u[VAzG#Q2jz9Ts^rC|rTlk]*QE2\@1rUAui+Ou$1#Uj+HZn_5T-5[!4C{^7=7I
    K*oG}oA[*vi>'W*rRp!A*1$GsxkXOvue=Wpv-oZr$z2^zD5?ll,u^V;3-ze#=^3$;IXBe/'HR+'x
    !GCAKB?Y@$X$<[!1*3>G3}RpUAlVnVs\up35=k_#>o?}KpRo<Xe5w7>zql@O2sjk<:$YD$rT]+qz
    HYl\v+oYjA]1lksi[{#Oj2,k55\?sRjhw-YOxkI+JY_CJ{w1TrV#HQeHG_C'vZ[vzI[whL=wCpG>
    Vnx/+_-X75\~?$@J1H_'U[7lGgQ.*]sav1YUx3<IpsCw}2^1rm5[KR7$@pAkU\{rps##IZE<R2;=
    \'r=D@3,QK=#]1!Bpq,KeZ?TsuoGVx$nQoBVATBVaOS;Cl<:GrD$kIl>R<\!.TQHKLX,E<x*roWw
    nKV=+#3s#xs,J?kr-Y!YTJGQ=w1CaQ^[-\N5@N{=J~uB2ZOk3,G?~?\UZmYBQQjG_*\\A'sEEuhE
    VD'wv'^1<$YLk-DRSPa'V35QB?~X^3lmYs?IDe7IT~sHRvOB?eex{urHoVHj*YjkX>+Q[GO2A!_l
    1~nGT}jsVOnQ[A$tRo,{sj5RR}G!71?!Dau3^{^DWpoUA+pR_<UUIE=RXvUnmV#HcpaAJ<1iG~l3
    ojACZ5}x1oBpu=;^pEH>EE*v+M1Vkz<so@jnjBVQ-*.[oAO>^^xiri*ECxadpoQQGz_VQYeYB$xU
    }$-W}[vY<IYxmerR1OE1zu@\];1jT{3Jf~a1*Vlo5uG{k'iT$_11I~+T@&'7}#OHEWwH}k^~CRs@
    1<,]k7{<BnnIGwxJ]njoO\,XYme]3!^[?j!X,pQ@<\_l11\iT1B;B[T^sVQU^oJepO.U=\D1{-3E
    K{rlG[=Z}#zD~REr5pwQROTb(nv>#/v2$=$,{k2Tz7DXxDgoKG3Du@a*5<_^-Uxliz{BZ5DiBUTl
    OWT-H$~}HZ]\U-m1R;Uz^O2uwE^dRX[HHDW3>-HVR-=II!5ox{OT#<UwsB+K?zo{d4J+mK3{K]n+
    j?3aEK]ozDr>]X#^Ysux1Xde>]+OKlms}CA*x]{]K}<*2;!BleTo=7^E\RaB1O~]!WAR7x;1>a}5
    <O{uUUIvwV}Dp{w{ejapb^GE^$I!<=pKT*!]m8JVWT31>[K5+$wBulaIGQ_X>sZHVD]x2I-z+D9'
    !-Wz,p-mY]@o?enFAlK2s^m+r{wTl]5}e{o[+-+o*zV2,7RTJVY=r~o#[u@QG_U'H(Ba[w?a+r4r
    UbXpj=I!U=I3-;>wCJn]\K_m]^aX<rE#D7]@[XUO>#rXUB1UVUvip[_;Eix<ZE\AlA][ZQ$DXRaX
    A[M>AHa3D[~=.:!C]7P~D3_[)U5M0}HaU4wjxn1E<[_X[7\-A\Ujr_IB@#mvUn{5pn{S,XCe{Y[p
    LpHaODhC}w>IH<HEri'j'J[]k{J}'GVkEnwTs;uCw,=aH\3_x3WY?5TL]>J_rnE\u$\@@5><pO5W
    sa3eO7x,Nf';+<2lK[!Ek[_z{e7I!IkRBYpm-C3=D[(MPBTUY"DBCv5vPlu${?Ce+Jp1e'[kI]V}
    sE#GH5G-VB}+K[A=H1IJk,*=BQXUT;{-JpwN[KW>.O7^s1TlGBmmAXn'<>+sVFD3Dwu5+2$G$jAH
    j{$z,<A'rUG*CYU<+1waTvVv'k.'1TOY,#u\rAI;zmDB=+{u'}$EX+~Y>mZwz>o=UzkdCA2],z#r
    QkRsA[R^3'wwZ{DO}Z3_y"lTaJe;_$Xo;!sHT;OppGrOD_T7G}@U2W^fXB&6GP#D#s[3aR*auUeA
    BO?sDlAA_G;j\[OG~[_&w=#XxbH{@?#9s+5Y0wop~>eYU<D#ElgxQX;21#To\?X;5D$T$-ueUpiH
    Gx^Q!HjNhk,![x\Tl~+o3G!pmj=$u<o@!C"A5e*aEUvN#T!ll8*@Y-Bz?IrO+,X'BRT[muC37-[w
    JmzS,#zB74i\**|>sn]+'CpEy@{;QdB~-_2}$C7lZZ='T71@>oaT@G^xaEB'_JYnIVU>1O^?K?]]
    p~VCTme+z2Q#T}G-rTx;lOW17$=g=-JO?O{\=D,'WzAB55?},#2k}C'I;5}'}z$uQ[e\U=nsjRi3
    TrEQF,=w[p{vYQ?v[zmCJ8}qoZ!zE1l#5T^m;Io-vmwUPH$Zn}^Z<+'m_ua3$Dql[xU@r$\GWU,.
    tQ[Y@72VzZXp>5R5B^U^T'zuaIX7!Cp5{Z_m;\Qjzx#7Z/B{ZQU*xuJIir2wsEuRn@;-5GE!m{Vx
    InJ$z$IZW2ea\Bh>[\G>v_YR^+r.ej},x+33j-$j5HrQ?\Ra!Tr_Wv\*g^<,A#}u?>nH#R'jWn>;
    pQmou8r^uvsEa{_K*=REX3C$Qs={CRu[3T5N#H<1,*jCOA^}[_x-lv3o=zwv#5Z^;_X3C!lviTEn
    -^i2YQ\5z_]WwUex]eY?[^!aOX*B?z5Y>owOpks*QA1=]VT3AERr2B1{ou[o'=nB$seKRe[7@z*<
    [oTkoCQuGeeA{HzxDjA'O-HWLiCGA[BH3K'+DNi{^16K,GZAo-!rs?,^knm9lzB+,'YXe=T{P*%v
    IX>rJO*v>*al$3YRI+~#aHCGZ'E#Ii+!{JHfEoK!/RroVq[i=ZABAus}'r>QKKFZ{rVr,J@lG{^E
    53weu5][XsZjTTH,4ko?VU1JQ]?>=DZ[pz-GxJUs}QzU1{A=\7wKuLp}Hk^^DQ,==$2.4>U3aBe+
    ^ZwZ$x]i]1-z#1Z7?D|DI}'?EzUv=[3_#Y~EE\o~w@=VzAQlBV-sms3leYAf^_Bwp!zo$oI5zn]i
    /A>27w<Im}W2XWl}>{{;']!v[K'TBf}uB#]\7[R#um~CYxGiZ!e+2@ZD[BTjoizVTrempWk,*=ru
    WUp}1p=$A[&?pe^lJRm$ZVlpFz>,=}+[5jwur(4PA=!Cpl7Uj=]~$$I~\1TQ1|B[A'HCl;,mp1]I
    +sl3JvF,Z1]Ld%IJ3Z{6n\YH^AAVHzG=>*z^K\ZeAG+E.UvK7rNlnQCt1uxvIG<$#H$I*Z!mal_'
    GBmsQw@v}Kr}]#>{T[VjhlA\l)m5?j5mGK^ljW]TXwa'l'7BEu3CKp=}X_usUEQv![D*vo.}Esj%
    C=[[t1R~$RWUGanp1$knB'po3Ct}THj=_vp=D-~Ch"#5AQvJ_p+[\p}n@]i=TXz{;oU5OuCv@D^_
    m2~$3}[1B_REo<q|eVkRr}E>B\J+-w;Cs<ZY}f=eQKX_#$VIlQ{wG?{[-{(I!pUI,W${]B*VD+$Y
    uZZm\\aE#-}{{,iUIp!Hv+Y;'TxTXD\^AD]]A-+Vlkr$'AkY7j[]'ra[,3+@XJablWs[!1osx[<5
    ;T11vza]1$Vu',mUKpH#BDl{bseRmQRmmYn1#,J-]Hwn]*RukI<7jww1wY{Qos,GO?-7^vhp$=Gi
    av}f-_HIT7$}_'TjO@vBsi}Q<[um$o{2Y*\2aH<vFT7GETrr8ORTQ%1>@{>*VAjQD>sl+?Q;_w{_
    KG7i@j$[X~m1>~-5R';v7\$V$;GUQQrQAgzHV>r;^#zYpGeCXX=?{z\Au~{^uU<5aRz,e?V1uuE'
    Y!-w;\l!nI2YYIr2>U|*?2UkEI>j2GGap{7,n=KBCz@fw+]?'<-=D*@'xl2vNl5pV>sR,%$s\,G#
    =xu\<$<s[jIuwBBG=R'F~}>Hl_+W]@$*RK}GxAeX}:r9jrlR,rnup3\U[B!Ez>uzvw>_,5vp[5<r
    JlKr00"e#osn[_7'WAksz~e*G!+1;T#{-=]]Uu]lAvnQTZ\%,>O@nYkp?7B$[,$=Asmv\p{o6la5
    AmpuB+xwOYne\nEppCQ+7oC#UaU*38$,+=_7Tupu@A~$?7}m=YD3v5$D2J;,uCIA'#m$>m6R2o-G
    U;E\5X=N7nsD7\@7e55G3GzkxnoulA*J!},\u]}1*YA?+OE+J,>}{&3*,IUz]73]Ga&+U'@?s^k!
    YC7^dMeUEEEe#j
`endprotected

  //-----------------------------------------------
  // Instantiation of SAS Receiver module
  //----------------------------------------------- 

  qvl_sas_receiver #(Constraints_mode, 
                       INTERFACE_TYPE,
                       DOUBLE_DATA_RATE,
		       ELECTRICAL_IDLE_VAL,
		       DISABLE_DESCRAMBLER
                      ) SAS_RECEIVER(.clk(clk),
                        .areset(areset),
                        .reset(reset),
                        .symbol_data_plus(sas_data_plus),
                        .symbol_data_minus(data_minus),
                        .level_select(level_select_temp),
                        .next_8b_data(next_8b_data),
                        .sas_10b_code_violation(sas_10b_code_violation),
                        .d_or_k_code(sas_d_or_k_code),
                        .sas_10b_data(sas_10b_data),
                        .parallel_symbol_valid(sas_valid),
                        .current_rd(sas_current_rd),
                        .descrambled_data(descrambled_data),
			.dword_valid(dword_valid),
                        .electrical_idle_detected(electrical_idle_detected),
                        .disable_scrambler(disable_descramble),
			.disable_scr_count(disable_scr_count),
                        .r_d_or_k_code(sas_r_d_or_k_code),
			.transaction_in_g1rate(transaction_in_g1rate)
                        );

  //--------------------------------------------
  // SAS 10b-8b decoder module instantiation.
  //--------------------------------------------

  qvl_sas_10b_8b_decoder #(Constraints_mode,
			     DOUBLE_DATA_RATE
                            )
             DECODER (.clk(clk),
                       .reset(reset),
                       .areset(areset),
                       .sas_10b_data(sas_10b_data),
                       .sas_valid(sas_valid),
                       .electrical_idle_detected(electrical_idle_detected),
                       .sas_current_rd(sas_current_rd),
                       .sas_8b_data(next_8b_data),
                       .sas_d_or_k_code(sas_d_or_k_code),
                       .sas_10b_code_violation(sas_10b_code_violation),
		       .disparity_error_bitmap(disparity_err)
                      );

`protected

    MTI!#8"#{5!RUvvc7TxTw$BkE;*n>O+vVei~=3lU-Dkr72OjYDkZR*CJ9uQrBzl[*2VB[pJDi[=E
    ^D=7_]~2_rin}#YD[8onQ\W5pA;T~lrEi}iY@rC'ZG'$#EKN*mJ[}xi+foAQoy}41;-Zm{HeKw{T
    pEDR'Q}{k{vXl5ko*VVv5UG-k=C2}3waCRv>se>;0EBZ@p'E!]vl@sC;lv<,*r,sA|Q3e}LIG{w2
    TQpZokXVAE@ix'r$@H;#=}r^H[77uDO\bIIHOOV7[BD3?l_Al*_Gko[=<Bp?J;s_TCW__E@W^IH*
    +~\v!,aG~#l'GI3Z$#o52V?G!;C!u^;u{/aAW[YnmkVX@B5eA##s*l+CU,ER-'=kK#err{Ev?lnY
    I@Ej_p_HI?x2{*7Iw~UT1G[[p{J]<WJO3jY5IOx#ZCOEAj6YK{aDJY{(%H17s<]k,5YK7[_;xVoj
    ^mHTu=u5JIH3Espe$LYX7X#jJeO>D,l}eDnj!!pZO>E37{Per\ADU*w_Jn?doDHx'GsJ!o_u1[{~
    sU<J,-rY17!z-${_ko--jo-{vH@]?,QU5>xv%eQxr,+z+^[+AQ!>]?vA$[wYA'?u?x!1xs$2<ye7
    nk]XD@Y<Asue#GU'AxyY#,sTAIp3e#5}>{>\}5ooY?YR^'}[E\~I2,+jT[~>I{D]pv?WG#-7z?_C
    K{U?rBnoWDnjnUp'@T?B5<=5JO\UH{~H,<C$oz'v5TZe'\z~l}!B4=+QZV;7uIJ{}Vs'IQjwKaBn
    @,@Vr\x'H7[\rU&'}H-@wp~iEkRs1?HYm;^e$^Y2}UK;a1{ML':?pX-OYB$(k}TW=jD<B?Z_O!o!
    >U-D2DDvk-GK5[a7B_^x_W7xouVIm\_<nn~@xT'E#<*lOJT$*+\~<V=4p\+anA\2uV!]DpxuLaVO
    *k,\^cV!e-+A2GU=]{IZ_e,QxJ+HBzx>]2_o3wW$G]:uEK$*5<2+aZ{L,Ck!m*D^(A7OvIgD_k1w
    *kJeB7ik7o2vI;{;VR#V=;V[KmKpX}};jY<C[xCG@{j=ln>jj[mURb{7-[?'JTRm1o\+QDk+eB*,
    AV^;CRJ*v2o>\+1'XX4EI~_oYxTe[vEACWv7K'l$x_vEC;>cs2_3x=G};+JQ]C^#}BY5TvnmC[Tn
    \<7$Z>j-*?{\Q>A~]sVRVOITUX=p'E@+W{3*H6biaJXlwzj;T^r*!XsSVou'zvX]*~-X,<7~xY~'
    ^7+O=^nzU7V!MCRnE+R?JL7e\Q,7Kp,v{mT\O+3Y5-oHEA{+}]:$a>[>w22Kv~VvklYT+DEsYAp;
    [E~{wQigyZ<vH-t~QgV5u^Y<Y7C;s;;Ciwb2opV]*['A-JBR}W3rj,ErU*~fuQ2mGraAl7\rEaaB
    O2rRh\Zj_v<{YkYRwBDYx2^n$!$D,z>A~8<DUE&[z_YH,pTzHQD|n,B${n<!Y^AW?p!zC*Ds^Im]
    e$V}mRoJ[ZrvG!O>AQ!lPe}3E[urA;TUTeRQUzYurm'lmiXvIBz\,xR^CR!{jO^n_xz01!^ntpf+
    C3'd"Y[Ikg-7>miwU?l{-@H-rOOwwXVwY#CU,}=j'vl*B{1Z>BOR7,CQA7g,WAZ19j3Qx6@HIRlD
    KQfvv$2@DsV$XA*HlR]jn!3735uEuOs_GxxD(xo\\YC~lQawsg>1G*_p7m5=eoE?sT#+2Ork-$Q^
    nl?>l_Y2U^suJJ]'kV/7#GWWsE~VE2B"wj2Ar=snnrQ*~}la*>noix<@7'n2wa$5B[pm\pj**<v-
    V=5<q27~j[ml!wsR?n_]}ew-a1m<2SK[+mo-D'}_*B2VCsvV+'i_;C]\Q,-QDo7}aD,Tje>}piBo
    m;U-<xz*oW[A}x.;R~nlW@oGpZ^7O=]nleH[[u?DlXA5e1T)J7C?jz{oOTY^sB!aBZQ2WH<;>B-*
    lIX2An1u/KX[e~^-B@^^<nHEKa5V@xwu<Iw>Ai=2ImX\o]~axUwD_*X<RH\'Wd9/kl^'p?l]WT{V
    ;j'RBE<z]2==.W1x+Q^\Q*U;-kR#a#]V?,Cn~3VBYoh?oCn5ag$BzY+7lGp{OZ&2OR^((f~wRn&&
    I-,E1XOZO[!<WYrp<DZ<F>'wTw7]?$^<a-$7+xxr!^+zn?l~ouHJCO;2T7piX\nV^lWzVo>WJG=U
    z"G+1DG3DT5,WB7juri{l3^-ZQOvjum{[;_RW#Lr!Zk[v}v1XBQQs_,CK'eG&~CAC!{{eYV$V,,1
    Ts[n<trwrW&9z#'AEaA[yj(\yoK]eEL$*[K\[T'[p_W1T5a<n+@3QevpE12mGH=sUO+,T'Gp{AOD
    O+U\1+]$]TW8GR;#vz~s[7<]_~B<-<ZjyO-V3J\jUZXXV[@=E4s!E\'QKR[i@7<HG5Gx+<Yosx-H
    B]zpl!=o^^&zJ[R#+EG\<'BZAA'H'#'8|'IKQVWwvkxClx<C[_>nOvU!oY['=#'{wOVC~1VxnDG?
    <k<5i-1wIji$K}lB?laO7.#5\5p1H6ml,#$*#jU_}oIV$_+7OR}!o$Gz^_&a1V1|0!I5Uve$IEx'
    Bs^Z{Y<_3o}7*$E+]7p^7YK$O3+*!pZZ@ZX\EozpnzLlUV*~o$R;O;5D}mJEmaTbJ>;!/--O]Im}
    'mC+#+GQ_sOK{7KZJwCjuZsXx_^+Ak],J>rE>Ka_A}!V32G7,}r,@q8_,?Or{_-nR{Bj[l]Elu;D
    k^uG>{,[KOupHn,klA,3DDmmR-^5TCub}2+$v7oTKz737io@rWTun$>IKQ1p-eX<a>{QDrl'vHE7
    awo<uCllsmnpW]'5O?A<m^2oUe}_x222v=1\\Hnv,YH\VDA>{qE_<pJp#w2}XTACz1=I[Hua236T
    e]7-x<U,$ln$G-OKYXu}OTm[**GrU5}'^aU@\Vx^TJ+>sHCm^3oJaC!V~D_VzwY3D[@\j7,,Y[RC
    ,IZrv['0Q~u'mH_WR#$v?vHjB&sI]++EgO&uI}Ei*Xr^1'R@vn7wwIrmn\wh?<3uX\;>Xw+BOXaK
    O5^r#UKRr@G+j*Cv=I$a{7[*j{$r$mer~^vmuUvK>\^+l+<p+1GO|B;wRek!'TskRe72T.@V?=Or
    z?m]1!Y!Ax<w_OQ{!!Kl<vz}-,5wTU+XZ*{GoCN3{J3U-}n}]V]B$x7<l\Tx5nww5xJzHxGR]TZe
    %CY@upU>,T_ZTe<r>QY!-tVK_5"[[j#*O,!&CKI>Qr?v<7wv.^GB?r*RGzds^@\EH7B7J5~xE#u!
    I}#I\<l];_,QR#p1$TAn]-}p#A^[#J[W\7oZoJkB5w^e_Z=C_px:[{A7D!+Xg>HQKJr-a|wX=[Yi
    77|1A-~3OUluVu_$_~DYxCUEHvV!a[mIR<zLq*XT_wjH=oU\jPwj72!a}?E7~e^Vu?=[Zl}CV!a{
    G!Gu=]8uxk]7IV3'[!Z1~7GQY>Glg0<**p+nwDsIZveYY#?r,D!'Um1Hl{BhB0Q+m3OC}s?U$~o~
    J5Rr{;J{eX+A@zqi[xBBml3B}5aKR@\&I;Co]?^}n=}TB}?-G-}^\?VZCY*3C<_Vn\H[$__}1XK>
    i7!BCw}-!z3kd^RRz[;r1Na]]I#=R7<}D;'+^;7<,s_n+!,HzmeG\lq1JXorn1JpTUCxKr',W3QQ
    R2JCHZ-no_mj2H?eJa}xo?R$dd^+!DVa7XrDk2TU*iL_o#xK+T71\?X;H-'3T@KBZZ21QT\!${~d
    eCxaUvY\~<1I\2AY]Yea/or-U;*![l_Z_tHAYv]]kA\ia\M3]~7E71~_T\Y}~5!@$kz$W3EHVV-X
    eVVT$]vXo?-aUGAb}-Cl^A[2@V@;@*V7lH'$lz}EHj5R3UZYKj_*GmAB3OTp<QD]Uw<~GG{z=v5-
    ^Z,;QeC*YnX_p'pU_^u>B?V?{w,={EVj^A@Q0{D2!pmw5o+3pCtZj+vE(MQKYo{^QiCpBuewlz#=
    TAn'!~DDiG]wu*W}m@i*v[J<Z5]-RaT[J7r1C{6aoG{':h?[lVr_iw+[Cum-Uax@DCDl1['xziVx
    11$\aOY-<?x>[Yb$^EiNZ+lv'-Ak
`endprotected

  //--------------------------------------------------------------------------
  // OVL SVA Assertions are included here
  //--------------------------------------------------------------------------

`include "qvl_sas_link_monitor_assertions.svh"
`include "qvl_sas_link_monitor_cover.svh"


`ifdef ZI_INLINED_PSL
`include "0in_ac_inline_for_mod_zi_cw_sas_link_monitor.inc"
`endif
`ifdef ZI_INLINED_CHX
`include "zi_cw_sas_link_monitor.zi_chx.inc"
`else
`ifdef ZI_INLINED_CHX_zi_cw_sas_link_monitor
`include "zi_cw_sas_link_monitor.zi_chx.inc"
`endif
`endif

`qvlendmodule // module qvl_sas_link_monitor
